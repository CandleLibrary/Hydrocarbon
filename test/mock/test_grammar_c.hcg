
@SYMBOL  ... < > <= >= == != === !== ** ++ -- << >> >>> && || += -= *= %= /= **= <<= >>= >>>= &= |= ^= => // /* ${ ?. ??

@IGNORE θws θnl

@ERROR /* //

<> javascript > start       ↦r { env.IS_MODULE = false, $sym1 }

<> start > module           ↦r { { type:(env.IS_MODULE) ? "Module" : "Script", nodes:$sym1, pos  } }

 <> module → module_body  

<> module_body → module_item(+)

<> module_item → import_declaration     ↦ { env.IS_MODULE = true }
    │ statement_list_item

<> import_declaration → τimport imported_binding from_clause ;  ↦r { { type:"ImportDeclaration", nodes:[$sym2, $sym3], pos } }

<> from_clause → τfrom module_specifier                         ↦r { { type:"FromClause", nodes:[$sym2], pos } }

<> module_specifier → string_literal

<> imported_binding → identifier                                ↦r { $sym1.type = "IdentifierModule", $sym1 }

<> statement_list_item → statement 

<> statement → block_statement 
    │ 
        (EXC { )
        (EXC τfunction )
        (EXC τclass )
        (EXC τlet \[ )
        (EXC τasync τfunction )

        expression_statement    

    │ variable_statement
    │ empty_statement
    │ if_statement

<> block_statement → block                          

<> block → { statement_list? }                             ↦r { { type: "BlockStatement", nodes: $$sym2 || [], pos } }

<> statement_list → statement_list_item                    ↦r { [ $sym1 ] }
    │ statement_list statement_list_item                   ↦r { [ ...$sym1, $sym2 ] }   


<> variable_statement → τvar variable_declaration_list ;   ↦r { { type:"VariableStatement", nodes:$sym2, pos } }

<> variable_declaration_list → variable_declaration(+,)                                                         

<> variable_declaration → binding_identifier initializer   # ↦r=>BindingExpression
    │ binding_identifier                                        

<> initializer → = assignment_expression                   ↦r { $sym2 }

<> empty_statement → ;                                     ↦r { { type: "EmptyStatement", pos } }

<> expression_statement → expression ;                     ↦r { { type: "ExpressionStatement", nodes:[$sym1], pos } }

<> if_statement → τif \( expression \) statement (τelse statement)?    
                                                            ↦r { { type: "IfStatement", nodes:[$$sym3, $$sym5, $$sym6], pos } }                


<> expression → expression , assignment_expression          ↦r { ( $sym1.type == "ExpressionList" ? ( $sym1.nodes.push($sym3) , $sym1 )
                                                                                                            : { type: "ExpressionList", nodes: [$sym1, $sym3], pos } ) }
    │ assignment_expression 


 <> assignment_expression → conditional_expression 
    │ left_hand_side_expression = assignment_expression    ↦r { { type: "AssignmentExpression", symbol:"=",  nodes:[$sym1,$sym3], pos } }
    │ left_hand_side_expression assignment_operator assignment_expression     

 <> assignment_operator → *=                                                        
        │ /=                                                                        
        │ %=                                                                        
        │ +=                                                                        
        │ -=                                                                        
        │ <<=                                                                       
        │ >>=                                                                       
        │ >>>=                                                                      
        │ &=                                                                        
        │ ^=                                                                        
        │ |=                                                                        
        │ **=     

<> conditional_expression → logical_or_expression
    │ logical_or_expression \? assignment_expression : assignment_expression   
                                                            ↦r { { type: "ConditionalExpression", nodes:[$$sym1, $$sym3, $$sym5], pos } }      

<> logical_or_expression → logical_and_expression 
        │ logical_or_expression \|| logical_and_expression   ↦r { { type: "LogicalExpression", symbol:$$sym2, nodes:[$$sym1, $$sym3], pos } }

<> logical_and_expression → bitwise_or_expression 
    │ logical_and_expression && bitwise_or_expression      


###############################################################################################################
# https://www.ecma-international.org/ecma-262/10.0/index.html#sec-binary-bitwise-operators
###############################################################################################################

    <> bitwise_or_expression → bitwise_xor_expression 
        │ bitwise_or_expression \| bitwise_xor_expression                                                        ↦r { { type: "BitwiseExpression", symbol:$$sym2, nodes:[$$sym1, $$sym3], pos } }

    <> bitwise_xor_expression → bitwise_and_expression 
        │ bitwise_xor_expression ^ bitwise_and_expression                                                       ↦r { { type: "BitwiseExpression", symbol:$$sym2, nodes:[$$sym1, $$sym3], pos } }

    <> bitwise_and_expression → equality_expression 
        │ bitwise_and_expression & equality_expression                                                          ↦r { { type: "BitwiseExpression", symbol:$$sym2, nodes:[$$sym1, $$sym3], pos } }

    <> equality_expression → relational_expression 
        │ equality_expression == relational_expression                                                          ↦r { { type: "EqualityExpression", symbol:$$sym2, nodes:[$$sym1, $$sym3], pos } }
        │ equality_expression != relational_expression                                                          ↦r { { type: "EqualityExpression", symbol:$$sym2, nodes:[$$sym1, $$sym3], pos } }
        │ equality_expression === relational_expression                                                         ↦r { { type: "EqualityExpression", symbol:$$sym2, nodes:[$$sym1, $$sym3], pos } }
        │ equality_expression !== relational_expression                                                         ↦r { { type: "EqualityExpression", symbol:$$sym2, nodes:[$$sym1, $$sym3], pos } }

###############################################################################################################
# https://www.ecma-international.org/ecma-262/10.0/index.html#sec-relational-operators
###############################################################################################################

    <> relational_expression → shift_expression 
        │ relational_expression < shift_expression                                                              ↦r { { type: "RelationalExpression", symbol:$$sym2, nodes:[$$sym1, $$sym3], pos } }
        │ relational_expression \>  shift_expression                                                            ↦r { { type: "RelationalExpression", symbol:$$sym2, nodes:[$$sym1, $$sym3], pos } }
        │ relational_expression <= shift_expression                                                             ↦r { { type: "RelationalExpression", symbol:$$sym2, nodes:[$$sym1, $$sym3], pos } }
        │ relational_expression >= shift_expression                                                             ↦r { { type: "RelationalExpression", symbol:$$sym2, nodes:[$$sym1, $$sym3], pos } }
        │ relational_expression τinstanceof shift_expression                                                    ↦r { { type: "InstanceOfExpression",  nodes:[$$sym1, $$sym3], pos } }
        │ relational_expression τin shift_expression                                                            ↦r { { type: "InExpression",  nodes:[$$sym1, $$sym3], pos } }   

###############################################################################################################
# https://www.ecma-international.org/ecma-262/10.0/index.html#sec-bitwise-shift-operators
###############################################################################################################

    <> shift_expression → additive_expression 
        │ shift_expression << additive_expression                                                               ↦r { { type: "ShiftExpression", symbol:$$sym2, nodes:[$$sym1, $$sym3], pos } }
        │ shift_expression >> additive_expression                                                               ↦r { { type: "ShiftExpression", symbol:$$sym2, nodes:[$$sym1, $$sym3], pos } }
        │ shift_expression >>> additive_expression                                                              ↦r { { type: "ShiftExpression", symbol:$$sym2, nodes:[$$sym1, $$sym3], pos } }

###############################################################################################################
# https://www.ecma-international.org/ecma-262/10.0/index.html#sec-additive-operators
###############################################################################################################

    <> additive_expression → multiplicative_expression 
        │ additive_expression + multiplicative_expression                                                       ↦r { { type: "AdditiveExpression", symbol:$$sym2, nodes:[$$sym1, $$sym3], pos } }
        │ additive_expression - multiplicative_expression                                                       ↦r { { type: "AdditiveExpression", symbol:$$sym2, nodes:[$$sym1, $$sym3], pos } }

###############################################################################################################
# https://www.ecma-international.org/ecma-262/10.0/index.html#sec-multiplicative-operators
###############################################################################################################

    <> multiplicative_expression → exponentiation_expression 
        │ multiplicative_expression * exponentiation_expression                                                 ↦r { { type: "MultiplicativeExpression", symbol:$$sym2, nodes:[$$sym1, $$sym3], pos } }
        │ multiplicative_expression / exponentiation_expression                                                 ↦r { { type: "MultiplicativeExpression", symbol:$$sym2, nodes:[$$sym1, $$sym3], pos } }
        │ multiplicative_expression % exponentiation_expression                                                 ↦r { { type: "MultiplicativeExpression", symbol:$$sym2, nodes:[$$sym1, $$sym3], pos } }

###############################################################################################################
# https://www.ecma-international.org/ecma-262/10.0/index.html#sec-exp-operator
###############################################################################################################

    <> exponentiation_expression → unary_expression 
        │ update_expression ** exponentiation_expression                                                        ↦r { { type: "ExponentiationExpression", nodes:[$$sym1, $$sym3], pos } }

###############################################################################################################
# https://www.ecma-international.org/ecma-262/10.0/index.html#sec-unary-operators
###############################################################################################################

    <> unary_expression → update_expression 
        │ τdelete unary_expression                                                                              ↦r { { type: "DeleteExpression", nodes:[$$sym2], pos } }
        │ τvoid unary_expression                                                                                ↦r { { type: "VoidExpression", nodes:[$$sym2], pos } }
        │ τtypeof unary_expression                                                                              ↦r { { type: "TypeofExpression", nodes:[$$sym2], pos } }
        │ + unary_expression                                                                                    ↦r { { type: "UnaryExpression", symbol:$sym1, nodes:[$$sym2], pos } }
        │ - unary_expression                                                                                    ↦r { { type: "UnaryExpression", symbol:$sym1, nodes:[$$sym2], pos } }
        │ ~ unary_expression                                                                                    ↦r { { type: "UnaryExpression", symbol:$sym1, nodes:[$$sym2], pos } }
        │ ! unary_expression                                                                                    ↦r { { type: "UnaryExpression", symbol:$sym1, nodes:[$$sym2], pos } }


###############################################################################################################
# https://www.ecma-international.org/ecma-262/10.0/index.html#sec-update-expressions
###############################################################################################################

    <> update_expression →  left_hand_side_expression 
        │ left_hand_side_expression  ++                                                                         ↦r { { type: "PostExpression", symbol:$$sym2, nodes:[$$sym1], pos } }
        │ left_hand_side_expression  --                                                                         ↦r { { type: "PostExpression", symbol:$$sym2, nodes:[$$sym1], pos } }
        │ ++ unary_expression                                                                                   ↦r { { type: "PreExpression", symbol:$$sym1, nodes:[$$sym2], pos } }
        │ -- unary_expression                                                                                   ↦r { { type: "PreExpression", symbol:$$sym1, nodes:[$$sym2], pos } }

###############################################################################################################
# https://www.ecma-international.org/ecma-262/10.0/index.html#prod-CoverParenthesizedExpressionAndArrowParameterList
###############################################################################################################                                                                    
    
    <> parenthesized → \( expression \)                                                                         ↦r { { type: "Parenthesized", nodes:[$$sym2], pos } }

###############################################################################################################
# https://www.ecma-international.org/ecma-262/10.0/index.html#prod-BindingPattern
###############################################################################################################

    <> string_literal → ↦^parseString \" \"                                                                     ↦r { { quote_type:$sym2, type: env.typ.StringLiteral, value:$$sym1 || "",  pos  } }
        │ ↦^parseString \' \'                                                                                   ↦r { { quote_type:$sym2, type: env.typ.StringLiteral, value:$$sym1 || "",  pos  } }


<> left_hand_side_expression → member_expression    

<> member_expression → primary_expression                   
    │ member_expression \[ expression \]                                                                    ↦r { { type: "MemberExpression", nodes:[$$sym1, $$sym3], pos, COMPUTED:true } }
    │ member_expression . identifier_name                                                                   ↦r { ($sym3.type |= env.cls.PROPERTY_NAME, { type: "MemberExpression", nodes:[$$sym1, $$sym3], pos, COMPUTED:false }) }

<> primary_expression → τthis                                                                               ↦r { { type: "ThisLiteral", pos } }
    │ identifier_reference
    │ literal
    │ array_literal     
    │ parenthesized  

<> array_literal → \[ elision? \]                                                                           ↦r { { type: "ArrayLiteral", nodes:[$sym2], pos } }
    │ \[ element_list \]                                                                                    ↦r { { type: "ArrayLiteral", nodes:$$sym2, pos } }
    │ \[ element_list , elision? \]                                                                         ↦r { { type: "ArrayLiteral", nodes:[...$$sym2, $sym4], pos } }

<> element_list → elision? assignment_expression                                                            ↦r { [$sym1, $sym2 ] }
    │ elision? spread_element                                                                               ↦r { [ $sym1,$sym2 ] }
    │ element_list , elision? assignment_expression                                                         ↦r { [ ...$sym1, $sym3, $sym4 ] }
    │ element_list , elision? spread_element                                                                ↦r { [ ...$sym1, $sym3, $sym4 ] }

<> elision → ,                                                                                              ↦r { { type: "Elision", count:0, pos } }
    │ elision ,                                                                                             ↦r { { type: "Elision", count:$sym1.count+1, pos } }

<> spread_element → ... assignment_expression                                                               # ↦r=>Spread

<> literal → boolean_literal                
    │ null_literal
    │ string_literal                    
    │ numeric_literal

<> numeric_literal → -? θnum                               ↦r { { type: "NumericLiteral", value:$sym1, computed_value:parseFloat($sym1), value_data:$sym1, pos, NEGATIVE:!!$$sym1 } }

<> bigint →  -? θnum τn                                    ↦r { { type: "BigIntLiteral", value:$sym2, pos, NEGATIVE:!!$$sym1 } }                                                        

<> null_literal →  τnull                                   ↦r { { type: "NullLiteral", pos  } }

<> boolean_literal → τtrue                                 ↦r { { type: "BooleanLiteral", value: $$sym1,  pos  } }
    │ τfalse                                               ↦r { { type: "BooleanLiteral", value: $$sym1,  pos  } }

<> label_identifier → identifier                           ↦r { $sym1.type = "IdentifierLabel", $sym1 }                          

<> identifier_reference → identifier                       ↦r { $sym1.type = "IdentifierReference", $sym1 }                               

<> binding_identifier → identifier                         ↦r { $sym1.type = "IdentifierBinding", $sym1 }                             

<> identifier → composite_identifier                       ↦r { { type: "Identifier", value:$sym1,  pos  } }   
    │ unreserved_word                                      ↦r { { type: "Identifier", value:$sym1,  pos  } }   

<> identifier_name → composite_identifier                  ↦r { { type: "IdentifierName", value:$sym1,  pos  } }              
    │ reserved_word                                        ↦r { { type: "IdentifierName", value:$sym1,  pos  } } 
    │ unreserved_word                                      ↦r { { type: "IdentifierName", value:$sym1,  pos  } }

<> unreserved_word → τasync
    │ τget
    │ τset
    │ τtarget
    │ τas
    │ τfrom


<> reserved_word →  keyword
    │ future_reserved_word
    │ τnull
    │ τtrue 
    │ τfalse                                                                                                               

<> future_reserved_word → τimplements 
    │ τpackage 
    │ τprotected 
    │ τinterface
    │ τprivate
    │ τpublic

<> composite_identifier > ↦^parseIdentifier θid                                                                             
    │ ↦^parseIdentifier \$  
    │ ↦^parseIdentifier \_  

<> keyword → τawait
    │ τbreak
    │ τcase
    │ τcatch
    │ τclass
    │ τconst
    │ τcontinue
    │ τdebugger
    │ τdefault
    │ τdelete
    │ τdo
    │ τelse
    │ τexport
    │ τextends
    │ τfinally
    │ τfor
    │ τfunction
    │ τif
    │ τimport
    │ τin
    │ τinstanceof
    │ τnew
    │ τreturn
    │ τsuper
    │ τswitch
    │ τthis
    │ τthrow
    │ τtry
    │ τtypeof
    │ τvar
    │ τvoid
    │ τwhile
    │ τwith
    │ τyield
