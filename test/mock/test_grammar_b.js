export default ((s,u,g)=>({fn:{},st:s,ty:{1:0,2:1,3:2,4:3,8:4,16:5,32:6,64:7,128:8,256:9,512:10,776:11,1025:12,2049:13,4097:14,8193:15,16385:16,32769:17,number:18,num:18,identifier:19,string:20,white_space:21,open_bracket:22,close_bracket:23,operator:24,symbol:25,new_line:26,tab:27,number_bin:28,number_oct:29,number_hex:30,number_int:31,number_sci:32,number_flt:33,alpha_numeric:34,white_space_new_line:38,id:19,str:20,ws:21,ob:22,cb:23,op:24,sym:25,nl:26,tb:27,int:31,integer:31,bin:28,binary:28,oct:29,octal:29,hex:30,hexadecimal:30,flt:33,float:33,sci:32,scientific:32,any:39,keyword:40},sym:["+","*"],
    lu:new Map([["num",0],["id",1],["alpha_numeric",2],["str",3],["ws",4],["ob",5],["cb",6],["op",7],["sym",8],["nl",9],["tb",10],["white_space_new_line",11],["binary",12],["octal",13],["hexadecimal",14],["integer",15],["scientific",16],["float",17],[1,18],[2,19],[4,20],[8,21],[16,22],[32,23],[64,24],[128,25],[256,26],[512,27],[1025,28],[2049,29],[4097,30],[8193,31],[16385,32],[32769,33],[3,34],[776,38],[200,39],[201,40],[";",42],["+",43],["for",44],["(",45],[")",46],["do",47],["{",48],["}",49],["*",50],[null,19]]),sts:[0,1,2,3,4,0,5,0,0,6,7,6,8,9,10,0,0,11,0,12,13,14].map(i=>s[i]),fm:[],
    gt:g[0].map(i=>i>=0?u[i]:[]),fns:[_=>([_[0]]),_=>([_[0],..._[2]]),_=>({sym:"+",a:_[0],b:_[2]}),_=>({sym:"for do",a:_[2],b:_[5]}),_=>({sym:"for",a:_[2],b:_[5]}),_=>({sym:"*",a:_[0],b:_[2]})],sa:[e=>90,e=>74,e=>18,(a,b,c,e,f,g,p)=>(p.rn(1,a,b,c,e,f),9),e=>42,(a,b,c,e,f,g,p)=>(p.rv(g[0],1,0,a,b,c,e,f),2059),e=>58,(a,b,c,e,f,g,p)=>(p.rn(1,a,b,c,e,f),4107),e=>66,e=>82,(a,b,c,e,f,g,p)=>(p.rn(1,a,b,c,e,f),8203),e=>122,e=>130,(a,b,c,e,f,g,p)=>(p.rn(1,a,b,c,e,f),6155),e=>146,(a,b,c,e,f,g,p)=>(p.rv(g[1],3,0,a,b,c,e,f),2075),(a,b,c,e,f,g,p)=>(p.rv(g[2],3,0,a,b,c,e,f),4123),(a,b,c,e,f,g,p)=>(p.rv(g[3],6,0,a,b,c,e,f),4147),e=>170,(a,b,c,e,f,g,p)=>(p.rv(g[5],3,0,a,b,c,e,f),6171),(a,b,c,e,f,g,p)=>(p.rv(g[4],7,0,a,b,c,e,f),4155)],
    gtk:function getToken(l, SYM_LU, IGNORE_GRAMMAR_SYMBOLS = false) {    if (l.END)        return 0;    if (!IGNORE_GRAMMAR_SYMBOLS)        if (SYM_LU.has(l.tx) || SYM_LU.has(l.ty))            return SYM_LU.get(l.tx) || SYM_LU.get(l.ty);    if ((l.ty & 1)) {        switch (l.ty) {            case 16385:                return 32;            case 4097:                return 30;            case 2049:                return 29;            case 1025:                return 28;            case 32769:                return 33;            case 8193:                return 31;            default:            case 1:                return 18;        }    }    switch (l.ty) {        case 2:            return 19;        case 4:            return 20;        case 256:            return 26;        case 8:            return 21;        case 512:            return 27;    }    return 39;},}))(...("-j;2;4;-2;0;-5;0;-i;6&8;-l;0;-5;0&-m;0;-5;0;-j;a&c;-l;0;-5;0;-g;e&g;-l;0;-5;0;-g;g;i;-3;g;-3;g&-m;0;-5;0;-k;k&m;-l;0;-5;0;-g;pav;-3;m;-3;pav&-m;0;-5;0;-l;o;q&s;-l;0;-5;0;-g;pb1;-3;s;-3;s;u&w;-l;0;-5;0&y;-l;0;-5;0;-g;pb7;-3;y;-3;y&10;-l;0;-5;0;-g;pb9;-3;10;-3;10&-m;0;-5;0;-n;12&14;-l;0;-5;0;-g;pbd;-3;14;-3;14&16;-l;0;-5;0;-g;pbf;-3;16;-3;16|-2;2;6;8;o&-3;c;8;o&-2;q;6;8;o&-3;s;8;o&-3;y;8;o&-3;12;8;o&-3;14;8;o|0;-5;2;-2;4;6;-7;8;a;-2;c;-4").split("|").map(e=>e.split("&")).map(a => a.map(s => s.split(";").map(s=>parseInt(s,36))).map(s=>s.flatMap(d=>d<0?(new Array(-d-1)).fill(-1):(new Array(((d >>> 15) & 0x3FF) + 1)).fill((d >>> 1) & 0x3FFF)))));