@SYMBOL || ^= $= *= <= >= 

@IGNORE θnl θws

@IMPORT default-productions as def 

##############################################################################################
##############################################################################################
#### CSS
##############################################################################################
##############################################################################################  

    <> CSS > AT_RULE                                                            

    <> AT_RULE > media ;?
        │ import ;?
        │ keyframes ;?
        │ supports ;?

##############################################################################################
##############################################################################################
#### @Rules
##############################################################################################
##############################################################################################  

# adapted from https://www.w3.org/TR/css-cascade-4/#at-import

    <> import >  \@ (ERR g:ws) τimport ( string │ url ) ( τsupports \( ( supports_condition ) \) )? media_query(*,) 
                                                                                    ↦r { { import:"@import", type:"Import", nodes:[$$sym3, $$sym4, ...$$sym5] } }

# adapted from https://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes#Formal_syntax

    <> keyframes > \@ (ERR g:ws) τkeyframes keyframes_name { keyframes_blocks(+) }         
                                                                                    ↦r { { keyframes:"@keyframes", type:"Keyframes", name:$sym3, nodes:[$$sym5] } }

    <> keyframes_name > g:id │ string

    <> keyframes_blocks > keyframe_selector(+,) { }             
                                                                                    ↦r { { type:"KeyframeBlock", nodes:[
                                                                                            {type:"KeyframeSelectors", nodes:$sym1}, $$sym3
                                                                                        ] } }

    <> keyframe_selector > τfrom                                                    ↦r { { type:"KeyframeSelector", val:$$sym1 } }
        │ τto                                                                       ↦r { { type:"KeyframeSelector", val:$$sym1 } }
        │ percentage                                                                ↦r { { type:"KeyframeSelector", val:$$sym1 } }                      
                                                                                    

# adapted from https://developer.mozilla.org/en-US/docs/Web/CSS/@supports#Formal_syntax

    <> supports > \@ (ERR g:ws) τsupports ( 

            supports_condition                                                      ↦r { { type:"SupportConditions", nodes:$$sym1 } }
        
        ) { }               
                                                                                    ↦r { { type:"Supports", nodes:[$sym1, $$sym3] } }

    <> supports_condition > τnot supports_in_parens                                 ↦r { [{ type:"Not", nodes:[$sym2] }] }
        │ supports_in_parens ( 
            τand supports_in_parens                                                 
                                                                                    ↦r { { type:"And", nodes:[$sym2] } }
            | τor supports_in_parens 
                                                                                    ↦r { { type:"Or", nodes:[$sym2] } }
        )(*) 
                                                                                    ↦r { [$sym1, ...$sym2] }
                                                                                    

    <> supports_in_parens > \( supports_condition \)                                
                                                                                    ↦r { { type:"Parenthesis", nodes:[$sym2] } }
        │ supports_feature
        │ general_enclosed

    <> supports_feature > supports_feature_fn 
        │ supports_decl 

    <> supports_decl > \(  \)
    <> supports_feature_fn > t:selector \( \)
                                                                                    ↦r { { type:"Function", nodes:[$sym1] } }

# adapted from https://developer.mozilla.org/en-US/docs/Web/CSS/@media#Formal_syntax

    <> media >  \@ (ERR g:ws) τmedia media_queries { }       
                                                                                    ↦r { { media:"@media",  type:"Media", nodes:[$sym3, ...$sym5] } }
    <> media_queries > ( media_query(+,) )                                          
                                                                                    ↦r { { queries:true, type:"MediaQueries", nodes:$$sym1 } }

    <> media_query > media_condition                                                
                                                                                    ↦r { { type:"Query", nodes:[$sym1] } }                       
        │ (τnot │ τonly )? media_type (
                                        τand media_condition_without_or 
                                                                                    ↦r { { type:"And", nodes:[$sym2] } }
                                        )?      
                                                                                    ↦r { { type:"Query", condition:$sym1, nodes:[$sym2, $sym3] } }
    

    <> media_condition > media_condition_without_or
        │ media_or

    <> media_condition_without_or > media_not
        │ media_and 
        │ media_in_parenths

    <> media_not > τnot media_in_parenths                                           ↦r { { type:"Not", nodes:[$sym2] } }

    <> media_and > media_in_parenths (
                                        τand media_in_parenths
                                                                                    ↦r { { type:"And", nodes:[$sym2] } }
                                    )(+)
                                                                                    ↦r { [$sym1, ...$sym2] }

    <> media_or > media_in_parenths (
                                        τor media_in_parenths 
                                                                                    ↦r { { type:"And", nodes:[$sym2] } }
                                    )(+)
                                                                                    ↦r { [$sym1, ...$sym2] }

    <> media_in_parenths > \( media_condition \)                                    ↦r { { type:"Parenthesis", nodes:[$sym2] } }        
        │ media_feature
        │ general_enclosed

    <> media_feature > \( ( mf_plain │ mf_boolean │ mf_range ) \)                   
                                                                                    ↦r { { type:"MediaFeature", nodes:[$sym2] } }
    <> general_enclosed > identifier\( (θid│θws)(*") \)                            
                                           
                                                                                    ↦r { { type:"MediaFunction", nodes:[$sym3] } }

    <> mf_plain > mf_name  \: mf_value                                              ↦r { {type:"MediaValue", key:$sym1, val:$sym3 } }   

    <> mf_range > mf_name ( < │ <= │ > │ >= │ = ) mf_value                          
                                                                                    ↦r { {type:"MediaEquality", sym:$sym2, left:$sym1, right:$sym3 } }  
        │ mf_value ( < │ <= │ > │ >= │ = ) mf_name                                  
                                                                                    ↦r { {type:"MediaEquality", sym:$sym2, left:$sym1, right:$sym3 } }  
        │ mf_value ( > │ >= ) identifier ( > │ >= ) mf_value                        
                                                                                    ↦r { {type:"MediaRangeDescending", sym:$sym2, max:$sym1, id:$sym3, min:$sym5 } } 
        │ mf_value ( < │ <= ) identifier ( < │ <= ) mf_value                        
                                                                                    ↦r { {type:"MediaRangeAscending", sym:$sym2, min:$sym1, id:$sym3, max:$sym5 } } 

    <> mf_value > θnum 
        │ dimension 
        │ mf_name 
        │ ratio

    <> mf_boolean > τtrue                                                           ↦r { { type:"Boolean", val:true } }
        | τfalse                                                                    ↦r { { type:"Boolean", val:false } }
    
    <> mf_name > identifier

    <> media_type > identifier                                                      ↦r { { type:"MediaType", val:$sym1 } }                                                                                  

    <> ratio > θnum / θnum                                                          
                                                                                    ↦r { {type:"ratio", num:$sym1, den:$sym3 } }
    
    <> percentage > θnum %                                                          
                                                                                    ↦r { new parseFloat($sym1) }
    
    <> dimension > θnum θid                                                         
                                                                                    ↦r { new parseFloat($sym1) }

    <> url >  τurl \(  \)                                                     
                                                                                    ↦r { new String($sym3) }       

    <> string > \" \"                                        
                                          
    <> identifier > css_id_symbols  (RED g:ws)  

    <> css_id_symbols >  css_id_symbols θid          ↦r { $sym1 + $sym2 }
        │ css_id_symbols \_                          ↦r { $sym1 + $sym2 }
        │ css_id_symbols \-                          ↦r { $sym1 + $sym2 }
        │ css_id_symbols \$                          ↦r { $sym1 + $sym2 }
        │ css_id_symbols θnum                        ↦r { $sym1 + $sym2 }
        │ \$ 
        │ θid
        | \-

    <> declaration_id > css_id_symbols
        #| \- declaration_id                          ↦r { $sym1 + $sym2 }

<> string_value >  ( \- | \_  | θnum | θid | θsym ) (+")