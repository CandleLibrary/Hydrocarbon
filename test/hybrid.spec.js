import { compileGrammars, lrParse } from "@candlefw/hydrocarbon";
import URL from "@candlefw/url";
import { CompileHybrid } from "../build/library/hybrid/hybrid_compiler.js";
import parse_data from "./mock/test_grammar_a.js";
import { Lexer } from "@candlefw/wind";

const url = await URL.resolveRelative("./mock/test_grammar_a.hcg");

const file = await(await URL.resolveRelative("./mock/test_grammar_a.hcg")).fetchText();

const test_string = "1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120+1*1+2*3+4*5+6*5+1+1+120";

assert_group(() => {

    const grammar = await compileGrammars(file, url + "");
    /*
        Go through each item ----
        Gather each item that transitions on a particular symbol; 
        This combinations represent whole groups that can transition 
        to a new state;
    */
    const parser = CompileHybrid(grammar);
    assert(parser == "");
    harness.markTime();
    assert(parser(new Lexer(test_string)) == "");
    harness.getTime();

    harness.markTime();
    assert(lrParse(test_string, parse_data) == "");
    harness.getTime();
}, sequence);



