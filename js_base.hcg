## HYDROCARBON BASE JS ##

#SYMBOLS << >>> >> >>>= >>= <<= <= >= != !== |= === == ** ++ -- **= ... || && =>

S → script
	│ module	

###################################################################################################################################
# ecma-international.org/ecma-262/9.0/index.html#sec-ecmascript-language-scripts-and-modules
###################################################################################################################################

	script → script_body

	script_body → statement_list

	##################
	#### MODULES
	##################

	module → module_body

	module_item_list → module_item
		│ module_item_list module_item

	module_body → module_item

	module_item → import_declaration
		│ export_declaration
		│ statement_list_item

	####################################
	#### MODULES - IMPORTS
	####################################

	import_declaration → τimport import_clause from_clause ;
		│ τimport module_specifier

	import_clause → imported_default_binding
		│ namespace_import
		│ named_imports
		│ imported_default_binding , namespace_import
		│ imported_default_binding , named_imports

	imported_default_binding → imported_binding 

	namespace_import → * τas imported_binding

	named_imports → { }
		│ { imports_list }
		│ { imports_list , }

	from_clause → τfrom module_specifier

	imports_list → import_specifier
		│ imports_list , import_specifier

	import_specifier → imported_binding
		│ identifier_name τas imported_binding

	module_specifier → string_literal

	imported_binding → binding_id

	####################################
	#### MODULES - EXPORT
	####################################

	export_declaration → τexport * from_clause ;
		│ τexport export_clause from_clause ;
		│ τexport export_clause ;
		│ τexport variable_statement ;
		│ τexport declaration ;
		│ τexport τdefault hoistable_declaration ;
		│ τexport τdefault class_declaration ;
		│ τexport τdefault assignment_expression ;

	export_clause → { }
		│ { export_list }
		│ { export_list , }

	export_list → export_specifier
		│ export_list , export_list

	export_specifier → identifier_name
		│ identifier_name τas identifier_name

###################################################################################################################################
# ecma-international.org/ecma-262/9.0/index.html#sec-generator-function-definitions
###################################################################################################################################

	generator_method → 	* property_name (property_name)


	generator_declaration → 	τfunction * binding_id ( formal_parameters ) { generator_body }
		│ τfunction * ( formal_parameters ) { generator_body }

	generator_expresssion → generator_declaration

	generator_body → function_body

	yield_expression → τyield
		│ τyield assignment_expression
		│ τyield * assignment_expression

###################################################################################################################################
# ecma-international.org/ecma-262/9.0/index.html#sec-async-generator-function-definitions
###################################################################################################################################

	async_generator_method → τasync * property_name (property_name)


	async_generator_declaration →  τasync τfunction * binding_id ( formal_parameters ) { generator_body }
		│ τasync τfunction * ( formal_parameters ) { generator_body }

	async_generator_expression → async_generator_declaration

	async_generator_body → function_body

###################################################################################################################################
# ecma-international.org/ecma-262/9.0/index.html#sec-class-definitions
###################################################################################################################################

	class_declaration → τclass binding_id class_tail
		│ τclass class_tail

	class_expression → class_declaration

	class_tail → class_heritage { class_body }
		│ { class_body }

	class_heritage → τextends left_hand_side_expression

	class_body → class_element_list

	class_element_list → class_element
		│ class_element_list class_element

	class_element → method_definition
		│ τstatic method_definition
		│ ;

###################################################################################################################################
# ecma-international.org/ecma-262/9.0/index.html#sec-async-function-definitions
###################################################################################################################################

	async_function_declaration → τasync τfunction binding_id ( formal_parameters ) { async_function_body }
		│ τasync τfunction ( formal_parameters ) { async_function_body }

	async_function_expression → τasync τfunction ( formal_parameters ) { async_function_body }
		│ τasync τfunction binding_id ( formal_parameters ) { async_function_body }

	async_method → τasync property_name ( unique_formal_parameters ) { async_function_body }

	async_function_body → function_body

	await_expression → τawait unary_expression



###################################################################################################################################
# ecma-international.org/ecma-262/9.0/index.html#sec-async-arrow-function-definitions
###################################################################################################################################

	async_arrow_function → τasync async_arrow_binding_identifier => async_concise_body
		│ cover_call_expression_and_async_arrow_head => async_concise_body

	async_concise_body → assignment_expression 
		│ { async_function_body }
	 
	async_arrow_binding_identifier → binding_id

	cover_call_expression_and_async_arrow_head → member_expression arguments

exponentation_expression → unary_expression
	│ update_expression ** exponentation_expression

multiplicative_expression → exponentation_expression
	│ multiplicative_expression / exponentation_expression
	│ multiplicative_expression * exponentation_expression
	│ multiplicative_expression % exponentation_expression

additive_expression → multiplicative_expression
	│ additive_expression + multiplicative_expression
	│ additive_expression - multiplicative_expression

shift_expression → additive_expression
	│ shift_expression << additive_expression
	│ shift_expression >> additive_expression
	│ shift_expression >>> additive_expression

relational_expression → shift_expression
	│ relational_expression < shift_expression
	│ relational_expression >  shift_expression
	│ relational_expression <= shift_expression
	│ relational_expression >= shift_expression
	│ relational_expression τinstanceof shift_expression
	│ relational_expression τin shift_expression

equality_expression → equality_expression == relational_expression
	│ equality_expression != relational_expression
	│ equality_expression === relational_expression
	│ equality_expression !== relational_expression

bitwise_AND_expression → equality_expression
	│ bitwise_AND_expression & equality_expression

bitwise_XOR_expression → bitwise_AND_expression
	│ bitwise_XOR_expression ^ bitwise_AND_expression

bitwise_OR_expression → bitwise_XOR_expression
	│ bitwise_OR_expression | bitwise_XOR_expression

logical_AND_expression → bitwise_OR_expression
	│ logical_AND_expression && bitwise_OR_expression

logical_OR_expression → logical_AND_expression
	│ logical_OR_expression || logical_AND_expression

conditional_expression → logical_OR_expression
	│ logical_OR_expression ? assignment_expression :  assignment_expression

assignment_expression → conditional_expression
	│ yield_expression
	│ arrow_function
	│ async_arrow_function
	│ left_hand_side_expression = assignment_expression
	│ left_hand_side_expression += assignment_expression
	│ left_hand_side_expression -= assignment_expression
	│ left_hand_side_expression /= assignment_expression
	│ left_hand_side_expression *= assignment_expression
	│ left_hand_side_expression %= assignment_expression
	│ left_hand_side_expression <<= assignment_expression
	│ left_hand_side_expression >>= assignment_expression
	│ left_hand_side_expression >>>= assignment_expression
	│ left_hand_side_expression &= assignment_expression
	│ left_hand_side_expression |= assignment_expression
	│ left_hand_side_expression **= assignment_expression

expression → assignment_expression
	│ expression , assignment_expression

statement → block_statment
	│ variable_statement
	│ empty_statement
	│ expression_statement
	│ if_statement
	│ breakable_statement
	│ continue_statement
	│ return_statement
	│ with_statement
	│ labelled_statement
	│ throw_statement
	│ try_statement
	│ debugger_statement

declaration → hoistable_declaration
	│ class_declaration
	│ lexical_declaration

hoistable_declaration → function_declaration
	│ generator_declaration
	│ async_function_declaration
	│ async_generator_declaration

breakable_statement → iteration_statement
	│ switch_statement

block_statment → block

block → { statement_list }
	│ { }

statement_list → statement_list_item
	│ statement_list statement_list_item

statement_list_item → statement
	│ declaration

lexical_declaration → let_or_const binding_list 

let_or_const → τlet 
	│ τconst

binding_list → lexical_binding
	│ binding_list , lexical_binding

lexical_binding → binding_id initializer
	│ binding_pattern initializer

variable_statement → τvar variable_declaration_list

variable_declaration_list → variable_declaration
	│ variable_declaration_list , variable_declaration

variable_declaration → binding_id initializer
	│ binding_pattern initializer

###################################################################################################################################
# ecma-international.org/ecma-262/9.0/index.html#prod-BindingPattern
###################################################################################################################################

binding_pattern → object_binding_pattern
	│ array_binding_pattern

object_binding_pattern → { }
	│ { binding_rest_property }
	│ { binding_property_list }
	│ { binding_property_list , elision binding_rest_element }

array_binding_pattern → [ elision binding_rest_element ]
	│ [ binding_rest_element ]
	│ [ ]
	│ [ elision ]
	│ [ binding_element_list ]
	│ [ binding_element_list , elision binding_rest_element ]

binding_rest_property → ... binding_id

binding_property_list → binding_property
	│ binding_property_list , binding_property

binding_element_list → binding_elision_element
	│ binding_element_list , binding_elision_element

binding_elision_element → elision binding_element
	│ binding_element

binding_property → single_name_binding
	│ property_name : binding_element

binding_element → single_name_binding
	│ binding_pattern initializer
	│ binding_pattern

single_name_binding → binding_id initializer
	│ binding_pattern

binding_rest_element → ... binding_id
	│ ... binding_pattern


empty_statement → ;

expression_statement → expression

if_statement → τif ( expression ) statement τelse statement
	│ τif ( expression ) statement

iteration_statement → τdo statement τwhile ( expression ) ;
	│ τwhile ( expression ) statement 
	│ τfor ( expression  ; expression  ; expression ) statement 
	│ τfor ( variable_declaration_list ; expression ; expression ) statement 
	│ τfor ( lexical_declaration  expression ; expression ) statement 
	│ τfor ( left_hand_side_expression  τin expression ) statement 
	│ τfor ( τvar for_binding  τin expression ) statement 
	│ τfor ( for_declaration  τin expression ) statement 
	│ τfor ( left_hand_side_expression  τof assignment_expression ) statement 
	│ τfor ( τvar for_binding  τof assignment_expression ) statement 
	│ τfor ( for_declaration  τof assignment_expression ) statement 
	│ τfor τawait ( left_hand_side_expression  τof assignment_expression ) statement 
	│ τfor τawait ( τvar for_binding  τof assignment_expression ) statement 
	│ τfor τawait ( for_declaration  τof assignment_expression ) statement 

for_declaration → let_or_const for_binding

for_binding → binding_id 
	│ binding_pattern

continue_statement → τcontinue ;
	│ τcontinue label_id ;

break_statement → τbreak ;
	│ τbreak labelled_statement ;

return_statement → τreturn ;
	│ τreturn expression ;

with_statement → τwhile ( expression ) statement

# ecma-international.org/ecma-262/9.0/index.html#sec-switch-statement

switch_statement → τswitch ( expression ) case_block

case_block → { }
	│ { case_clauses }
	│ { default_case case_clauses }
	│ { default_case }
	│ { case_clauses default_case case_clauses }

case_clauses → case_clause
	│ case_clauses case_clause

case_clause → τcase expression : 
	│ τvase expression : statement_list

default_case → τdefault : statement_list
	│ τdefault :

###################################################################################################################################
# ecma-international.org/ecma-262/9.0/index.html#sec-labelled-statements
###################################################################################################################################

labelled_statement → label_id : labelled_item

labelled_item → statement
	│ function_declaration

throw_statement → τthrow expression ;

try_statement → τtry block catch
	│ τtry block finally
	│ τtry block catch finally

catch → τcatch ( catch_parameter ) block

finally → τfinally block

catch_parameter → binding_id
	│ binding_pattern

debugger_statement → τdebugger ;

###################################################################################################################################
# ecma-international.org/ecma-262/9.0/index.html#sec-ecmascript-language-functions-and-classes
###################################################################################################################################

	function_declaration → τfunction binding_id ( formal_parameters ) { function_body }
		│ τfunction ( formal_parameters ) { function_body }

	function_expression → function_declaration

	unique_formal_parameters → formal_parameters

	formal_parameters → ɛ
		│ function_rest_parameter 
		│ formal_parameter_list
		│ formal_parameter_list , 
		│ formal_parameter_list , function_rest_parameter

	formal_parameter_list → formal_parameter
		│ formal_parameter_list , formal_parameter

	function_rest_parameter → binding_element

	formal_parameter → binding_rest_element

	function_body → function_statement_list

	function_statement_list → statement_list
		│ ɛ

###################################################################################################################################
# ecma-international.org/ecma-262/9.0/index.html#sec-arrow-function-definitions
###################################################################################################################################

	arrow_function → arrow_parameters => concise_body
	 
	arrow_parameters → binding_id
		│ cover_parenthesized_expression_and_arrow_parameter_list

	concise_body → assignment_expression
		│ { function_body }

###################################################################################################################################
# ecma-international.org/ecma-262/9.0/index.html#sec-method-definitions
###################################################################################################################################

	method_definition → property_name ( unique_formal_parameters ) { function_body }
		│ generator_method
		│ async_method
		│ async_generator_method
		│ τget property_name ( ) { function_body }
		│ τset property_name ( property_set_parameter_list ) { function_body }

	property_set_parameter_list → 	formal_parameter

###################################################################################################################################
# ecma-international.org/ecma-262/9.0/index.html#sec-unary-operators
###################################################################################################################################

###################################################################################################################################
# ecma-international.org/ecma-262/9.0/index.html#sec-unary-operators
###################################################################################################################################

	unary_expression → update_expression
		│ τdelete unary_expression
		│ τvoid unary_expression
		│ τtypeof unary_expression
		│ + unary_expression
		│ - unary_expression
		│ ~ unary_expression
		│ ! unary_expression
		│ await_expression


###################################################################################################################################
# ecma-international.org/ecma-262/9.0/index.html#sec-update-expressions
###################################################################################################################################
	
	update_expression → left_hand_side_expression
		│ left_hand_side_expression ++
		│ left_hand_side_expression --
		│ ++ unary_expression
		│ -- unary_expression

###################################################################################################################################
# ecma-international.org/ecma-262/9.0/index.html#sec-left-hand-side-expressions
###################################################################################################################################

	member_expression → primary_expression
		│ member_expression [ expression ]
		│ member_expression . identifier_name
		│ member_expression template_literal
		│ super_property
		│ meta_property
		│ τnew member_expression arguments

	super_property → τsuper [ expression ]
		│ τsuper . identifier_name

	meta_property → new_target

	new_target → τnew . τtarget

	new_expression → member_expression
		│ τnew new_expression

	call_expression → cover_call_expression_and_async_arrow_head
		│ super_call
		│ call_expression arguments
		│ call_expression [ expression ]
		│ call_expression . identifier_name
		│ call_expression template_literal

	super_call → τsuper arguments

	arguments → ( )
		│ ( argument_list )
		│ ( argument_list , )

	argument_list → assignment_expression
		│ ... assignment_expression
		│ argument_list , assignment_expression
		│ argument_list , ... assignment_expression
	
	left_hand_side_expression → new_expression
		│ call_expression

###################################################################################################################################
# ecma-international.org/ecma-262/9.0/index.html#sec-template-literals
###################################################################################################################################

	template_literal → no_substitute_template
		│ substitute_template

	substitute_template → template_head expression template_spans

	template_spans → template_tail
		│ template_middle_list template_tail

	template_middle_list → template_middle expression
		│ template_middle_list template_middle expression

	###################################################################################################################################
	# ecma-international.org/ecma-262/9.0/index.html#prod-TemplateMiddle
	###################################################################################################################################

		template_middle → no_substitute_template
			

		no_substitute_template →  template_characters 
			

		template_head → $ template_characters ${ 
			│ $ ${ 

		template_substitute_tail → template_middle
			│ template_tail

		template_middle → } template_characters ${

		template_tail → } template_characters $

		template_characters → τtodo


###################################################################################################################################
# ecma-international.org/ecma-262/9.0/index.html#sec-object-initializer
###################################################################################################################################

	object_literal →  { }
		│ { property_definition_list }
		│ { property_definition_list , }

	property_definition_list → property_definition
		│ property_definition_list , property_definition

	property_definition → id_reference
		│ cover_initialization_name
		│ property_name : assignment_expression
		│ method_definition
		│ ... assignment_expression

	property_name → literal_property_name
		│ computed_property_name

	literal_property_name → identifier_name
		│ string_literal
		│ numeric_literal

	computed_property_name → [ assignment_expression ]

	cover_initialization_name →  id_reference initializer initializer

	initializer → = assignment_expression

###################################################################################################################################
# ecma-international.org/ecma-262/9.0/index.html#sec-array-initializer
###################################################################################################################################

	array_literal → [ elision ]
		│ [ element_list ]
		│ [ element_list , elision ]

	element_list → elision assignment_expression
		│ elision spread_element
		│ element_list , elision  assignment_expression
		│ element_list , elision spread_element

	elision → ,
		│ elision , 
		│ ɛ

	spread_element → ... assignment_expression

###################################################################################################################################
# ecma-international.org/ecma-262/9.0/index.html#sec-identifier-reference
###################################################################################################################################

	literal  →  null_literal
		│ boolean_literal
		│ numeric_literal
		│ string_literal

###################################################################################################################################
# ecma-international.org/ecma-262/9.0/index.html#sec-primary-expression
###################################################################################################################################

	primary_expression → τthis
		│ id_reference
		│ literal
		│ array_literal
		│ object_literal
		│ function_expression
		│ class_expression
		│ generator_expresssion
		│ async_function_expression
		│ async_generator_expression
		│ regular_expression_literal
		│ template_literal
		│ cover_parenthesized_expression_and_arrow_parameter_list

	cover_parenthesized_expression_and_arrow_parameter_list → ( expression )
		│ ( expression , )
		│ ( )
		│ ( ... binding_id )
		│ ( ... binding_pattern )
		│ ( expression , ... binding_id )
		│ ( expression , ... binding_pattern )

###################################################################################################################################
# ecma-international.org/ecma-262/9.0/index.html#sec-ecmascript-language-expressions
###################################################################################################################################

	id_reference → identifier
		# │ τyield
		│ τawait

	binding_id → identifier
		│ τyield
		│ τawait

	label_id → identifier
		│ τyield
		│ τawait

	identifier → identifier_name


###################################################################################################################################
# ecma-international.org/ecma-262/9.0/index.html#sec-literals-regular-expression-literals
###################################################################################################################################

	regular_expression_literal → / regular_expression_body / regular_expression_flags

	regular_expression_body → τnone

	regular_expression_flags → τnone

###################################################################################################################################
# ecma-international.org/ecma-262/9.0/index.html#sec-ecmascript-language-lexical-grammar-literals
###################################################################################################################################

	identifier_name → θid

	null_literal → τnull

	boolean_literal → τtrue │ τfalse

	numeric_literal → θnum

	string_literal → θstr







