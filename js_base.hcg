## HYDROCARBON BASE JS ##

#SYMBOLS { } ( ) [ ] . ... ; , < > <= >= == != === !== + - * % / ** ++ -- << >> >>> & | ^ ! ~ && || ? : += -= *= %= /= **= <<= >>= >>>= &= |= ^= =>  ####

S → expression							↦ cstr return sym[0];

## MODULES

	##############################################################################################################
	# https://www.ecma-international.org/ecma-262/9.0/index.html#sec-ecmascript-language-scripts-and-modules
	##############################################################################################################
	
		module → module_body 

		module_body → module_list_item

		module_list_item → module_item 
			│ module_list_item module_item

		module_item → import_declaration 
			│ export_declaration
			│ statement_list_item

	##############################################################################################################
	# https://www.ecma-international.org/ecma-262/9.0/index.html#prod-ImportDeclaration
	##############################################################################################################

		import_declaration → τimport import_clause from_clause
			│ τimport module_specifier

		import_clause → imported_default_binding
			│ name_space_import
			│ named_imports
			│ imported_default_binding , name_space_import
			│ imported_default_binding , named_imports

		imported_default_binding → imported_binding

		name_space_import → * τas imported_binding 

		named_imports → { }
			│ { imports_list }
			│ { imports_list , }

		from_clause → τfrom module_specifier

		imports_list → import_specifier 
			│ imports_list , import_specifier

		import_specifier → imported_binding 
			│ identifier τas imported_binding

		module_specifier → string_literal

		imported_binding → identifier

	##############################################################################################################
	# https://www.ecma-international.org/ecma-262/9.0/index.html#sec-exports
	##############################################################################################################

		export_declaration → τexport * from_clause ;
			│ τexport export_clause from_clause ;
			│ τexport export_clause ;
			│ τexport variable_statement
			│ τexport declaration
			│ τexport τdefault hoistable_declaration
			│ τexport τdefault class_declaration
			│ τexport τdefault assignement_expression

		export_clause → { } 
			│ { exports_list }
			│ { exports_list , }

		exports_list → export_specifier
			│ exports_list , export_specifier

		export_specifier →  identifier 
			│ identifier τas identifier
## SCRIPT

	##############################################################################################################
	# https://www.ecma-international.org/ecma-262/9.0/index.html#sec-ecmascript-language-scripts-and-modules
	##############################################################################################################
		
		script → script_body   ↦ cstr this.body = sym[0]
			│ ɛ

		script_body → statement_list

## STATEMENTS

	##############################################################################################################
	# https://www.ecma-international.org/ecma-262/9.0/index.html#prod-Statement
	##############################################################################################################


		statement_list → statement_list_item 			↦ cstr console.log("danger",sym); return sym[0]
			│ statement_list statement_list_item		↦ cstr console.log("danger2",sym); return (Array.isArray(sym[0])) ? sym[0].concat(sym[1]) : [sym[0],sym[1]]

		statement_list_item → statement 
			│ declaration


		statement → block_statement 
			│ variable_statement
			│ empty_statement
			│ expression_statement						↦ cstr return sym[0];
			│ if_statement
			│ breakable_statement
			│ continue_statement
			│ break_statement
			│ return_statement
			│ with_statement
			│ labelled_statement
			│ throw_statement
			│ try_statement
			│ debugger_statement

		 declaration → hoistable_declaration
			│ class_declaration
			│ lexical_declaration

		 hoistable_declaration → function_declaration
			# │ generator_declaration
			# │ async_function_declaration
			# │ async_generator_declaration

		breakable_statement → iteration_statement
		 	│ switch_statement


	##############################################################################################################
	# https://www.ecma-international.org/ecma-262/9.0/index.html#sec-block
	##############################################################################################################

		block_statement → block 								

		block → { statement_list }						↦ cstr console.log(sym, "test1"); this.stmts = sym[1]

	##############################################################################################################
	# https://www.ecma-international.org/ecma-262/9.0/index.html#sec-empty-statement
	##############################################################################################################

		empty_statement → ; 							 ↦ cstr this.type = "empty"

	##############################################################################################################
	# https://www.ecma-international.org/ecma-262/9.0/index.html#sec-expression-statement
	##############################################################################################################

		expression_statement → expression ;  			↦ cstr return sym[0] 

	##############################################################################################################
	# https://www.ecma-international.org/ecma-262/9.0/index.html#sec-expression-statement
	##############################################################################################################

		if_statement → τif ( expression ) statement τelse statement 
			│ τif ( expression ) statement

	##############################################################################################################
	# https://www.ecma-international.org/ecma-262/9.0/index.html#sec-iteration-statements
	##############################################################################################################

		iteration_statement → τdo statement τwhile ( expression ) ;
			│ τwhile ( expression ) statement
			│ τfor ( expression ; expression ; expression ) statement
			│ τfor (  ; expression ; expression ) statement
			│ τfor (  ;  ; expression ) statement
			│ τfor ( expression ;  ; expression ) statement
			│ τfor ( expression ; expression ;  ) statement
			│ τfor ( expression ;  ;  ) statement
			│ τfor (  ;  ;  ) statement
			│ τfor ( τvar variable_declaration_list ; statement ; statement ) statement
			│ τfor ( τvar variable_declaration_list ; statement ;  ) statement
			│ τfor ( τvar variable_declaration_list ;  ; statement ) statement
			│ τfor ( τvar variable_declaration_list ;  ;  ) statement
			│ τfor ( lexical_declaration ; statement ; statement ) statement
			│ τfor ( lexical_declaration ; statement ;  ) statement
			│ τfor ( lexical_declaration ;  ; statement ) statement
			│ τfor ( lexical_declaration ;  ;  ) statement
			│ τfor ( left_hand_side_expresssion τin expression ) statement
			│ τfor ( τvar for_binding τin expression ) statement
			│ τfor ( for_declaration τin expression ) statement
			│ τfor ( left_hand_side_expresssion τof assignement_expression ) statement
			│ τfor ( τvar for_binding τof assignement_expression ) statement
			│ τfor ( for_declaration τof assignement_expression ) statement
			│ τfor τawait ( left_hand_side_expresssion τof assignement_expression ) statement
			│ τfor τawait ( τvar for_binding τof assignement_expression ) statement
			│ τfor τawait ( for_declaration τof assignement_expression ) statement

		for_declaration → let_or_const for_binding

		for_binding → identifier 
			# │ binding_pattern

	##############################################################################################################
	# https://www.ecma-international.org/ecma-262/9.0/index.html#sec-continue-statement
	##############################################################################################################

		continue_statement → τcontinue ; 
			│ τcontinue identifier ;

	##############################################################################################################
	# https://www.ecma-international.org/ecma-262/9.0/index.html#sec-break-statement
	##############################################################################################################

		break_statement → τbreak ; 
			│ τbreak identifier ;


	##############################################################################################################
	# https://www.ecma-international.org/ecma-262/9.0/index.html#sec-return-statement
	##############################################################################################################

		return_statement → τreturn ;
			│ τreturn expression ;

	##############################################################################################################
	# https://www.ecma-international.org/ecma-262/9.0/index.html#sec-with-statement
	##############################################################################################################

		with_statement → τwith ( expression ) statement

	##############################################################################################################
	# https://www.ecma-international.org/ecma-262/9.0/index.html#sec-switch-statement
	##############################################################################################################

		switch_statement → τswitch ( expression ) case_block

		case_block → { }
			│ { case_clauses default_clause case_clause }
			│ { case_clauses default_clause }
			│ { default_clause case_clauses }
			│ { default_clause }
			│ { case_clauses }

		case_clauses → case_clause 
			│ case_clauses case_clause

		case_clause → τcase expression : statement_list
			│ τcase expression :

		default_clause → τdefault : statement_list 
			│ τdefault  

	##############################################################################################################
	# https://www.ecma-international.org/ecma-262/9.0/index.html#sec-labelled-statements
	##############################################################################################################

		labelled_statement → identifier : labelled_item

		labelled_item → statement
			│ function_declaration
	
	##############################################################################################################
	# https://www.ecma-international.org/ecma-262/9.0/index.html#sec-throw-statement
	##############################################################################################################

		throw_statement → τthrow expression ;

	##############################################################################################################
	# https://www.ecma-international.org/ecma-262/9.0/index.html#sec-try-statement
	##############################################################################################################

		try_statement → τtry block catch
			│ τtry block finally
			│ τtry block catch finally

		catch → τcatch ( catch_parameter ) block

		finally → τfinally block

		catch_parameter → identifier 
			# │ binding_pattern

	##############################################################################################################
	# https://www.ecma-international.org/ecma-262/9.0/index.html#sec-debugger-statement
	##############################################################################################################

		debugger_statement → τdebugger ;

## DECLARATIONS

	##############################################################################################################
	# https://www.ecma-international.org/ecma-262/9.0/index.html#sec-variable-statement
	##############################################################################################################

		variable_statement → τvar variable_declaration_list ; 			↦ cstr this.declarations = sym[1];

		variable_declaration_list → variable_declaration 				↦ cstr return [sym[0]]
			│ variable_declaration_list , variable_declaration 			↦ cstr return sym[0].concat(sym[2])

		variable_declaration → identifier initializer 					↦ cstr this.id = sym[0]; this.initializer = sym[1]
			│ identifier 												↦ cstr this.id = sym[0]; this.initializer = null;
			│ binding_pattern initializer 								↦ cstr this.id = sym[0]; this.initializer = sym[1]


	##############################################################################################################
	# https://www.ecma-international.org/ecma-262/9.0/index.html#sec-let-and-const-declarations
	##############################################################################################################

		lexical_declaration → let_or_const binding_list ;				↦ cstr this.type = sym[0]; this.declarations = sym[1];

		let_or_const → τlet 
			│ τconst

		binding_list → lexical_binding 									↦ cstr return [sym[0]]
			│ binding_list , lexical_binding							↦ cstr return sym[0].concat(sym[2])

		lexical_binding → identifier initializer 						↦ cstr this.id = sym[0]; this.initializer = sym[1];
			│ binding_pattern initializer 								↦ cstr this.id = sym[0]; this.initializer = sym[1];

## FUNCTIONS

	##############################################################################################################
	# https://www.ecma-international.org/ecma-262/9.0/index.html#sec-function-definitions
	##############################################################################################################

		function_declaration → τfunction ( formal_parameters ) { function_body } 
			│ τfunction identifier ( formal_parameters ) { function_body }

		function_expression → function_declaration

		unique_formal_parameters → formal_parameters

		formal_parameters → ɛ
			 │ function_rest_parameter
			 │ formal_parameter_list
			 │ formal_parameter_list , 
			 │ formal_parameter_list , function_rest_parameter

		formal_parameter_list → formal_parameter 
			 │ formal_parameter_list , formal_parameter

		function_rest_parameter → binding_rest_element

		formal_parameter → binding_element

		function_body → function_statement_list
			│ ɛ

		function_statement_list → statement_list 

	##############################################################################################################
	# https://www.ecma-international.org/ecma-262/9.0/index.html#sec-arrow-function-definitions
	##############################################################################################################

		arrow_function → arrow_parameters => concise_body

		arrow_parameters → identifier 
			│ cover_parenthesized_expression_and_arrow_parameter_list

		concise_body → assignement_expression 
			│ { function_statement_list }
			│ { }

	##############################################################################################################
	# https://www.ecma-international.org/ecma-262/9.0/index.html#sec-async-arrow-function-definitions
	##############################################################################################################

		async_arrow_function → τasync async_arrow_parameters => async_concise_body

		async_arrow_parameters → identifier 
			│ cover_call_expression_and_async_arrow_head

		async_concise_body → assignement_expression 
			│ { function_statement_list }
			│ { }

		cover_call_expression_and_async_arrow_head → member_expression arguments

## CLASSES
	
	##############################################################################################################
	# https://www.ecma-international.org/ecma-262/9.0/index.html#sec-class-definitions
	##############################################################################################################

		class_declaration → τclass identifier class_tail 
			│ τclass class_tail

		class_expression → class_declaration

		class_tail → class_heritage { class_body } 
			│ class_heritage { }
			│ { }

		class_heritage → τextends left_hand_side_expresssion 

		class_body → class_element_list

		class_element_list → class_element 
			│ class_element_list class_element

		class_element → method_definition 
			│ τstatic method_definition
			│ ;

##############################################################################################################
# https://www.ecma-international.org/ecma-262/9.0/index.html#prod-MethodDefinition
##############################################################################################################

	method_definition → property_name ( unique_formal_parameters ) { function_body }
		# │ generator_method
		# │ async_method
		# │ async_generator_method
		│ τget property_name ( ) { function_body }
		│ τset property_name ( property_set_parameter_list ) { function_body }

	property_set_parameter_list → formal_parameter 

##############################################################################################################
# https://www.ecma-international.org/ecma-262/9.0/index.html#sec-comma-operator
##############################################################################################################

	expression → assignement_expression 				↦ cstr return sym[0]						
		│ expression , assignement_expression			↦ cstr this.expr_list = (Array.isArray(sym[0])) ? sym[0].push(sym[2]) : [sym[0], sym[2]]


##############################################################################################################
# https://www.ecma-international.org/ecma-262/9.0/index.html#sec-left-hand-side-expressions
##############################################################################################################

	left_hand_side_expresssion → new_expression 		↦ cstr return sym[0]
		│ call_expression 								↦ cstr return sym[0]

	new_expression → member_expression │ τnew new_expression

	member_expression → primary_expression 				↦ cstr return sym[0]
		│ member_expression [ expression ]		
		│ member_expression . identifier
		# │ member_expression template_literal
		│ super_property
		│ meta_property
		#│ τnew member_expression arguments

	super_property → τsuper . identifier
		│ τsuper [ expression ]

	meta_property → new_target

	new_target → τnew . τtarget

	call_expression → call_expression . identifier
		│ super_call
		│ call_expression arguments
		│ call_expression [ expression ]
		│ cover_call_expression_and_async_arrow_head 
		# │ call_expression template_literal

	super_call → τsuper arguments

	arguments → ( ) 
		│ ( argument_list )
		│ ( argument_list , )

	argument_list → assignement_expression 
		│ ... assignement_expression
		│ argument_list , assignement_expression
		│ argument_list , ... assignement_expression


##############################################################################################################
#https://www.ecma-international.org/ecma-262/9.0/index.html#sec-primary-expression
##############################################################################################################

	primary_expression →
		τthis
		│ identifier
		│ literal
		│ array_literal
		│ object_literal
		│ function_expression
		│ class_expression
		# │ generator_expression
		# │ async_function_expression
		# │ async_generator_expression
		# │ regular_expression_literal
		# │ template_literal
		│ cover_parenthesized_expression_and_arrow_parameter_list



##############################################################################################################
# https://www.ecma-international.org/ecma-262/9.0/index.html#sec-object-initializer
##############################################################################################################

	object_literal → { }
		│ { property_definition_list }
		│ { property_definition_list , }

	property_definition_list → property_definition
		│ property_definition_list , property_definition	

	property_definition → identifier
		│ cover_initialized_name
		│ property_name : assignement_expression
	 	│ method_definition
		│ ... assignement_expression

	property_name → literal_property_name
		│ computed_property_name

	literal_property_name → identifier
		│ string_literal
		│ numeric_lteral

	computed_property_name → [ assignement_expression ]

	cover_initialized_name → identifier initializer

	initializer → = assignement_expression						↦cstr return sym[1]


##############################################################################################################
# https://www.ecma-international.org/ecma-262/9.0/index.html#sec-array-initializer
##############################################################################################################

	array_literal → [ ]
		│ [ elision ]
		│ [ element_list ]
		│ [ element_list elision ]

	element_list →
		assignement_expression
		│ spread_element
		│ elision assignement_expression
		│ elision spread_element	
		│ element_list , assignement_expression
		│ element_list , spread_element
		│ element_list , elision assignement_expression
		│ element_list , elision assignement_expression

	elision → ,
		│ elision ,

	spread_element → ... assignement_expression

## SIMPLE EXPRESSIONS

	##############################################################################################################
	# https://www.ecma-international.org/ecma-262/9.0/index.html#prod-AssignmentExpression
	##############################################################################################################

		assignement_expression → conditional_expression 
			# │ yield_expression
			│ arrow_function
			│ async_arrow_function
			│ left_hand_side_expresssion = assignement_expression  						↦ cstr this.type= "assignemnt"; this.op = "equal"; this.assigner = sym[0]; this.assignee = sym[2];
			│ left_hand_side_expresssion assignement_operator assignement_expression	↦ cstr this.type = sym[1]; this.assigner = sym[0]; this.assignee = sym[2];

		assignement_operator → *= 														↦ cstr return "mul";
			│ /= 																		↦ cstr return "div";
			│ %= 																		↦ cstr return "mod";
			│ += 																		↦ cstr return "add";
			│ -= 																		↦ cstr return "sub";
			│ <<= 																		↦ cstr return "lshift";
			│ >>= 																		↦ cstr return "rshift";
			│ >>>= 																		↦ cstr return "rshift-zero-fill";
			│ &= 																		↦ cstr return "bit and";
			│ ^= 																		↦ cstr return "bit xor";
			│ |= 																		↦ cstr return "bit or";
			│ **= 																		↦ cstr return "exp";

	##############################################################################################################
	# https://www.ecma-international.org/ecma-262/9.0/index.html#prod-ConditionalExpression
	##############################################################################################################

		conditional_expression → logical_or_expression
			│ logical_or_expression ? assignement_expression : assignement_expression

	##############################################################################################################
	# https://www.ecma-international.org/ecma-262/9.0/index.html#sec-binary-logical-operators
	##############################################################################################################

		logical_or_expression → logical_and_expression 
			│ logical_or_expression || logical_and_expression

		logical_and_expression → bitwise_or_expression 
			│ logical_and_expression && logical_and_expression

	##############################################################################################################
	# https://www.ecma-international.org/ecma-262/9.0/index.html#sec-binary-bitwise-operators
	##############################################################################################################

		bitwise_or_expression → bitwise_xor_expression 
			│ bitwise_or_expression | bitwise_xor_expression

		bitwise_xor_expression → bitwise_and_expression 
			│ bitwise_and_expression ^ bitwise_xor_expression

		bitwise_and_expression → equality_expression 
			│ bitwise_and_expression & equality_expression

	##############################################################################################################
	# https://www.ecma-international.org/ecma-262/9.0/index.html#sec-equality-operators
	##############################################################################################################

		equality_expression → relational_expression 
			│ equality_expression == relational_expression
			│ equality_expression != relational_expression
			│ equality_expression === relational_expression
			│ equality_expression !== relational_expression

	##############################################################################################################
	# https://www.ecma-international.org/ecma-262/9.0/index.html#sec-relational-operators
	##############################################################################################################

		relational_expression → shift_expression 
			│ relational_expression < shift_expression
			│ relational_expression >  shift_expression
			│ relational_expression <= shift_expression
			│ relational_expression >= shift_expression
			│ relational_expression τinstanceof shift_expression
			│ relational_expression τin shift_expression

	##############################################################################################################
	# https://www.ecma-international.org/ecma-262/9.0/index.html#sec-bitwise-shift-operators
	##############################################################################################################

		shift_expression → additive_expression 
			│ shift_expression << additive_expression
			│ shift_expression >> additive_expression
			│ shift_expression >>> additive_expression
	
	##############################################################################################################
	# https://www.ecma-international.org/ecma-262/9.0/index.html#sec-additive-operators
	##############################################################################################################

		additive_expression → multiplicative_expression 
			│ additive_expression + multiplicative_expression
			│ additive_expression - multiplicative_expression

	##############################################################################################################
	# https://www.ecma-international.org/ecma-262/9.0/index.html#sec-multiplicative-operators
	##############################################################################################################

		multiplicative_expression → exponentiation_expression 
			│ multiplicative_expression * exponentiation_expression
			│ multiplicative_expression / exponentiation_expression
			│ multiplicative_expression % exponentiation_expression

	##############################################################################################################
	# https://www.ecma-international.org/ecma-262/9.0/index.html#sec-exp-operator
	##############################################################################################################

		exponentiation_expression → unary_expression 
			│ update_expression ** exponentiation_expression

	##############################################################################################################
	# https://www.ecma-international.org/ecma-262/9.0/index.html#sec-unary-operators
	##############################################################################################################

		unary_expression → update_expression 
			│ τdelete unary_expression
			│ τvoid unary_expression
			│ τtypeof unary_expression
			│ + unary_expression
			│ - unary_expression
			│ ~ unary_expression
			│ ! unary_expression
			│ await_expression

	##############################################################################################################
	# https://www.ecma-international.org/ecma-262/9.0/index.html#sec-update-expressions
	##############################################################################################################
 	
		update_expression → left_hand_side_expresssion 
			│ left_hand_side_expresssion ++
			│ left_hand_side_expresssion --
			│ ++ unary_expression
			│ -- unary_expression

	##############################################################################################################	
	# https://www.ecma-international.org/ecma-262/9.0/index.html#prod-AwaitExpression
	##############################################################################################################

		await_expression → τawait unary_expression

	##############################################################################################################
	# https://www.ecma-international.org/ecma-262/9.0/index.html#prod-CoverParenthesizedExpressionAndArrowParameterList
	##############################################################################################################

		cover_parenthesized_expression_and_arrow_parameter_list →
			( )
			│ ( expression )
			│ ( expression , )
			│ ( ... identifier )
			│ ( ... binding_pattern )
			│ ( expression , ...identifier )
			│ ( expression , ...binding_pattern )

##############################################################################################################
# https://www.ecma-international.org/ecma-262/9.0/index.html#prod-BindingPattern
##############################################################################################################

	binding_pattern → object_binding_pattern
		│	array_binding_pattern

	object_binding_pattern → { }
		│ { binding_rest_property }
		│ { binding_property_list }
		│ { binding_property_list , binding_rest_property}
		│ { binding_property_list , }

	array_binding_pattern → [ ] 
		│ [ elision binding_rest_element ]
		│ [ elision ]
		│ [ binding_rest_element ]
		│ [ binding_element_list ]
		│ [ binding_element_list , ]
		│ [ binding_element_list , elision ]
		│ [ binding_element_list , elision binding_rest_element ]
		│ [ binding_element_list , binding_rest_element ]

	binding_rest_property → ... identifier 

	binding_property_list → binding_property
		│ binding_property_list , binding_property

	binding_element_list → binding_elison_element 
		│ binding_element_list , binding_elison_element

	binding_elison_element → elision binding_element 
		│ binding_element

	binding_property → single_name_binding 
		│ property_name : binding_element

	binding_element → single_name_binding
		│ binding_pattern initializer
		│ binding_pattern

	single_name_binding → identifier initializer
		│ identifier

	binding_rest_element → ... identifier 
		│ ... binding_pattern


##############################################################################################################
# https://www.ecma-international.org/ecma-262/9.0/index.html#sec-ecmascript-language-lexical-grammar
# Incomplete
##############################################################################################################

	literal → boolean_literal
		│ null_literal
		│ string_literal
		│ numeric_lteral

	string_literal → θstr					↦ cstr console.log(sym[0]); return { type:"string", val: sym[0] }

	numeric_lteral → θnum					↦ cstr console.log(sym[0]); return { type:"numeric", val: parseInt(sym[0]) }

	null_literal →  τnull

	boolean_literal → τtrue 				↦ cstr console.log(sym[0]); return { type:"boolean", val: true }
		│ τfalse 							↦ cstr console.log(sym[0]); return { type:"boolean", val: false }


	# This replaces IdentifierReference, BindingIdentifier, and LabelIdentifier
	# https://www.ecma-international.org/ecma-262/9.0/index.html#sec-identifiers

	identifier → θid						↦ cstr console.log(sym[0]); return { type:"identifier", val: sym[0] } 
		│ τyield 							↦ cstr console.log(sym[0]); return { type:"identifier", val: sym[0] }
		│ τawait 							↦ cstr console.log(sym[0]); return { type:"identifier", val: sym[0] }
