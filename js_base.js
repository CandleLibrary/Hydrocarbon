const e = (tk, env, output, lex, prv_lex) => {            /*USED for ASI*/            if (env.ASI && lex.tx !== ")") {                let ENCOUNTERED_NL = (lex.tx == "}" || lex.END);                while (!ENCOUNTERED_NL && !prv_lex.END && prv_lex.off < lex.off) {                    prv_lex.next();                    if (prv_lex.ty == prv_lex.types.nl)                        ENCOUNTERED_NL = true;                }            if (ENCOUNTERED_NL)                return ";";            }            return null;        }, nf = ()=>-1, class_tail=function(sym){this.heritage = sym[0]; this.body = sym[2]},
lex_declaration=function(v){this.id = v.id; this.expr = v.init},
var_declaration=function(v){this.id = v.id; this.expr = v.init},
defaultError=(tk, env, output, lex, prv_lex) => {            /*USED for ASI*/            if (env.ASI && lex.tx !== ")") {                let ENCOUNTERED_NL = (lex.tx == "}" || lex.END);                while (!ENCOUNTERED_NL && !prv_lex.END && prv_lex.off < lex.off) {                    prv_lex.next();                    if (prv_lex.ty == prv_lex.types.nl)                        ENCOUNTERED_NL = true;                }            if (ENCOUNTERED_NL)                return ";";            }            return null;        },
S$0=function (sym,env,lex,state) {return sym},
start$0=function (sym,env,lex,state) {return sym[0]},
statement_list$0=function (sym,env,lex,state) {return [sym[0]]},
statement_list$1=function (sym,env,lex,state) {return (sym[0].push(sym[1]), sym[0])},
block$0=function (sym,env,lex,state) {return sym[1]},
empty_statement$0=function (sym,env,lex,state) {this.type = "empty"},
if_statement$0=function (sym,env,lex,state) {return (new env.functions.if_stmt(sym[2], sym[4], sym[6]))},
if_statement$1=function (sym,env,lex,state) {return (new env.functions.if_stmt(sym[2], sym[4]))},
iteration_statement$0=function (sym,env,lex,state) {return (new env.functions.for_stmt(sym[2], sym[4], sym[6], sym[8]))},
iteration_statement$1=function (sym,env,lex,state) {return (new env.functions.for_stmt(null, sym[4], sym[6], sym[8]))},
iteration_statement$2=function (sym,env,lex,state) {return (new env.functions.for_stmt(sym[2], null, sym[6], sym[8]))},
iteration_statement$3=function (sym,env,lex,state) {return (new env.functions.for_stmt(sym[2], sym[4], null, sym[8]))},
iteration_statement$4=function (sym,env,lex,state) {return (new env.functions.for_stmt(null, null, sym[6], sym[8]))},
iteration_statement$5=function (sym,env,lex,state) {return (new env.functions.for_stmt(sym[2], null, null, sym[8]))},
iteration_statement$6=function (sym,env,lex,state) {return (new env.functions.for_stmt(null, null, null, sym[8]))},
iteration_statement$7=function (sym,env,lex,state) {return (new env.functions.for_stmt(sym[3], sym[5], sym[7], sym[9]))},
iteration_statement$8=function (sym,env,lex,state) {return (new env.functions.for_stmt(sym[3], sym[5], null, sym[9]))},
iteration_statement$9=function (sym,env,lex,state) {return (new env.functions.for_stmt(sym[3], null, sym[7], sym[9]))},
iteration_statement$10=function (sym,env,lex,state) {return (new env.functions.for_stmt(sym[3], null , null, sym[9]))},
iteration_statement$11=function (sym,env,lex,state) {return (new env.functions.for_in_stmt(sym[2], sym[4], sym[6]))},
iteration_statement$12=function (sym,env,lex,state) {return (new env.functions.for_in_stmt(sym[3], sym[5], sym[7]))},
iteration_statement$13=function (sym,env,lex,state) {return (new env.functions.for_of_stmt(sym[2], sym[4], sym[6]))},
iteration_statement$14=function (sym,env,lex,state) {return (new env.functions.for_of_stmt(sym[3], sym[5], sym[7], true))},
iteration_statement$15=function (sym,env,lex,state) {return (new env.functions.for_of_stmt(sym[4], sym[6], sym[8], true))},
continue_statement$0=function (sym,env,lex,state) {return (new env.functions.continue_stmt(sym[1]))},
break_statement$0=function (sym,env,lex,state) {return (new env.functions.break_stmt(sym[1]))},
return_statement$0=function (sym,env,lex,state) {return (new env.functions.return_stmt(sym[1]))},
case_block$0=function (sym,env,lex,state) {return []},
case_block$1=function (sym,env,lex,state) {return sym[1].concat(sym[2].concat(sym[3]))},
case_block$2=function (sym,env,lex,state) {return sym[1].concat(sym[2])},
case_clauses$0=function (sym,env,lex,state) {return sym[0].concat(sym[1])},
case_clause$0=function (sym,env,lex,state) {return (new env.functions.case_stmt(sym[1], sym[3]))},
case_clause$1=function (sym,env,lex,state) {return (new env.functions.case_stmt(sym[1]))},
default_clause$0=function (sym,env,lex,state) {return (new env.functions.default_case_stmt(sym[2]))},
default_clause$1=function (sym,env,lex,state) {return (new env.functions.default_case_stmt())},
try_statement$0=function (sym,env,lex,state) {return (new env.functions.try_stmt(sym[1],sym[2]))},
try_statement$1=function (sym,env,lex,state) {return (new env.functions.try_stmt(sym[1],null ,sym[2]))},
try_statement$2=function (sym,env,lex,state) {return (new env.functions.try_stmt(sym[1], sym[2], sym[3]))},
variable_declaration_list$0=function (sym,env,lex,state) {return sym[0].push(sym[2])},
variable_declaration$0=function (sym,env,lex,state) {return {id:sym[0], init:sym[1]}},
variable_declaration$1=function (sym,env,lex,state) {return {id:sym[0], init:null}},
let_or_const$0=function (sym,env,lex,state) {return "let"},
let_or_const$1=function (sym,env,lex,state) {return "const"},
binding_list$0=function (sym,env,lex,state) {return [new env.functions.lex_declaration(sym[0], e)]},
binding_list$1=function (sym,env,lex,state) {return sym[0].push(new env.functions.lex_declaration(sym[1], e))},
class_tail$0=function (sym,env,lex,state) {return new env.functions.class_tail(sym)},
class_tail$1=function (sym,env,lex,state) {return new env.functions.class_tail([null, ... sym[0]])},
class_tail$2=function (sym,env,lex,state) {return new env.functions.class_tail([sym[0], null, null])},
class_tail$3=function (sym,env,lex,state) {return null},
class_element_list$0=function (sym,env,lex,state) {return (sym[0].push(sym[1]))},
class_element$0=function (sym,env,lex,state) {return (sym[1].static = true, sym[1])},
expression$0=function (sym,env,lex,state) {return (sym[0].push(sym[2]), sym[0])},
arguments$0=function (sym,env,lex,state) {return [];},
argument_list$0=function (sym,env,lex,state) {return (sym[0].push(new env.functions.spread_expr(env, sym.slice(2,4))), env[0])},
property_definition$0=function (sym,env,lex,state) {this.id = sym[0];},
colon_assignment$0=function (sym,env,lex,state) {this.id = sym[0]; this.expr = sym[1]},
array_literal$0=function (sym,env,lex,state) {return [ ]},
element_list$0=function (sym,env,lex,state) {return [sym[1]]},
element_list$1=function (sym,env,lex,state) {return (sym[0].push(sym[2]),sym[0])},
cover_parenthesized_expression_and_arrow_parameter_list$0=function (sym,env,lex,state) {return [sym[0].push(new env.functions.spread_expr(env, sym.slice(1,3)))]},
f78_1=function (sym,env,lex,state) {env.ASI = false;},
symbols = ["{",
"}",
"(",
")",
"[",
"]",
".",
"...",
";",
",",
"<",
">",
"<=",
">=",
"==",
"!=",
"===",
"!==",
"+",
"-",
"*",
"%",
"/",
"**",
"++",
"--",
"<<",
">>",
">>>",
"&",
"|",
"^",
"!",
"~",
"&&",
"||",
"?",
":",
"+=",
"-=",
"*=",
"%=",
"/=",
"**=",
"<<=",
">>=",
">>>=",
"&=",
"|=",
"^=",
"=>",
"####"],
goto = [(v,r = gt0[v]) => (r >= 0 ? r : -1),
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf],
err = [(v)=>(["$"]).includes(v) ? 1 : 0,
(v)=>(["$"]).includes(v) ? 1 : 0,
(v)=>0,
(v)=>0,
(v)=>(["τimport","τexport","{","τthis","θid","τyield","τawait","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τvar",";","τif","τdo","τwhile","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst"]).includes(v) ? 1 : 0,
(v)=>(["τimport","τexport","{","τthis","θid","τyield","τawait","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τvar",";","τif","τdo","τwhile","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst"]).includes(v) ? 1 : 0,
(v)=>(["τimport","τexport","{","τthis","θid","τyield","τawait","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τvar",";","τif","τdo","τwhile","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst"]).includes(v) ? 1 : 0,
(v)=>(["τfrom"]).includes(v) ? 1 : 0,
(v)=>([",","τfrom"]).includes(v) ? 1 : 0,
(v)=>(["τfrom"]).includes(v) ? 1 : 0,
(v)=>(["τfrom"]).includes(v) ? 1 : 0,
(v)=>([";","τimport","τexport","{","τthis","θid","τyield","τawait","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τvar","τif","τdo","τwhile","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst"]).includes(v) ? 1 : 0,
(v)=>(["}",","]).includes(v) ? 1 : 0,
(v)=>(["}",","]).includes(v) ? 1 : 0,
(v)=>(["τimport","τexport","{","τthis","θid","τyield","τawait","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τvar",";","τif","τdo","τwhile","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst"]).includes(v) ? 1 : 0,
(v)=>([",","τfrom","}"]).includes(v) ? 1 : 0,
(v)=>(["τimport","τexport","{","τthis","θid","τyield","τawait","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τvar",";","τif","τdo","τwhile","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst"]).includes(v) ? 1 : 0,
(v)=>(["τfrom",";"]).includes(v) ? 1 : 0,
(v)=>(["}",","]).includes(v) ? 1 : 0,
(v)=>(["}",","]).includes(v) ? 1 : 0,
(v)=>(["$"]).includes(v) ? 1 : 0,
(v)=>(["$"]).includes(v) ? 1 : 0,
(v)=>(["{","τthis","θid","τyield","τawait","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τvar",";","τif","τdo","τwhile","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst","}","$","τdefault","τcase"]).includes(v) ? 1 : 0,
(v)=>(["τimport","τexport","{","τthis","θid","τyield","τawait","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τvar",";","τif","τdo","τwhile","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst","}","$"]).includes(v) ? 1 : 0,
(v)=>(["τelse","τwhile","τimport","τexport","{","τthis","θid","τyield","τawait","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τvar",";","τif","τdo","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst","}","$"]).includes(v) ? 1 : 0,
(v)=>(["τimport","τexport","{","τthis","θid","τyield","τawait","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τvar",";","τif","τdo","τwhile","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst","}","$"]).includes(v) ? 1 : 0,
(v)=>(["τimport","τexport","{","τthis","θid","τyield","τawait","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τvar",";","τif","τdo","τwhile","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst","}","$"]).includes(v) ? 1 : 0,
(v)=>(["τelse","τwhile","τimport","τexport","{","τthis","θid","τyield","τawait","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τvar",";","τif","τdo","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst","}","$"]).includes(v) ? 1 : 0,
(v)=>(["τelse","τwhile","τimport","τexport","{","τthis","θid","τyield","τawait","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τvar",";","τif","τdo","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst","}","$"]).includes(v) ? 1 : 0,
(v)=>(["τcatch","τfinally","τelse","τwhile","τimport","τexport","{","τthis","θid","τyield","τawait","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τvar",";","τif","τdo","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst","}","$"]).includes(v) ? 1 : 0,
(v)=>(["τelse","τwhile","τimport","τexport","{","τthis","θid","τyield","τawait","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τvar",";","τif","τdo","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst","}","$"]).includes(v) ? 1 : 0,
(v)=>(["τelse","τwhile","τimport","τexport","{","τthis","θid","τyield","τawait","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τvar",";","τif","τdo","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst","}","$"]).includes(v) ? 1 : 0,
(v)=>(["τelse","τwhile","τimport","τexport","{","τthis","θid","τyield","τawait","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τvar",";","τif","τdo","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst","}","$"]).includes(v) ? 1 : 0,
(v)=>(["τelse","τwhile","τimport","τexport","{","τthis","θid","τyield","τawait","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τvar",";","τif","τdo","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst","}","$"]).includes(v) ? 1 : 0,
(v)=>(["τin","τof"]).includes(v) ? 1 : 0,
(v)=>(["τin","τof"]).includes(v) ? 1 : 0,
(v)=>(["τelse","τwhile","τimport","τexport","{","τthis","θid","τyield","τawait","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τvar",";","τif","τdo","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst","}","$"]).includes(v) ? 1 : 0,
(v)=>(["τelse","τwhile","τimport","τexport","{","τthis","θid","τyield","τawait","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τvar",";","τif","τdo","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst","}","$"]).includes(v) ? 1 : 0,
(v)=>(["τelse","τwhile","τimport","τexport","{","τthis","θid","τyield","τawait","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τvar",";","τif","τdo","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst","}","$"]).includes(v) ? 1 : 0,
(v)=>(["τelse","τwhile","τimport","τexport","{","τthis","θid","τyield","τawait","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τvar",";","τif","τdo","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst","}","$"]).includes(v) ? 1 : 0,
(v)=>(["τelse","τwhile","τimport","τexport","{","τthis","θid","τyield","τawait","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τvar",";","τif","τdo","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst","}","$"]).includes(v) ? 1 : 0,
(v)=>(["τelse","τwhile","τimport","τexport","{","τthis","θid","τyield","τawait","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τvar",";","τif","τdo","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst","}","$"]).includes(v) ? 1 : 0,
(v)=>(["τelse","τwhile","τimport","τexport","{","τthis","θid","τyield","τawait","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τvar",";","τif","τdo","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst","}","$"]).includes(v) ? 1 : 0,
(v)=>(["τdefault","}","τcase"]).includes(v) ? 1 : 0,
(v)=>(["}","τdefault","τcase"]).includes(v) ? 1 : 0,
(v)=>(["τcase","}"]).includes(v) ? 1 : 0,
(v)=>(["τelse","τwhile","τimport","τexport","{","τthis","θid","τyield","τawait","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τvar",";","τif","τdo","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst","}","$"]).includes(v) ? 1 : 0,
(v)=>(["τelse","τwhile","τimport","τexport","{","τthis","θid","τyield","τawait","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τvar",";","τif","τdo","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst","}","$"]).includes(v) ? 1 : 0,
(v)=>(["τelse","τwhile","τimport","τexport","{","τthis","θid","τyield","τawait","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τvar",";","τif","τdo","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst","}","$"]).includes(v) ? 1 : 0,
(v)=>(["τelse","τwhile","τimport","τexport","{","τthis","θid","τyield","τawait","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τvar",";","τif","τdo","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst","}","$"]).includes(v) ? 1 : 0,
(v)=>(["τfinally","τelse","τwhile","τimport","τexport","{","τthis","θid","τyield","τawait","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τvar",";","τif","τdo","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst","}","$"]).includes(v) ? 1 : 0,
(v)=>(["τelse","τwhile","τimport","τexport","{","τthis","θid","τyield","τawait","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τvar",";","τif","τdo","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst","}","$"]).includes(v) ? 1 : 0,
(v)=>([")"]).includes(v) ? 1 : 0,
(v)=>(["τelse","τwhile","τimport","τexport","{","τthis","θid","τyield","τawait","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τvar",";","τif","τdo","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst","}","$"]).includes(v) ? 1 : 0,
(v)=>(["τimport","τexport","{","τthis","θid","τyield","τawait","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τvar",";","τif","τdo","τwhile","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst","τelse","}","$"]).includes(v) ? 1 : 0,
(v)=>([";",","]).includes(v) ? 1 : 0,
(v)=>([";",","]).includes(v) ? 1 : 0,
(v)=>([";","τimport","τexport","{","τthis","θid","τyield","τawait","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τvar","τif","τdo","τwhile","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst","}","$"]).includes(v) ? 1 : 0,
(v)=>(["θid","τyield","τawait","{","["]).includes(v) ? 1 : 0,
(v)=>([";",","]).includes(v) ? 1 : 0,
(v)=>([";",","]).includes(v) ? 1 : 0,
(v)=>(["τimport","τexport","{","τthis","θid","τyield","τawait","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τvar",";","τif","τdo","τwhile","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst","}","$","τelse"]).includes(v) ? 1 : 0,
(v)=>(["(","[",".","τin","τof","=","*=","/=","%=","+=","-=","<<=",">>=",">>>=","&=","^=","|=","**=","++","--","{"]).includes(v) ? 1 : 0,
(v)=>([")"]).includes(v) ? 1 : 0,
(v)=>([")"]).includes(v) ? 1 : 0,
(v)=>([",",")"]).includes(v) ? 1 : 0,
(v)=>([")"]).includes(v) ? 1 : 0,
(v)=>([",",")"]).includes(v) ? 1 : 0,
(v)=>(["}"]).includes(v) ? 1 : 0,
(v)=>(["}"]).includes(v) ? 1 : 0,
(v)=>([")","]",":","τimport","τexport","{","τthis","θid","τyield","τawait","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τvar",";","τif","τdo","τwhile","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst",",","}"]).includes(v) ? 1 : 0,
(v)=>(["=>"]).includes(v) ? 1 : 0,
(v)=>0,
(v)=>0,
(v)=>(["=>"]).includes(v) ? 1 : 0,
(v)=>0,
(v)=>(["=>",".","(","[","τin","τof","=","*=","/=","%=","+=","-=","<<=",">>=",">>>=","&=","^=","|=","**=","++","--","{"]).includes(v) ? 1 : 0,
(v)=>(["(","[",".","τin","τof","=","*=","/=","%=","+=","-=","<<=",">>=",">>>=","&=","^=","|=","**=","++","--","{"]).includes(v) ? 1 : 0,
(v)=>(["τimport","τexport","{","τthis","θid","τyield","τawait","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τvar",";","τif","τdo","τwhile","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst","}","$"]).includes(v) ? 1 : 0,
(v)=>(["τimport","τexport","{","τthis","θid","τyield","τawait","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τvar",";","τif","τdo","τwhile","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst","}","$"]).includes(v) ? 1 : 0,
(v)=>(["{"]).includes(v) ? 1 : 0,
(v)=>(["}"]).includes(v) ? 1 : 0,
(v)=>(["θid","θstr","θnum","[","τget","τset","τstatic",";","}"]).includes(v) ? 1 : 0,
(v)=>(["θid","θstr","θnum","[","τget","τset","τstatic",";","}"]).includes(v) ? 1 : 0,
(v)=>(["θid","θstr","θnum","[","τget","τset","τstatic",";","}",","]).includes(v) ? 1 : 0,
(v)=>([")"]).includes(v) ? 1 : 0,
(v)=>([";",")",":",",","]"]).includes(v) ? 1 : 0,
(v)=>(["τin","τof","=","*=","/=","%=","+=","-=","<<=",">>=",">>>=","&=","^=","|=","**=","++","--","{","**","*","/","%","+","-","<<",">>",">>>","<",">","<=",">=","τinstanceof","==","!=","===","!==","^","&","|","&&","?","||",")","]",":","τimport","τexport","τthis","θid","τyield","τawait","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","τdelete","τvoid","τtypeof","~","τvar",";","τif","τdo","τwhile","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst",",","}"]).includes(v) ? 1 : 0,
(v)=>(["τin","τof","=","*=","/=","%=","+=","-=","<<=",">>=",">>>=","&=","^=","|=","**=","++","--","{"]).includes(v) ? 1 : 0,
(v)=>(["(","[",".","τin","τof","=","*=","/=","%=","+=","-=","<<=",">>=",">>>=","&=","^=","|=","**=","++","--","{"]).includes(v) ? 1 : 0,
(v)=>(["(","[",".","τin","τof","=","*=","/=","%=","+=","-=","<<=",">>=",">>>=","&=","^=","|=","**=","++","--","{"]).includes(v) ? 1 : 0,
(v)=>(["(","[",".","τin","τof","=","*=","/=","%=","+=","-=","<<=",">>=",">>>=","&=","^=","|=","**=","++","--","{"]).includes(v) ? 1 : 0,
(v)=>(["(","[",".","τin","τof","=","*=","/=","%=","+=","-=","<<=",">>=",">>>=","&=","^=","|=","**=","++","--","{"]).includes(v) ? 1 : 0,
(v)=>([".","(","[","τin","τof","=","*=","/=","%=","+=","-=","<<=",">>=",">>>=","&=","^=","|=","**=","++","--","{"]).includes(v) ? 1 : 0,
(v)=>([".","(","[","τin","τof","=","*=","/=","%=","+=","-=","<<=",">>=",">>>=","&=","^=","|=","**=","++","--","{"]).includes(v) ? 1 : 0,
(v)=>(["=>","(","[",".","τin","τof","=","*=","/=","%=","+=","-=","<<=",">>=",">>>=","&=","^=","|=","**=","++","--","{"]).includes(v) ? 1 : 0,
(v)=>([")",","]).includes(v) ? 1 : 0,
(v)=>(["(","[",".","τin","τof","=","*=","/=","%=","+=","-=","<<=",">>=",">>>=","&=","^=","|=","**=","++","--","{"]).includes(v) ? 1 : 0,
(v)=>(["(","[",".","τin","τof","=","*=","/=","%=","+=","-=","<<=",">>=",">>>=","&=","^=","|=","**=","++","--","{"]).includes(v) ? 1 : 0,
(v)=>(["}",","]).includes(v) ? 1 : 0,
(v)=>(["}",","]).includes(v) ? 1 : 0,
(v)=>(["}",","]).includes(v) ? 1 : 0,
(v)=>(["}",","]).includes(v) ? 1 : 0,
(v)=>(["(",":"]).includes(v) ? 1 : 0,
(v)=>(["(",":"]).includes(v) ? 1 : 0,
(v)=>(["(",":"]).includes(v) ? 1 : 0,
(v)=>(["}",","]).includes(v) ? 1 : 0,
(v)=>([";",",","}",")","]"]).includes(v) ? 1 : 0,
(v)=>(["(","[",".","τin","τof","=","*=","/=","%=","+=","-=","<<=",">>=",">>>=","&=","^=","|=","**=","++","--","{"]).includes(v) ? 1 : 0,
(v)=>(["]",","]).includes(v) ? 1 : 0,
(v)=>(["]","τthis","θid","τyield","τawait","τtrue","τfalse","τnull","θstr","θnum","[","{","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","...",","]).includes(v) ? 1 : 0,
(v)=>(["]",","]).includes(v) ? 1 : 0,
(v)=>([")","]",":","τimport","τexport","{","τthis","θid","τyield","τawait","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τvar",";","τif","τdo","τwhile","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst",",","}"]).includes(v) ? 1 : 0,
(v)=>(["τthis","θid","τyield","τawait","τtrue","τfalse","τnull","θstr","θnum","[","{","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~"]).includes(v) ? 1 : 0,
(v)=>([")","]",":","τimport","τexport","{","τthis","θid","τyield","τawait","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τvar",";","τif","τdo","τwhile","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst",",","}"]).includes(v) ? 1 : 0,
(v)=>(["?","||",")","]",":","τimport","τexport","{","τthis","θid","τyield","τawait","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τvar",";","τif","τdo","τwhile","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst",",","}"]).includes(v) ? 1 : 0,
(v)=>(["&&","?","||",")","]",":","τimport","τexport","{","τthis","θid","τyield","τawait","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τvar",";","τif","τdo","τwhile","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst",",","}"]).includes(v) ? 1 : 0,
(v)=>(["|","&&","?","||",")","]",":","τimport","τexport","{","τthis","θid","τyield","τawait","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τvar",";","τif","τdo","τwhile","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst",",","}"]).includes(v) ? 1 : 0,
(v)=>(["|","&&","?","||",")","]",":","τimport","τexport","{","τthis","θid","τyield","τawait","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τvar",";","τif","τdo","τwhile","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst",",","}"]).includes(v) ? 1 : 0,
(v)=>(["^","&","|","&&","?","||",")","]",":","τimport","τexport","{","τthis","θid","τyield","τawait","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τvar",";","τif","τdo","τwhile","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst",",","}"]).includes(v) ? 1 : 0,
(v)=>(["==","!=","===","!==","^","&","|","&&","?","||",")","]",":","τimport","τexport","{","τthis","θid","τyield","τawait","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τvar",";","τif","τdo","τwhile","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst",",","}"]).includes(v) ? 1 : 0,
(v)=>(["<",">","<=",">=","τinstanceof","τin","==","!=","===","!==","^","&","|","&&","?","||",")","]",":","τimport","τexport","{","τthis","θid","τyield","τawait","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τvar",";","τif","τdo","τwhile","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst",",","}"]).includes(v) ? 1 : 0,
(v)=>(["<<",">>",">>>","<",">","<=",">=","τinstanceof","τin","==","!=","===","!==","^","&","|","&&","?","||",")","]",":","τimport","τexport","{","τthis","θid","τyield","τawait","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τvar",";","τif","τdo","τwhile","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst",",","}"]).includes(v) ? 1 : 0,
(v)=>(["+","-","<<",">>",">>>","<",">","<=",">=","τinstanceof","τin","==","!=","===","!==","^","&","|","&&","?","||",")","]",":","τimport","τexport","{","τthis","θid","τyield","τawait","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","~","τvar",";","τif","τdo","τwhile","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst",",","}"]).includes(v) ? 1 : 0,
(v)=>(["*","/","%","+","-","<<",">>",">>>","<",">","<=",">=","τinstanceof","τin","==","!=","===","!==","^","&","|","&&","?","||",")","]",":","τimport","τexport","{","τthis","θid","τyield","τawait","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","~","τvar",";","τif","τdo","τwhile","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst",",","}"]).includes(v) ? 1 : 0,
(v)=>(["*","/","%","+","-","<<",">>",">>>","<",">","<=",">=","τinstanceof","τin","==","!=","===","!==","^","&","|","&&","?","||",")","]",":","τimport","τexport","{","τthis","θid","τyield","τawait","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","~","τvar",";","τif","τdo","τwhile","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst",",","}"]).includes(v) ? 1 : 0,
(v)=>(["*","/","%","+","-","<<",">>",">>>","<",">","<=",">=","τinstanceof","τin","==","!=","===","!==","^","&","|","&&","?","||",")","]",":","τimport","τexport","{","τthis","θid","τyield","τawait","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","~","τvar",";","τif","τdo","τwhile","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst",",","}","**"]).includes(v) ? 1 : 0,
(v)=>(["**","*","/","%","+","-","<<",">>",">>>","<",">","<=",">=","τinstanceof","τin","==","!=","===","!==","^","&","|","&&","?","||",")","]",":","τimport","τexport","{","τthis","θid","τyield","τawait","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","~","τvar",";","τif","τdo","τwhile","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst",",","}"]).includes(v) ? 1 : 0,
(v)=>(["*","/","%","+","-","<<",">>",">>>","<",">","<=",">=","τinstanceof","τin","==","!=","===","!==","^","&","|","&&","?","||",")","]",":","τimport","τexport","{","τthis","θid","τyield","τawait","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","~","τvar",";","τif","τdo","τwhile","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst",",","}"]).includes(v) ? 1 : 0,
(v)=>(["=>","(","[",".","τin","τof","=","*=","/=","%=","+=","-=","<<=",">>=",">>>=","&=","^=","|=","**=","++","--","{"]).includes(v) ? 1 : 0,
(v)=>(["=",")","τin","τof",",","]","}"]).includes(v) ? 1 : 0,
(v)=>(["=",")","τin","τof"]).includes(v) ? 1 : 0,
(v)=>(["=",")","τin","τof"]).includes(v) ? 1 : 0,
(v)=>(["}"]).includes(v) ? 1 : 0,
(v)=>(["}",","]).includes(v) ? 1 : 0,
(v)=>(["]",","]).includes(v) ? 1 : 0,
(v)=>(["]",","]).includes(v) ? 1 : 0,
(v)=>(["}",","]).includes(v) ? 1 : 0,
(v)=>([",",")","]","}"]).includes(v) ? 1 : 0,
(v)=>(["}",",",")","]"]).includes(v) ? 1 : 0,
(v)=>(["]",")"]).includes(v) ? 1 : 0,
(v)=>(["(","[",".","τin","τof","=","*=","/=","%=","+=","-=","<<=",">>=",">>>=","&=","^=","|=","**=","++","--","{"]).includes(v) ? 1 : 0,
(v)=>(["τimport","τexport","{","τthis","θid","τyield","τawait","τtrue","τfalse","τnull","θstr","θnum","[","τfunction","τclass","(","τsuper","τnew","++","--","τdelete","τvoid","τtypeof","+","-","~","τvar",";","τif","τdo","τwhile","τfor","τswitch","τcontinue","τbreak","τreturn","τwith","τthrow","τtry","τdebugger","τlet","τconst",":",".","τin","τof","=","*=","/=","%=","+=","-=","<<=",">>=",">>>=","&=","^=","|=","**="]).includes(v) ? 1 : 0,
(v)=>(["(",":","[",".","τin","τof","=","*=","/=","%=","+=","-=","<<=",">>=",">>>=","&=","^=","|=","**=","++","--","{"]).includes(v) ? 1 : 0,
(v)=>(["(","[",".","τin","τof","=","*=","/=","%=","+=","-=","<<=",">>=",">>>=","&=","^=","|=","**=","++","--","{"]).includes(v) ? 1 : 0,
(v)=>(["(","[",".","τin","τof","=","*=","/=","%=","+=","-=","<<=",">>=",">>>=","&=","^=","|=","**=","++","--","{"]).includes(v) ? 1 : 0,
(v)=>([";",":"]).includes(v) ? 1 : 0,
(v)=>(["=","(","[",".","τin","τof","*=","/=","%=","+=","-=","<<=",">>=",">>>=","&=","^=","|=","**=","++","--","{","}",","]).includes(v) ? 1 : 0,
(v)=>(["=","(","τextends","{",")","τin","τof",";",",","=>","}","]"]).includes(v) ? 1 : 0,
(v)=>(["τas",",","τfrom","}",";",":","=","(","[",".","τin","τof","*=","/=","%=","+=","-=","<<=",">>=",">>>=","&=","^=","|=","**=","++","--","{","τextends",")","=>","]"]).includes(v) ? 1 : 0,
(v)=>(["(","[",".","τin","τof","=","*=","/=","%=","+=","-=","<<=",">>=",">>>=","&=","^=","|=","**=","++","--","{",":","τas",",","τfrom","}",";","τextends",")","=>","]"]).includes(v) ? 1 : 0],
eh = [e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e],
gt0 = [-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,3,4,5,6,7,110,14,8,22,12,9,13,97,-1,-1,15,16,17,19,18,98,-1,-1,-1,-1,10,-1,-1,20,-1,-1,-1,21,11,-1,-1,111,112,-1,-1,82,64,-1,-1,-1,-1,-1,-1,-1,27,91,-1,-1,-1,-1,90,65,84,-1,-1,-1,-1,-1,-1,-1,24,28,52,54,57,58,88,53,89,-1,-1,56,63,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,25,-1,26,29,30,31,32,33,34,35,36,37,38,39,40,41,49,66,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,74,75,73,72,93,60,92,67,70],

sf = [(t, e, o, l, s)=>{o.push(null); return 20483},
(t, e, o, l, s)=>94,
(t, e, o, l, s)=>170,
(t, e, o, l, s)=>174,
(t, e, o, l, s)=>178,
(t, e, o, l, s)=>182,
(t, e, o, l, s)=>186,
(t, e, o, l, s)=>190,
(t, e, o, l, s)=>194,
(t, e, o, l, s)=>202,
(t, e, o, l, s)=>206,
(t, e, o, l, s)=>222,
(t, e, o, l, s)=>238,
(t, e, o, l, s)=>274,
(t, e, o, l, s)=>278,
(t, e, o, l, s)=>286,
(t, e, o, l, s)=>306,
(t, e, o, l, s)=>310,
(t, e, o, l, s)=>314,
(t, e, o, l, s)=>318,
(t, e, o, l, s)=>322,
(t, e, o, l, s)=>326,
(t, e, o, l, s)=>334,
(t, e, o, l, s)=>342,
(t, e, o, l, s)=>346,
(t, e, o, l, s)=>350,
(t, e, o, l, s)=>378,
(t, e, o, l, s)=>382,
(t, e, o, l, s)=>386,
(t, e, o, l, s)=>398,
(t, e, o, l, s)=>402,
(t, e, o, l, s)=>{f78_1(o,e,l,s); return 406},
(t, e, o, l, s)=>410,
(t, e, o, l, s)=>414,
(t, e, o, l, s)=>418,
(t, e, o, l, s)=>422,
(t, e, o, l, s)=>426,
(t, e, o, l, s)=>430,
(t, e, o, l, s)=>434,
(t, e, o, l, s)=>438,
(t, e, o, l, s)=>454,
(t, e, o, l, s)=>458],
rec = [0,
0,
4,
80,
84,
88,
92,
92,
96,
96,
96,
96,
96,
96,
96,
96,
96,
96,
96,
96,
96,
96,
112,
116,
124,
344,
448,
448,
448,
456,
460,
464,
468,
472,
476,
480,
484,
488,
492,
496,
500,
500,
504,
504,
504,
504,
504,
504,
504,
504,
508,
508,
348,
348,
352,
352,
356,
356,
356,
388,
388,
388,
388,
388,
388,
388,
388,
588,
588,
588,
596,
600,
564,
564,
564,
564,
580,
580,
576,
568,
572,
432,
248,
244,
308,
312,
516,
360,
364,
372,
372,
280,
284,
184,
216,
120,
128,
108,
108,
132,
132,
132,
164,
144,
148,
152,
160,
156,
196,
212,
100,
100,
228,
232,
232,
88,
344,
448,
456,
464,
468,
472,
480,
484,
488,
492,
496,
504,
356,
356],
sm = [new Map([["$",1],["{",2],["τdelete",3],["τvoid",4],["τtypeof",5],["+",6],["-",7],["~",8],["!",9],["++",10],["--",11],["τnew",12],["τthis",13],["τyield",14],["τawait",15],["θid",16],["τtrue",17],["τfalse",18],["τnull",19],["θstr",20],["θnum",21],["[",22],["τfunction",23],["τclass",24],["(",25],["τsuper",26],["τvar",27],[";",28],["τif",29],["τdo",30],["τwhile",31],["τfor",32],["τswitch",33],["τcontinue",34],["τbreak",35],["τreturn",36],["τwith",37],["τthrow",38],["τtry",39],["τdebugger",40],["τlet",41],["τconst",42],["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]]),
new Map([["θws",0xFFFFFFFF],["θnl",0xFFFFFFFF]])],
state = [sm[0],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1],
sm[1]],
re = new Set(["import","as","from","export","default","if","else","do","while","for","var","in","of","await","continue","continue","break","break","return","return","throw","with","switch","case","default","try","catch","finally","debugger","let","const","function","async","class","extends","static","get","set","new","super","target","this","instanceof","delete","void","typeof","null","true","false","yield","await"]),
throw_ = ()=>{debugger},
types = {"num":1,"number":1,"id":2,"identifier":2,"str":4,"string":4,"ws":8,"white_space":8,"ob":16,"open_bracket":16,"cb":32,"close_bracket":32,"op":64,"operator":64,"sym":128,"symbol":128,"nl":256,"new_line":256,"dl":512,"data_link":512,"alpha_numeric":3,"white_space_new_line":264};

function getToken(l, reserved) {
    if (l.END) return "$";

    switch (l.ty) {
        case types.id:
            if (reserved.has(l.tx)) return "τ" + l.tx;
            return "θid";
        case types.num:
            return "θnum";
        case types.string:
            return "θstr";
        case types.new_line:
            return "θnl";
        case types.ws:
            return "θws";
        case types.data_link:
            return "θdl";
        default:
            return l.tx;
    }
}

 function parser(l, e = {}){
    l.IWS = false;

    if(symbols.length > 0){
        symbols.forEach(s=> {l.addSymbol(s)});
        l.off = 0;
        l.tl = 0;
        l.next();
    }

    const o = [], ss = [0,0];
    
    let time = 10000, RECOVERING = false,
        tk = getToken(l, re), p = l.copy(), sp = 1, len = 0, off= 0;
    
    outer:

    while(time-- > 0){
        
        let fn = state[ss[sp]].get(tk) || 0, r, st = 0, gt = -1, c = 0;

        if(fn == 0xFFFFFFFF){
            //Ignore the token
            l.next();
            tk = getToken(l, re, state[ss[sp]]);
            continue;
        }

        if(fn > 0){
            r = sf[fn-1](tk, e, o, l, ss[sp-1]);
        } else {
            //Error Encountered 
            r = re[ss[sp]];
            
            const recovery_token = eh[ss[sp]](tk, e, o, l, p, ss[sp]);
            
            if(!RECOVERING && typeof(recovery_token) == "string"){
                RECOVERING = true; // To prevent infinite recursion
                tk = recovery_token;
                //reset current token
                l.tl = 0;
                continue;
            }
        }

        st = r >> 2;

        switch(r & 3){
            case 0: // ERROR
                
                if(tk == "$")
                    l.throw("Unexpected end of input");

                l.throw(`Unexpected token [${RECOVERING ? l.next().tx : l.tx}]`); 

                return [null];

            case 1: // ACCEPT
                break outer;

            case 2: //SHIFT
                o.push((tk[0] == "θ") ? l.tx : tk); 
                ss.push(off, r >> 2); 
                sp+=2; 
                p.sync(l);
                l.next(); 
                off = l.off; 
                tk = getToken(l, re, state[ss[sp]]); 
                
                break;

            case 3: // REDUCE

                len = (r & 0x3FC) >> 1;

                ss.length -= len;   
                sp -= len; 

                gt = goto[ss[sp]](r >> 10);

                if(gt < 0)
                    l.throw("Invalid state reached!");
                
                ss.push(off, gt); sp+=2; 
                
                break;
        }  

        RECOVERING = false;
    }
    return o[0];
}; const js_base = parser;