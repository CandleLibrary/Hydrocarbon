## HYDROCARBON BASE JS ##

#SYMBOLS << >>> >> >>>= >>= <<= <= >= != !== |= === == ** ++ -- **= ... || && => ** ++ -- **= ... || && += -= /= *= %=  &= |= **=

S → statement	

exponentation_expression → unary_expression
	│ update_expression ** exponentation_expression

multiplicative_expression → exponentation_expression
	│ multiplicative_expression / exponentation_expression
	│ multiplicative_expression * exponentation_expression
	│ multiplicative_expression % exponentation_expression

additive_expression → multiplicative_expression
	│ additive_expression + multiplicative_expression
	│ additive_expression - multiplicative_expression

shift_expression → additive_expression
	│ shift_expression << additive_expression
	│ shift_expression >> additive_expression
	│ shift_expression >>> additive_expression

relational_expression → shift_expression
	│ relational_expression < shift_expression
	│ relational_expression >  shift_expression
	│ relational_expression <= shift_expression
	│ relational_expression >= shift_expression
	│ relational_expression τinstanceof shift_expression
	│ relational_expression τin shift_expression

equality_expression → equality_expression == relational_expression
	│ equality_expression != relational_expression
	│ equality_expression === relational_expression
	│ equality_expression !== relational_expression

bitwise_AND_expression → equality_expression
	│ bitwise_AND_expression & equality_expression

bitwise_XOR_expression → bitwise_AND_expression
	│ bitwise_XOR_expression ^ bitwise_AND_expression

bitwise_OR_expression → bitwise_XOR_expression
	│ bitwise_OR_expression | bitwise_XOR_expression

logical_AND_expression → bitwise_OR_expression
	│ logical_AND_expression && bitwise_OR_expression

logical_OR_expression → logical_AND_expression
	│ logical_OR_expression || logical_AND_expression

conditional_expression → logical_OR_expression
	│ logical_OR_expression ? assignment_expression :  assignment_expression

assignment_expression → conditional_expression
	#│ yield_expression
	#│ arrow_function
	#│ async_arrow_function
	│ left_hand_side_expression = assignment_expression
	│ left_hand_side_expression += assignment_expression
	│ left_hand_side_expression -= assignment_expression
	│ left_hand_side_expression /= assignment_expression
	│ left_hand_side_expression *= assignment_expression
	│ left_hand_side_expression %= assignment_expression
	│ left_hand_side_expression <<= assignment_expression
	│ left_hand_side_expression >>= assignment_expression
	│ left_hand_side_expression >>>= assignment_expression
	│ left_hand_side_expression &= assignment_expression
	│ left_hand_side_expression |= assignment_expression
	│ left_hand_side_expression **= assignment_expression

expression → assignment_expression
	│ expression , assignment_expression

statement → 
	# │ variable_statement
	# │ empty_statement
	# │ expression_statement
	# │ if_statement
	# │ breakable_statement
	# │ continue_statement
	# │ return_statement
	# │ with_statement
	labelled_statement
	# │ throw_statement
	# │ try_statement
	│ debugger_statement

declaration → lexical_declaration

breakable_statement → iteration_statement
	│ switch_statement

block_statement → block

block → { statement_list }
	│ { }

statement_list → statement_list_item
	│ statement_list statement_list_item

statement_list_item → statement
	│ declaration

lexical_declaration → let_or_const binding_list 

let_or_const → τlet 
	│ τconst

binding_list → lexical_binding
	│ binding_list , lexical_binding

lexical_binding → identifier initializer
	│ binding_pattern initializer

variable_statement → τvar variable_declaration_list

variable_declaration_list → variable_declaration
	│ variable_declaration_list , variable_declaration

variable_declaration → identifier initializer
	│ binding_pattern initializer

###################################################################################################################################
# ecma-international.org/ecma-262/9.0/index.html#prod-BindingPattern
###################################################################################################################################

binding_pattern → object_binding_pattern
	│ array_binding_pattern

object_binding_pattern → { }
	│ { binding_rest_property }
	│ { binding_property_list }
	│ { binding_property_list , elision binding_rest_element }

array_binding_pattern → [ , binding_rest_element ]
	│ [ binding_rest_element ]
	│ [ ]
	│ [ , ]
	│ [ binding_element_list ]
	│ [ binding_element_list , elision binding_rest_element ]

binding_rest_property → ... identifier

binding_property_list → binding_property
	│ binding_property_list , binding_property

binding_element_list → binding_elision_element
	│ binding_element_list , binding_elision_element

binding_elision_element → , binding_element
	│ binding_element

binding_property → single_name_binding
	│ property_name : binding_element

binding_element → single_name_binding
	│ binding_pattern initializer
	│ binding_pattern

single_name_binding → identifier initializer
	│ binding_pattern

binding_rest_element → ... identifier
	│ ... binding_pattern


empty_statement → ;

expression_statement → expression

if_statement → τif ( expression ) statement τelse statement
	│ τif ( expression ) statement

iteration_statement → τdo statement τwhile ( expression ) ;
	│ τwhile ( expression ) statement 
	│ τfor ( expression  ; expression  ; expression ) statement 
	│ τfor ( variable_declaration_list ; expression ; expression ) statement 
	│ τfor ( lexical_declaration  expression ; expression ) statement 
	│ τfor ( left_hand_side_expression  τin expression ) statement 
	│ τfor ( τvar for_binding  τin expression ) statement 
	│ τfor ( for_declaration  τin expression ) statement 
	│ τfor ( left_hand_side_expression  τof assignment_expression ) statement 
	│ τfor ( τvar for_binding  τof assignment_expression ) statement 
	│ τfor ( for_declaration  τof assignment_expression ) statement 
	│ τfor τawait ( left_hand_side_expression  τof assignment_expression ) statement 
	│ τfor τawait ( τvar for_binding  τof assignment_expression ) statement 
	│ τfor τawait ( for_declaration  τof assignment_expression ) statement 

for_declaration → let_or_const for_binding

for_binding → identifier 
	│ binding_pattern

continue_statement → τcontinue ;
	│ τcontinue identifier ;

break_statement → τbreak ;
	│ τbreak labelled_statement ;

return_statement → τreturn ;
	│ τreturn expression ;

with_statement → τwhile ( expression ) statement

# ecma-international.org/ecma-262/9.0/index.html#sec-switch-statement

switch_statement → τswitch ( expression ) case_block

case_block → { }
	│ { case_clauses }
	│ { default_case case_clauses }
	│ { default_case }
	│ { case_clauses default_case case_clauses }

case_clauses → case_clause
	│ case_clauses case_clause

case_clause → τcase expression : 
	│ τvase expression : statement_list

default_case → τdefault : statement_list
	│ τdefault :

###################################################################################################################################
# ecma-international.org/ecma-262/9.0/index.html#sec-labelled-statements
###################################################################################################################################

labelled_statement → identifier : labelled_item

labelled_item → statement

throw_statement → τthrow expression ;

try_statement → τtry block catch
	│ τtry block finally
	│ τtry block catch finally

catch → τcatch ( catch_parameter ) block

finally → τfinally block

catch_parameter → identifier
	│ binding_pattern

debugger_statement → τdebugger ;

###################################################################################################################################
# ecma-international.org/ecma-262/9.0/index.html#sec-unary-operators
###################################################################################################################################

	unary_expression → update_expression
		│ τdelete unary_expression
		│ τvoid unary_expression
		│ τtypeof unary_expression
		│ + unary_expression
		│ - unary_expression
		│ ~ unary_expression
		│ ! unary_expression
		#│ await_expression


###################################################################################################################################
# ecma-international.org/ecma-262/9.0/index.html#sec-update-expressions
###################################################################################################################################
	
	update_expression → left_hand_side_expression
		│ left_hand_side_expression ++
		│ left_hand_side_expression --
		│ ++ unary_expression
		│ -- unary_expression

###################################################################################################################################
# ecma-international.org/ecma-262/9.0/index.html#sec-left-hand-side-expressions
###################################################################################################################################

	member_expression → primary_expression
		│ member_expression [ expression ]
		│ member_expression . identifier_name
		│ member_expression template_literal

	argument_list → assignment_expression
		│ ... assignment_expression
		│ argument_list , assignment_expression
		│ argument_list , ... assignment_expression
	
	left_hand_side_expression → member_expression

###################################################################################################################################
# ecma-international.org/ecma-262/9.0/index.html#sec-template-literals
###################################################################################################################################

	template_literal → no_substitute_template
		│ substitute_template

	substitute_template → template_head expression template_spans

	template_spans → template_tail
		│ template_middle_list template_tail

	template_middle_list → template_middle expression
		│ template_middle_list template_middle expression

	###################################################################################################################################
	# ecma-international.org/ecma-262/9.0/index.html#prod-TemplateMiddle
	###################################################################################################################################

		template_middle → no_substitute_template
			

		no_substitute_template →  template_characters 
			

		template_head → $ template_characters ${ 
			│ $ ${ 

		template_substitute_tail → template_middle
			│ template_tail

		template_middle → } template_characters ${

		template_tail → } template_characters $

		template_characters → τtodo


###################################################################################################################################
# ecma-international.org/ecma-262/9.0/index.html#sec-object-initializer
###################################################################################################################################

	object_literal →  { }
		│ { property_definition_list }
		│ { property_definition_list , }

	property_definition_list → property_definition
		│ property_definition_list , property_definition

	property_definition → identifier
		│ cover_initialization_name
		│ property_name : assignment_expression
		│ ... assignment_expression

	property_name → literal_property_name
		│ computed_property_name

	literal_property_name → identifier_name
		│ string_literal
		│ numeric_literal

	computed_property_name → [ assignment_expression ]

	cover_initialization_name →  identifier initializer

	initializer → = assignment_expression

###################################################################################################################################
# ecma-international.org/ecma-262/9.0/index.html#sec-array-initializer
###################################################################################################################################

	array_literal → [ elision ]
		│ [ element_list ]
		│ [ element_list , elision ]

	element_list → elision assignment_expression
		│ elision spread_element
		│ element_list , elision  assignment_expression
		│ element_list , elision spread_element

	elision → ,
		│ elision , 
		│ ɛ

	spread_element → ... assignment_expression

###################################################################################################################################
# ecma-international.org/ecma-262/9.0/index.html#sec-identifier-reference
###################################################################################################################################

	literal  →  null_literal
		│ boolean_literal
		│ numeric_literal
		│ string_literal

###################################################################################################################################
# ecma-international.org/ecma-262/9.0/index.html#sec-primary-expression
###################################################################################################################################

	primary_expression → τthis
		│ identifier
		│ literal
		│ array_literal
		│ object_literal
		│ regular_expression_literal
		│ template_literal
		│ cover_parenthesized_expression_and_arrow_parameter_list

	cover_parenthesized_expression_and_arrow_parameter_list → ( expression )
		│ ( expression , )
		│ ( )
		│ ( ... identifier )
		│ ( ... binding_pattern )
		│ ( expression , ... identifier )
		│ ( expression , ... binding_pattern )

###################################################################################################################################
# ecma-international.org/ecma-262/9.0/index.html#sec-ecmascript-language-expressions
###################################################################################################################################

	identifier → identifier_name


###################################################################################################################################
# ecma-international.org/ecma-262/9.0/index.html#sec-literals-regular-expression-literals
###################################################################################################################################

	regular_expression_literal → / regular_expression_body / regular_expression_flags

	regular_expression_body → τnone

	regular_expression_flags → τnone

###################################################################################################################################
# ecma-international.org/ecma-262/9.0/index.html#sec-ecmascript-language-lexical-grammar-literals
###################################################################################################################################

	identifier_name → θid

	null_literal → τnull

	boolean_literal → τtrue │ τfalse

	numeric_literal → θnum

	string_literal → θstr

