export default (b) => {
    const pos = null;

    function lm(lex, syms) {
        for (const sym of syms)
            switch (typeof sym) {
                case "number":
                    if (sym == 0xFF && lex.END) return true;
                    if (lex.ty == sym) return true;
                    break;
                case "string":
                    if (lex.tx == sym) return true;
                    break;
            }
        return false;
    }

    function fail(lex, e) {


        if (e.FAILED) console.log("_______________________________");
        e.FAILED = true;
        e.error.push(lex.copy());
    }

    function _s(s, lex, e, eh, skips, ...syms) {

//        if (e.FAILED) return s;

        var val = lex.tx;

        if (syms.length == 0 || lm(lex, syms)) {

            lex.next();

            if (skips) while (lm(lex, skips)) lex.next();

            e.sp++;

            s.push(val);

        } else {

            //error recovery
            const tx = eh(lex, e);


            if (!tx) {
                if (e.FAILED) console.log("_______________________________a");
                e.FAILED = true;
                e.error.push(lex.copy());
            }
        }

        return s;
    }


    function _(lex, e, eh, skips, ...syms) {

        if (e.FAILED) return "";

        var val = lex.tx;

        if (e.FAILED) console.log("_______________________________a");

        if (syms.length == 0 || lm(lex, syms)) {

            lex.next();

            if (skips) while (lm(lex, skips)) lex.next();

            return val;
        } else {

            //error recovery
            const tx = eh(lex, e);

            if (tx) return tx;

            else {
                if (e.FAILED) console.log("_______________________________b");
                e.FAILED = true;
                e.error.push(lex.copy());
            }
        }
    }

    const skips = [8, 256];

    const _0 = [8, 256, 8, 256, 512], _1 = [","], _2 = [",", "}"], _3 = ["as"], _4 = ["!=", "!==", "%", "%=", "&", "&&", "&=", "(", ")", "*", "**", "**=", "*=", "+", "++", "+=", ",", "-", "--", "-=", ".", "/", "/=", ":", ";", "<", "<<", "<<=", "<=", "=", "==", "===", "=>", ">", ">=", ">>", ">>=", ">>>", ">>>=", "?", "?.", "??", "[", "]", "^", "^=", "`", "as", "extends", "from", "in", "instanceof", "of", "{", "|", "|=", "||", "}"], _5 = ["!", "$", "'", "(", "+", "++", "-", "--", "/", ";", "[", "\"", "_", "`", "as", "async", "await", "break", "case", "class", "const", "continue", "debugger", "default", "delete", "do", "export", "false", "for", "from", "function", "get", "if", "import", "let", "new", "null", "return", "set", "super", "switch", "target", "this", "throw", "true", "try", "typeof", "var", "void", "while", "with", "yield", "{", "}", "~"], _6 = [1, 2, 255], _7 = ["!", "$", "'", "(", "+", "++", "-", "--", "/", ";", "[", "\"", "_", "`", "as", "async", "await", "break", "case", "class", "const", "continue", "debugger", "default", "delete", "do", "else", "export", "false", "for", "from", "function", "get", "if", "import", "let", "new", "null", "return", "set", "super", "switch", "target", "this", "throw", "true", "try", "typeof", "var", "void", "while", "with", "yield", "{", "}", "~"], _8 = [";"], _9 = [")", ",", ":", ";", "]", "}"], _10 = [")", ",", ":", ";", "?", "]", "}"], _11 = ["??"], _12 = [")", ",", ":", ";", "?", "]", "||", "}"], _13 = ["&&", ")", ",", ":", ";", "?", "]", "||", "}"], _14 = ["&&", ")", ",", ":", ";", "?", "??", "]", "|", "||", "}"], _15 = ["&&", ")", ",", ":", ";", "?", "??", "]", "^", "|", "||", "}"], _16 = ["&", "&&", ")", ",", ":", ";", "?", "??", "]", "^", "|", "||", "}"], _17 = ["!=", "!==", "&", "&&", ")", ",", ":", ";", "==", "===", "?", "??", "]", "^", "|", "||", "}"], _18 = ["!=", "!==", "&", "&&", ")", ",", ":", ";", "<", "<=", "==", "===", ">", ">=", "?", "??", "]", "^", "in", "instanceof", "|", "||", "}"], _19 = ["!=", "!==", "&", "&&", ")", ",", ":", ";", "<", "<<", "<=", "==", "===", ">", ">=", ">>", ">>>", "?", "??", "]", "^", "in", "instanceof", "|", "||", "}"], _20 = ["!=", "!==", "&", "&&", ")", "+", ",", "-", ":", ";", "<", "<<", "<=", "==", "===", ">", ">=", ">>", ">>>", "?", "??", "]", "^", "in", "instanceof", "|", "||", "}"], _21 = ["!=", "!==", "%", "&", "&&", ")", "*", "+", ",", "-", "/", ":", ";", "<", "<<", "<=", "==", "===", ">", ">=", ">>", ">>>", "?", "??", "]", "^", "in", "instanceof", "|", "||", "}"], _22 = ["!=", "!==", "%", "&", "&&", ")", "*", "**", "+", ",", "-", "/", ":", ";", "<", "<<", "<=", "==", "===", ">", ">=", ">>", ">>>", "?", "??", "]", "^", "in", "instanceof", "|", "||", "}"], _23 = [1], _24 = ["!=", "!==", "%", "%=", "&", "&&", "&=", ")", "*", "**", "**=", "*=", "+", "++", "+=", ",", "-", "--", "-=", "/", "/=", ":", ";", "<", "<<", "<<=", "<=", "=", "==", "===", ">", ">=", ">>", ">>=", ">>>", ">>>=", "?", "??", "]", "^", "^=", "in", "instanceof", "of", "{", "|", "|=", "||", "}"], _25 = ["."], _26 = ["!=", "!==", "%", "%=", "&", "&&", "&=", "(", ")", "*", "**", "**=", "*=", "+", "++", "+=", ",", "-", "--", "-=", ".", "/", "/=", ":", ";", "<", "<<", "<<=", "<=", "=", "==", "===", ">", ">=", ">>", ">>=", ">>>", ">>>=", "?", "?.", "??", "[", "]", "^", "^=", "`", "in", "instanceof", "of", "{", "|", "|=", "||", "}"], _27 = ["=>"], _28 = ["!=", "!==", "%", "%=", "&", "&&", "&=", "(", ")", "*", "**", "**=", "*=", "+", "++", "+=", ",", "-", "--", "-=", ".", "/", "/=", ":", ";", "<", "<<", "<<=", "<=", "=", "==", "===", "=>", ">", ">=", ">>", ">>=", ">>>", ">>>=", "?", "?.", "??", "[", "]", "^", "^=", "`", "in", "instanceof", "of", "{", "|", "|=", "||", "}"], _29 = ["function"], _30 = ["n"], _31 = ["`"], _32 = ["${"], _33 = ["("], _34 = [":"], _35 = ["{"], _36 = ["$", "[", "_", "as", "async", "from", "get", "set", "target", "{"], _37 = [2], _38 = ["!", "$", "'", "(", "+", "++", "-", "--", "/", ";", "[", "\"", "_", "`", "as", "async", "await", "break", "class", "const", "continue", "debugger", "delete", "do", "export", "false", "for", "from", "function", "get", "if", "import", "let", "new", "null", "return", "set", "super", "switch", "target", "this", "throw", "true", "try", "typeof", "var", "void", "while", "with", "yield", "{", "~"], _39 = ["case"], _40 = ["case", "default", "}"], _41 = [1, 2], _42 = [")", ",", "=", "]", "in", "of", "}"], _43 = [",", ";"], _44 = ["!", "$", "'", "(", "+", "++", "-", "--", "/", ";", "[", "\"", "_", "`", "as", "async", "await", "break", "case", "class", "const", "continue", "debugger", "default", "delete", "do", "false", "for", "from", "function", "get", "if", "import", "let", "new", "null", "return", "set", "super", "switch", "target", "this", "throw", "true", "try", "typeof", "var", "void", "while", "with", "yield", "{", "}", "~"], _45 = [")", ","], _46 = [")", ",", "]", "}"], _47 = ["(", ":"], _48 = ["$", "'", "*", "-", ";", "[", "\"", "_", "as", "async", "await", "break", "case", "catch", "class", "const", "continue", "debugger", "default", "delete", "do", "else", "export", "extends", "false", "finally", "for", "from", "function", "get", "if", "implements", "import", "in", "instanceof", "interface", "new", "null", "package", "private", "protected", "public", "return", "set", "static", "super", "switch", "target", "this", "throw", "true", "try", "typeof", "var", "void", "while", "with", "yield", "}"], _49 = ["["], _50 = [",", "]"], _51 = ["!", "$", "'", "(", "+", "++", ",", "-", "--", "...", "/", "[", "\"", "]", "_", "`", "as", "async", "await", "class", "delete", "false", "from", "function", "get", "import", "new", "null", "set", "super", "target", "this", "true", "typeof", "void", "yield", "{", "~"], _52 = ["}"], _53 = ["'\'", "true"], _54 = [1, 128, 16, 2, 256, 32, 64, 8], _55 = ["$", "_"], _56 = [1, 1025, 16385, 2, 2049, 32769, 4097], _57 = ["!=", "!==", "$", "%", "%=", "&", "&&", "&=", "(", ")", "*", "**", "**=", "*=", "+", "++", "+=", ",", "-", "--", "-=", ".", "/", "/=", ":", ";", "<", "<<", "<<=", "<=", "=", "==", "===", ">", ">=", ">>", ">>=", ">>>", ">>>=", "?", "?.", "??", "[", "]", "^", "^=", "_", "`", "in", "instanceof", "keyword", "of", "{", "|", "|=", "||", "}"], _58 = [1, 1025, 16385, 2, 2049, 32769, 4097, 8], _59 = ["$", "-", "_", "keyword"], _60 = ["'", "'\'", "-", "/", "\"", "_", "true"], _61 = [1, 128, 16, 2, 32, 8], _62 = ["'\'", "-", "/", "\"", "_", "true"], _63 = ["'", "'\'", "-", "/", "_", "true"], _64 = ["from"], _65 = ["!", "$", "'", "(", "+", "++", "-", "--", "/", "[", "\"", "_", "`", "as", "async", "await", "class", "delete", "false", "from", "function", "get", "import", "new", "null", "set", "super", "target", "this", "true", "typeof", "void", "yield", "{", "~"], _66 = ["!=", "!==", "%", "%=", "&", "&&", "&=", ")", "*", "**", "**=", "*=", "+", "++", "+=", ",", "-", "--", "-=", "/", "/=", ":", ";", "<", "<<", "<<=", "<=", "=", "==", "===", ">", ">=", ">>", ">>=", ">>>", ">>>=", "?", "?.", "??", "]", "^", "^=", "in", "instanceof", "of", "{", "|", "|=", "||", "}"], _67 = ["!", "$", "'", "(", "+", "++", "-", "--", "/", ";", "[", "\"", "_", "`", "as", "async", "await", "break", "case", "catch", "class", "const", "continue", "debugger", "default", "delete", "do", "else", "export", "false", "finally", "for", "from", "function", "get", "if", "import", "let", "new", "null", "return", "set", "super", "switch", "target", "this", "throw", "true", "try", "typeof", "var", "void", "while", "with", "yield", "{", "}", "~"], _68 = [")"], _69 = [1, 2, 255, 256], _70 = ["]"], _71 = [";", "from"], _72 = [")", "]"], _73 = ["in", "of"], _74 = ["$", "'", "*", ",", "-", ";", "[", "\"", "_", "as", "async", "await", "break", "case", "catch", "class", "const", "continue", "debugger", "default", "delete", "do", "else", "export", "extends", "false", "finally", "for", "from", "function", "get", "if", "implements", "import", "in", "instanceof", "interface", "new", "null", "package", "private", "protected", "public", "return", "set", "static", "super", "switch", "target", "this", "throw", "true", "try", "typeof", "var", "void", "while", "with", "yield", "}"];

    function $_6(l, e, s) {

        if (_4.includes(l.tx)) {

            e.sp -= 1;

            var sym = s.slice(-1);

            s.splice(-1, 1, { type: "Identifier", value: sym[0], pos });

            return (e.p = 180, s);
        }

        return s;
    }

    function $_7(l, e, s) {

        if (_4.includes(l.tx)) {

            e.sp -= 1;

            return (e.p = 185, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }

    function $_8(l, e, s) {

        if (_4.includes(l.tx)) {

            e.sp -= 1;

            return (e.p = 182, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }

    function $_9(l, e, s) {

        switch (l.tx) {

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async": s = $11(l, e, _s(s, l, e, e.eh, _0)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;
                }

        }

        return s;
    }

    function $_15(l, e, s) {

        switch (l.tx) {

            case "!": s.push($unary_expression(l, e)); break;

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($parenthesized(cp, e));

                if (e.p !== 131) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push(
                    $cover_parenthesized_expression_and_arrow_parameter_list(l, e)
                );

                break;


            case "++": s.push($update_expression(l, e)); break;

            case "+": s.push($unary_expression(l, e)); break;

            case "--": s.push($update_expression(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($unary_expression(cp, e));

                if (e.p !== 126) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case ";": s = $167(l, e, _s(s, l, e, e.eh, _0)); break;

            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($arrow_function(cp, e));

                if (e.p !== 78) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "await": s.push($await_expression(l, e)); break;

            case "break": s.push($break_statement(l, e)); break;

            case "class":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($class_expression(cp, e));

                if (e.p !== 83) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($class_declaration(l, e));

                break;


            case "const": s = $188(l, e, _s(s, l, e, e.eh, _0)); break;

            case "continue": s.push($continue_statement(l, e)); break;

            case "debugger": s.push($debugger_statement(l, e)); break;

            case "delete": s.push($unary_expression(l, e)); break;

            case "do": s.push($iteration_statement(l, e)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "for": s.push($iteration_statement(l, e)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "if": s.push($if_statement(l, e)); break;

            case "import":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($import_meta(cp, e));

                if (e.p !== 95) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($import_call(l, e));

                break;


            case "let": s = $187(l, e, _s(s, l, e, e.eh, _0)); break;

            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($new_expression(cp, e));

                if (e.p !== 91) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($new_target(l, e));

                break;


            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "return": s.push($return_statement(l, e)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($super_property(cp, e));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($super_call(l, e));

                break;


            case "switch": s.push($switch_statement(l, e)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "throw": s.push($throw_statement(l, e)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "try": s.push($try_statement(l, e)); break;

            case "typeof": s.push($unary_expression(l, e)); break;

            case "var": s.push($variable_statement(l, e)); break;

            case "void": s.push($unary_expression(l, e)); break;

            case "while": s.push($iteration_statement(l, e)); break;

            case "with": s.push($with_statement(l, e)); break;

            case "yield": s.push($yield_expression(l, e)); break;

            case "{":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($block(cp, e));

                if (e.p !== 29) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($object_literal(l, e));

                break;


            case "~": s.push($unary_expression(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        return s;
    }

    function $_16(l, e, s) {

        if (l.END || _5.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 1;

            return (e.p = 23, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }

    function $_17(l, e, s) {

        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 1;

            return (e.p = 24, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }

    function $_24(l, e, s) {

        if (_9.includes(l.tx)) {

            e.sp -= 1;

            return (e.p = 108, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }

    function $_28(l, e, s) {

        if (_10.includes(l.tx)) {

            e.sp -= 1;

            return (e.p = 111, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }

    function $_30(l, e, s) {

        if (_11.includes(l.tx)) {

            e.sp -= 1;

            return (e.p = 115, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }

    function $_52(l, e, s) {

        if (_22.includes(l.tx)) {

            e.sp -= 1;

            return (e.p = 126, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }

    function $_55(l, e, s) {

        if (_24.includes(l.tx)) {

            e.sp -= 1;

            return (e.p = 90, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }

    function $_59(l, e, s) {

        switch (l.tx) {

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(": s.push($parenthesized(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_expression(l, e));

                break;


            case "class": s.push($class_expression(l, e)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function": s.push($function_expression(l, e)); break;

            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "import": s.push($import_meta(l, e)); break;

            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($new_target(l, e));

                break;


            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super": s.push($super_property(l, e)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "{": s.push($object_literal(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        return s;
    }

    function $_61(l, e, s) {

        if (_26.includes(l.tx)) {

            e.sp -= 1;

            return (e.p = 92, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }

    function $_63(l, e, s) {

        if (_26.includes(l.tx)) {

            e.sp -= 1;

            return (e.p = 106, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }

    function $_71(l, e, s) {

        if (_26.includes(l.tx)) {

            e.sp -= 1;

            return (e.p = 168, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }

    function $_72(l, e, s) {

        if (_26.includes(l.tx)) {

            e.sp -= 1;

            var sym = s.slice(-1);

            s.splice(-1, 1, { type: "BooleanLiteral", value: sym[0], pos });

            return (e.p = 176, s);
        }

        return s;
    }

    function $_84(l, e, s) {

        if (_26.includes(l.tx)) {

            e.sp -= 1;

            return (e.p = 157, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }

    function $_87(l, e, s) {

        switch (l.tx) {

            case "!": s.push($unary_expression(l, e)); break;

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($parenthesized(cp, e));

                if (e.p !== 131) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push(
                    $cover_parenthesized_expression_and_arrow_parameter_list(l, e)
                );

                break;


            case "++": s.push($update_expression(l, e)); break;

            case "+": s.push($unary_expression(l, e)); break;

            case "--": s.push($update_expression(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($unary_expression(cp, e));

                if (e.p !== 126) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($arrow_function(l, e));

                break;


            case "await": s.push($await_expression(l, e)); break;

            case "class": s.push($class_expression(l, e)); break;

            case "delete": s.push($unary_expression(l, e)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function": s.push($function_expression(l, e)); break;

            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "import":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($import_meta(cp, e));

                if (e.p !== 95) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($import_call(l, e));

                break;


            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($new_expression(cp, e));

                if (e.p !== 91) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($new_target(l, e));

                break;


            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($super_property(cp, e));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($super_call(l, e));

                break;


            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "typeof": s.push($unary_expression(l, e)); break;

            case "void": s.push($unary_expression(l, e)); break;

            case "yield": s.push($yield_expression(l, e)); break;

            case "{": s.push($object_literal(l, e)); break;

            case "~": s.push($unary_expression(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        return s;
    }

    function $_90(l, e, s) {

        if (_26.includes(l.tx)) {

            e.sp -= 1;

            return (e.p = 94, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }

    function $_93(l, e, s) {

        if (_26.includes(l.tx)) {

            e.sp -= 1;

            return (e.p = 97, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }

    function $_100(l, e, s) {

        switch (l.tx) {

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "[": s.push($array_binding_pattern(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async": s = $11(l, e, _s(s, l, e, e.eh, _0)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "{": s.push($object_binding_pattern(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;
                }

        }

        return s;
    }

    function $_103(l, e, s) {

        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 1;

            return (e.p = 27, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }

    function $_104(l, e, s) {

        switch (l.tx) {

            case "!": s.push($unary_expression(l, e)); break;

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($parenthesized(cp, e));

                if (e.p !== 131) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push(
                    $cover_parenthesized_expression_and_arrow_parameter_list(l, e)
                );

                break;


            case "++": s.push($update_expression(l, e)); break;

            case "+": s.push($unary_expression(l, e)); break;

            case "--": s.push($update_expression(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($unary_expression(cp, e));

                if (e.p !== 126) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case ";": s = $167(l, e, _s(s, l, e, e.eh, _0)); break;

            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($arrow_function(l, e));

                break;


            case "await": s.push($await_expression(l, e)); break;

            case "break": s.push($break_statement(l, e)); break;

            case "class": s.push($class_expression(l, e)); break;

            case "continue": s.push($continue_statement(l, e)); break;

            case "debugger": s.push($debugger_statement(l, e)); break;

            case "delete": s.push($unary_expression(l, e)); break;

            case "do": s.push($iteration_statement(l, e)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "for": s.push($iteration_statement(l, e)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function": s.push($function_expression(l, e)); break;

            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "if": s.push($if_statement(l, e)); break;

            case "import":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($import_meta(cp, e));

                if (e.p !== 95) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($import_call(l, e));

                break;


            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($new_expression(cp, e));

                if (e.p !== 91) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($new_target(l, e));

                break;


            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "return": s.push($return_statement(l, e)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($super_property(cp, e));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($super_call(l, e));

                break;


            case "switch": s.push($switch_statement(l, e)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "throw": s.push($throw_statement(l, e)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "try": s.push($try_statement(l, e)); break;

            case "typeof": s.push($unary_expression(l, e)); break;

            case "var": s.push($variable_statement(l, e)); break;

            case "void": s.push($unary_expression(l, e)); break;

            case "while": s.push($iteration_statement(l, e)); break;

            case "with": s.push($with_statement(l, e)); break;

            case "yield": s.push($yield_expression(l, e)); break;

            case "{":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($block(cp, e));

                if (e.p !== 29) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($object_literal(l, e));

                break;


            case "~": s.push($unary_expression(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        return s;
    }

    function $_114(l, e, s) {

        if (l.END || _5.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 1;

            return (e.p = 25, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }

    function $_118(l, e, s) {

        switch (l.tx) {

            case "!": s.push($unary_expression(l, e)); break;

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($parenthesized(cp, e));

                if (e.p !== 131) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push(
                    $cover_parenthesized_expression_and_arrow_parameter_list(l, e)
                );

                break;


            case "++": s.push($update_expression(l, e)); break;

            case "+": s.push($unary_expression(l, e)); break;

            case "--": s.push($update_expression(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($unary_expression(cp, e));

                if (e.p !== 126) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case ";": s = $167(l, e, _s(s, l, e, e.eh, _0)); break;

            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($arrow_function(cp, e));

                if (e.p !== 78) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "await": s.push($await_expression(l, e)); break;

            case "break": s.push($break_statement(l, e)); break;

            case "class":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($class_expression(cp, e));

                if (e.p !== 83) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($class_declaration(l, e));

                break;


            case "const": s = $188(l, e, _s(s, l, e, e.eh, _0)); break;

            case "continue": s.push($continue_statement(l, e)); break;

            case "debugger": s.push($debugger_statement(l, e)); break;

            case "delete": s.push($unary_expression(l, e)); break;

            case "do": s.push($iteration_statement(l, e)); break;

            case "export": s.push($export_declaration(l, e)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "for": s.push($iteration_statement(l, e)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "if": s.push($if_statement(l, e)); break;

            case "import":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($import_meta(cp, e));

                if (e.p !== 95) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($import_call(cp, e));

                if (e.p !== 99) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($import_declaration(l, e));

                break;


            case "let": s = $187(l, e, _s(s, l, e, e.eh, _0)); break;

            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($new_expression(cp, e));

                if (e.p !== 91) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($new_target(l, e));

                break;


            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "return": s.push($return_statement(l, e)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($super_property(cp, e));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($super_call(l, e));

                break;


            case "switch": s.push($switch_statement(l, e)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "throw": s.push($throw_statement(l, e)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "try": s.push($try_statement(l, e)); break;

            case "typeof": s.push($unary_expression(l, e)); break;

            case "var": s.push($variable_statement(l, e)); break;

            case "void": s.push($unary_expression(l, e)); break;

            case "while": s.push($iteration_statement(l, e)); break;

            case "with": s.push($with_statement(l, e)); break;

            case "yield": s.push($yield_expression(l, e)); break;

            case "{":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($block(cp, e));

                if (e.p !== 29) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($object_literal(l, e));

                break;


            case "~": s.push($unary_expression(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        return s;
    }

    function $_120(l, e, s) {

        if (l.END || _38.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 1;

            return (e.p = 5, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }

    function $_122(l, e, s) {

        if (_39.includes(l.tx)) { s.push($case_clause(l, e)); }

        return s;
    }

    function $_130(l, e, s) {

        if (_42.includes(l.tx)) {

            e.sp -= 1;

            return (e.p = 132, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }

    function $_153(l, e, s) {

        switch (l.tx) {

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "-": s.push($numeric_literal(l, e)); break;

            case "[": s.push($computed_property_name(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async": s = $11(l, e, _s(s, l, e, e.eh, _0)); break;

            case "await": s = $262(l, e, _s(s, l, e, e.eh, _0)); break;

            case "break": s = $263(l, e, _s(s, l, e, e.eh, _0)); break;

            case "case": s = $264(l, e, _s(s, l, e, e.eh, _0)); break;

            case "catch": s = $265(l, e, _s(s, l, e, e.eh, _0)); break;

            case "class": s = $266(l, e, _s(s, l, e, e.eh, _0)); break;

            case "const": s = $267(l, e, _s(s, l, e, e.eh, _0)); break;

            case "continue": s = $268(l, e, _s(s, l, e, e.eh, _0)); break;

            case "debugger": s = $269(l, e, _s(s, l, e, e.eh, _0)); break;

            case "default": s = $270(l, e, _s(s, l, e, e.eh, _0)); break;

            case "delete": s = $271(l, e, _s(s, l, e, e.eh, _0)); break;

            case "do": s = $272(l, e, _s(s, l, e, e.eh, _0)); break;

            case "else": s = $273(l, e, _s(s, l, e, e.eh, _0)); break;

            case "export": s = $274(l, e, _s(s, l, e, e.eh, _0)); break;

            case "extends": s = $275(l, e, _s(s, l, e, e.eh, _0)); break;

            case "false": s = $261(l, e, _s(s, l, e, e.eh, _0)); break;

            case "finally": s = $276(l, e, _s(s, l, e, e.eh, _0)); break;

            case "for": s = $277(l, e, _s(s, l, e, e.eh, _0)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function": s = $278(l, e, _s(s, l, e, e.eh, _0)); break;

            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "if": s = $279(l, e, _s(s, l, e, e.eh, _0)); break;

            case "implements": s = $296(l, e, _s(s, l, e, e.eh, _0)); break;

            case "import": s = $280(l, e, _s(s, l, e, e.eh, _0)); break;

            case "in": s = $281(l, e, _s(s, l, e, e.eh, _0)); break;

            case "instanceof": s = $282(l, e, _s(s, l, e, e.eh, _0)); break;

            case "interface": s = $299(l, e, _s(s, l, e, e.eh, _0)); break;

            case "new": s = $283(l, e, _s(s, l, e, e.eh, _0)); break;

            case "null": s = $259(l, e, _s(s, l, e, e.eh, _0)); break;

            case "package": s = $297(l, e, _s(s, l, e, e.eh, _0)); break;

            case "private": s = $300(l, e, _s(s, l, e, e.eh, _0)); break;

            case "protected": s = $298(l, e, _s(s, l, e, e.eh, _0)); break;

            case "public": s = $301(l, e, _s(s, l, e, e.eh, _0)); break;

            case "return": s = $284(l, e, _s(s, l, e, e.eh, _0)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super": s = $285(l, e, _s(s, l, e, e.eh, _0)); break;

            case "switch": s = $286(l, e, _s(s, l, e, e.eh, _0)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $287(l, e, _s(s, l, e, e.eh, _0)); break;

            case "throw": s = $288(l, e, _s(s, l, e, e.eh, _0)); break;

            case "true": s = $260(l, e, _s(s, l, e, e.eh, _0)); break;

            case "try": s = $289(l, e, _s(s, l, e, e.eh, _0)); break;

            case "typeof": s = $290(l, e, _s(s, l, e, e.eh, _0)); break;

            case "var": s = $291(l, e, _s(s, l, e, e.eh, _0)); break;

            case "void": s = $292(l, e, _s(s, l, e, e.eh, _0)); break;

            case "while": s = $293(l, e, _s(s, l, e, e.eh, _0)); break;

            case "with": s = $294(l, e, _s(s, l, e, e.eh, _0)); break;

            case "yield": s = $295(l, e, _s(s, l, e, e.eh, _0)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1: s = $135(l, e, _s(s, l, e, e.eh, _0)); break;
                }

        }

        return s;
    }

    function $_155(l, e, s) {

        if (_47.includes(l.tx)) {

            e.sp -= 1;

            var sym = s.slice(-1);

            s.splice(-1, 1, sym[0].type |= e.cls.PROPERTY_NAME, sym[0]);

            return (e.p = 148, s);
        }

        return s;
    }

    function $_156(l, e, s) {

        if (_47.includes(l.tx)) {

            e.sp -= 1;

            return (e.p = 149, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }

    function $_157(l, e, s) {

        if (_26.includes(l.tx)) {

            e.sp -= 1;

            var sym = s.slice(-1);

            s.splice(-1, 1, { type: "IdentifierName", value: sym[0], pos });

            return (e.p = 181, s);
        }

        return s;
    }

    function $_158(l, e, s) {

        if (_26.includes(l.tx)) {

            e.sp -= 1;

            return (e.p = 183, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }

    function $_159(l, e, s) {

        if (_26.includes(l.tx)) {

            e.sp -= 1;

            return (e.p = 186, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }

    function $_160(l, e, s) {

        if (_26.includes(l.tx)) {

            e.sp -= 1;

            return (e.p = 184, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }

    function $_168(l, e, s) {

        switch (l.tx) {

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(": s.push($parenthesized(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_expression(l, e));

                break;


            case "class": s.push($class_expression(l, e)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function": s.push($function_expression(l, e)); break;

            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "import":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($import_meta(cp, e));

                if (e.p !== 95) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($import_call(l, e));

                break;


            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($new_target(l, e));

                break;


            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($super_property(cp, e));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($super_call(l, e));

                break;


            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "{": s.push($object_literal(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        return s;
    }

    function $_174(l, e, s) {

        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 1;

            return (e.p = 51, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }

    function $_175(l, e, s) {

        switch (l.tx) {

            case "!": s.push($unary_expression(l, e)); break;

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($parenthesized(cp, e));

                if (e.p !== 131) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push(
                    $cover_parenthesized_expression_and_arrow_parameter_list(l, e)
                );

                break;


            case "++": s.push($update_expression(l, e)); break;

            case "+": s.push($unary_expression(l, e)); break;

            case "--": s.push($update_expression(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($unary_expression(cp, e));

                if (e.p !== 126) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "...":

                s.push($argument_list_group_1179_111(l, e));

                break;


            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($arrow_function(l, e));

                break;


            case "await": s.push($await_expression(l, e)); break;

            case "class": s.push($class_expression(l, e)); break;

            case "delete": s.push($unary_expression(l, e)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function": s.push($function_expression(l, e)); break;

            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "import":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($import_meta(cp, e));

                if (e.p !== 95) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($import_call(l, e));

                break;


            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($new_expression(cp, e));

                if (e.p !== 91) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($new_target(l, e));

                break;


            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($super_property(cp, e));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($super_call(l, e));

                break;


            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "typeof": s.push($unary_expression(l, e)); break;

            case "void": s.push($unary_expression(l, e)); break;

            case "yield": s.push($yield_expression(l, e)); break;

            case "{": s.push($object_literal(l, e)); break;

            case "~": s.push($unary_expression(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        return s;
    }

    function $_181(l, e, s) {

        switch (l.tx) {

            case "!": s.push($unary_expression(l, e)); break;

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(": s.push($parenthesized(l, e)); break;

            case "++": s.push($update_expression(l, e)); break;

            case "+": s.push($unary_expression(l, e)); break;

            case "--": s.push($update_expression(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($unary_expression(cp, e));

                if (e.p !== 126) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_expression(l, e));

                break;


            case "await": s.push($await_expression(l, e)); break;

            case "class": s.push($class_expression(l, e)); break;

            case "delete": s.push($unary_expression(l, e)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function": s.push($function_expression(l, e)); break;

            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "import":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($import_meta(cp, e));

                if (e.p !== 95) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($import_call(l, e));

                break;


            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($new_expression(cp, e));

                if (e.p !== 91) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($new_target(l, e));

                break;


            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($super_property(cp, e));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($super_call(l, e));

                break;


            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "typeof": s.push($unary_expression(l, e)); break;

            case "void": s.push($unary_expression(l, e)); break;

            case "{": s.push($object_literal(l, e)); break;

            case "~": s.push($unary_expression(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        return s;
    }

    function $_194(l, e, s) {

        switch (l.tx) {

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "*": s.push($method_definition(l, e)); break;

            case "-": s.push($numeric_literal(l, e)); break;

            case "...": s.push($property_definition(l, e)); break;

            case "[": s.push($computed_property_name(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($method_definition(l, e));

                break;


            case "await": s = $262(l, e, _s(s, l, e, e.eh, _0)); break;

            case "break": s = $263(l, e, _s(s, l, e, e.eh, _0)); break;

            case "case": s = $264(l, e, _s(s, l, e, e.eh, _0)); break;

            case "catch": s = $265(l, e, _s(s, l, e, e.eh, _0)); break;

            case "class": s = $266(l, e, _s(s, l, e, e.eh, _0)); break;

            case "const": s = $267(l, e, _s(s, l, e, e.eh, _0)); break;

            case "continue": s = $268(l, e, _s(s, l, e, e.eh, _0)); break;

            case "debugger": s = $269(l, e, _s(s, l, e, e.eh, _0)); break;

            case "default": s = $270(l, e, _s(s, l, e, e.eh, _0)); break;

            case "delete": s = $271(l, e, _s(s, l, e, e.eh, _0)); break;

            case "do": s = $272(l, e, _s(s, l, e, e.eh, _0)); break;

            case "else": s = $273(l, e, _s(s, l, e, e.eh, _0)); break;

            case "export": s = $274(l, e, _s(s, l, e, e.eh, _0)); break;

            case "extends": s = $275(l, e, _s(s, l, e, e.eh, _0)); break;

            case "false": s = $261(l, e, _s(s, l, e, e.eh, _0)); break;

            case "finally": s = $276(l, e, _s(s, l, e, e.eh, _0)); break;

            case "for": s = $277(l, e, _s(s, l, e, e.eh, _0)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function": s = $278(l, e, _s(s, l, e, e.eh, _0)); break;

            case "get":

                var cp = l.copy(), _sym = null;

                _sym = $12(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($method_definition(l, e));

                break;


            case "if": s = $279(l, e, _s(s, l, e, e.eh, _0)); break;

            case "implements": s = $296(l, e, _s(s, l, e, e.eh, _0)); break;

            case "import": s = $280(l, e, _s(s, l, e, e.eh, _0)); break;

            case "in": s = $281(l, e, _s(s, l, e, e.eh, _0)); break;

            case "instanceof": s = $282(l, e, _s(s, l, e, e.eh, _0)); break;

            case "interface": s = $299(l, e, _s(s, l, e, e.eh, _0)); break;

            case "new": s = $283(l, e, _s(s, l, e, e.eh, _0)); break;

            case "null": s = $259(l, e, _s(s, l, e, e.eh, _0)); break;

            case "package": s = $297(l, e, _s(s, l, e, e.eh, _0)); break;

            case "private": s = $300(l, e, _s(s, l, e, e.eh, _0)); break;

            case "protected": s = $298(l, e, _s(s, l, e, e.eh, _0)); break;

            case "public": s = $301(l, e, _s(s, l, e, e.eh, _0)); break;

            case "return": s = $284(l, e, _s(s, l, e, e.eh, _0)); break;

            case "set":

                var cp = l.copy(), _sym = null;

                _sym = $13(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($method_definition(l, e));

                break;


            case "super": s = $285(l, e, _s(s, l, e, e.eh, _0)); break;

            case "switch": s = $286(l, e, _s(s, l, e, e.eh, _0)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $287(l, e, _s(s, l, e, e.eh, _0)); break;

            case "throw": s = $288(l, e, _s(s, l, e, e.eh, _0)); break;

            case "true": s = $260(l, e, _s(s, l, e, e.eh, _0)); break;

            case "try": s = $289(l, e, _s(s, l, e, e.eh, _0)); break;

            case "typeof": s = $290(l, e, _s(s, l, e, e.eh, _0)); break;

            case "var": s = $291(l, e, _s(s, l, e, e.eh, _0)); break;

            case "void": s = $292(l, e, _s(s, l, e, e.eh, _0)); break;

            case "while": s = $293(l, e, _s(s, l, e, e.eh, _0)); break;

            case "with": s = $294(l, e, _s(s, l, e, e.eh, _0)); break;

            case "yield": s = $295(l, e, _s(s, l, e, e.eh, _0)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1: s = $135(l, e, _s(s, l, e, e.eh, _0)); break;
                }

        }

        return s;
    }

    function $_197(l, e, s) {

        if (_2.includes(l.tx)) {

            e.sp -= 1;

            return (e.p = 147, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }

    function $_204(l, e, s) {

        if (_52.includes(l.tx)) { s.push($template_middle(l, e)); }

        return s;
    }

    function $_207(l, e, s) {

        switch (l.tx) {

            case "'\'": s.push($escaped_sequence(l, e)); break;

            case "true": s = $393(l, e, _s(s, l, e, e.eh, _0)); break;

            default:

                switch (l.ty) {

                    case 32: s = $389(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 2: s = $392(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 256: s = $385(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1: s = $391(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 16: s = $390(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 64: s = $388(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 128: s = $387(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 8: s = $386(l, e, _s(s, l, e, e.eh, _0)); break;
                }

        }

        return s;
    }

    function $_209(l, e, s) {

        if (_53.includes(l.tx) || _54.includes(l.ty)) {

            e.sp -= 1;

            return (e.p = 167, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }

    function $_213(l, e, s) {

        switch (l.tx) {

            case "$":

                var cp = l.copy(), _sym = null;

                _sym = $429(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 208) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s = $430(l, e, _s(s, l, e, e.eh, _0));

                break;


            case "_":

                var cp = l.copy(), _sym = null;

                _sym = $427(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 208) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s = $428(l, e, _s(s, l, e, e.eh, _0));

                break;


            default:

                switch (l.ty) {

                    case 1025: s = $417(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 32769: s = $421(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 4097: s = $416(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 2:

                        var cp = l.copy(), _sym = null;

                        _sym = $413(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 199) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        cp = l.copy();

                        _sym = $414(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 208) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s = $415(l, e, _s(s, l, e, e.eh, _0));

                        break;


                    case 1: s = $424(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 2049: s = $418(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 16385: s = $419(l, e, _s(s, l, e, e.eh, _0)); break;
                }

        }

        return s;
    }

    function $_215(l, e, s) {

        if (_55.includes(l.tx) || _56.includes(l.ty)) {

            e.sp -= 1;

            return (e.p = 190, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }

    function $_217(l, e, s) {

        if (_57.includes(l.tx) || _58.includes(l.ty)) {

            e.sp -= 1;

            return (e.p = 208, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }

    function $_218(l, e, s) {

        if (_59.includes(l.tx) || _58.includes(l.ty)) {

            e.sp -= 1;

            return (e.p = 210, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }

    function $_233(l, e, s) {

        switch (l.tx) {

            case "-": s = $444(l, e, _s(s, l, e, e.eh, _0)); break;

            case "/": s = $442(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'\'": s = $443(l, e, _s(s, l, e, e.eh, _0)); break;

            case "_": s = $445(l, e, _s(s, l, e, e.eh, _0)); break;

            case "true": s = $446(l, e, _s(s, l, e, e.eh, _0)); break;

            default:

                switch (l.ty) {

                    case 32: s = $448(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 2: s = $450(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1: s = $449(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 16: s = $447(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 128: s = $451(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 8: s = $438(l, e, _s(s, l, e, e.eh, _0)); break;
                }

        }

        return s;
    }

    function $_234(l, e, s) {

        if (_60.includes(l.tx) || _61.includes(l.ty)) {

            e.sp -= 1;

            return (e.p = 200, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }

    function $_237(l, e, s) {

        if (_60.includes(l.tx) || _61.includes(l.ty)) {

            e.sp -= 1;

            return (e.p = 204, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }

    function $_247(l, e, s) {

        if (_64.includes(l.tx)) { s.push($from_clause(l, e)); }

        return s;
    }

    function $_249(l, e, s) {

        if (l.END || _38.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 2;

            var sym = s.slice(-2);

            s.splice(
                -2,
                2,
                {

                    type: "ExportDeclaration",

                    nodes: [sym[1]],

                    DEFAULT: false,

                    pos
                }
            );

            return (e.p = 16, s);
        }

        return s;
    }

    function $_253(l, e, s) {

        if (_65.includes(l.tx) || _41.includes(l.ty)) {

            e.sp -= 1;

            return (e.p = 109, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }

    function $_254(l, e, s) {

        if (_22.includes(l.tx)) {

            e.sp -= 2;

            var sym = s.slice(-2);

            s.splice(
                -2,
                2,
                {

                    type: "PostExpression",

                    symbol: sym[1],

                    nodes: [sym[0]],

                    pos
                }
            );

            return (e.p = 127, s);
        }

        return s;
    }

    function $_258(l, e, s) {

        if (_22.includes(l.tx)) {

            e.sp -= 2;

            var sym = s.slice(-2);

            s.splice(
                -2,
                2,
                {

                    type: "UnaryExpression",

                    symbol: sym[0],

                    nodes: [sym[1]],

                    pos
                }
            );

            return (e.p = 126, s);
        }

        return s;
    }

    function $_261(l, e, s) {

        switch (l.tx) {

            case "!": s.push($unary_expression(l, e)); break;

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($parenthesized(cp, e));

                if (e.p !== 131) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push(
                    $cover_parenthesized_expression_and_arrow_parameter_list(l, e)
                );

                break;


            case "++": s.push($update_expression(l, e)); break;

            case "+": s.push($unary_expression(l, e)); break;

            case ",": s = $358(l, e, _s(s, l, e, e.eh, _0)); break;

            case "--": s.push($update_expression(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($unary_expression(cp, e));

                if (e.p !== 126) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "...": s.push($spread_element(l, e)); break;

            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($arrow_function(l, e));

                break;


            case "await": s.push($await_expression(l, e)); break;

            case "class": s.push($class_expression(l, e)); break;

            case "delete": s.push($unary_expression(l, e)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function": s.push($function_expression(l, e)); break;

            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "import":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($import_meta(cp, e));

                if (e.p !== 95) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($import_call(l, e));

                break;


            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($new_expression(cp, e));

                if (e.p !== 91) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($new_target(l, e));

                break;


            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($super_property(cp, e));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($super_call(l, e));

                break;


            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "typeof": s.push($unary_expression(l, e)); break;

            case "void": s.push($unary_expression(l, e)); break;

            case "yield": s.push($yield_expression(l, e)); break;

            case "{": s.push($object_literal(l, e)); break;

            case "~": s.push($unary_expression(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        return s;
    }

    function $_262(l, e, s) {

        switch (l.tx) {

            case "!": s.push($unary_expression(l, e)); break;

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($parenthesized(cp, e));

                if (e.p !== 131) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push(
                    $cover_parenthesized_expression_and_arrow_parameter_list(l, e)
                );

                break;


            case "++": s.push($update_expression(l, e)); break;

            case "+": s.push($unary_expression(l, e)); break;

            case "--": s.push($update_expression(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($unary_expression(cp, e));

                if (e.p !== 126) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "...": s.push($spread_element(l, e)); break;

            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($arrow_function(l, e));

                break;


            case "await": s.push($await_expression(l, e)); break;

            case "class": s.push($class_expression(l, e)); break;

            case "delete": s.push($unary_expression(l, e)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function": s.push($function_expression(l, e)); break;

            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "import":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($import_meta(cp, e));

                if (e.p !== 95) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($import_call(l, e));

                break;


            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($new_expression(cp, e));

                if (e.p !== 91) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($new_target(l, e));

                break;


            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($super_property(cp, e));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($super_call(l, e));

                break;


            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "typeof": s.push($unary_expression(l, e)); break;

            case "void": s.push($unary_expression(l, e)); break;

            case "yield": s.push($yield_expression(l, e)); break;

            case "{": s.push($object_literal(l, e)); break;

            case "~": s.push($unary_expression(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        return s;
    }

    function $_264(l, e, s) {

        if (_50.includes(l.tx)) {

            e.sp -= 1;

            var sym = s.slice(-1);

            s.splice(-1, 1, [sym[0]]);

            return (e.p = 154, s);
        }

        return s;
    }

    function $_265(l, e, s) {

        if (_22.includes(l.tx)) {

            e.sp -= 2;

            var sym = s.slice(-2);

            s.splice(
                -2,
                2,
                {

                    type: "PreExpression",

                    symbol: sym[0],

                    nodes: [sym[1]],

                    pos
                }
            );

            return (e.p = 127, s);
        }

        return s;
    }

    function $_266(l, e, s) {

        if (_66.includes(l.tx)) {

            e.sp -= 2;

            var sym = s.slice(-2);

            s.splice(
                -2,
                2,
                {

                    type: "OptionalMemberExpression",

                    nodes: [sym[0], sym[1]],

                    pos,

                    COMPUTED: false
                }
            );

            return (e.p = 104, s);
        }

        return s;
    }

    function $_277(l, e, s) {

        if (_26.includes(l.tx)) {

            e.sp -= 2;

            var sym = s.slice(-2);

            s.splice(
                -2,
                2,
                {

                    quote_type: sym[1],

                    type: "StringLiteral",

                    value: sym[0] || "",

                    pos
                }
            );

            return (e.p = 169, s);
        }

        return s;
    }

    function $_323(l, e, s) {

        if (_64.includes(l.tx)) {

            e.sp -= 1;

            var sym = s.slice(-1);

            s.splice(-1, 1, { type: "ImportClause", nodes: [sym[0]], pos });

            return (e.p = 7, s);
        }

        return s;
    }

    function $_336(l, e, s) {

        if (_43.includes(l.tx)) {

            e.sp -= 2;

            var sym = s.slice(-2);

            s.splice(
                -2,
                2,
                {

                    type: "BindingExpression",

                    symbol: "=",

                    nodes: [sym[0], sym[1]],

                    pos
                }
            );

            return (e.p = 60, s);
        }

        return s;
    }

    function $_344(l, e, s) {

        if (_43.includes(l.tx)) {

            e.sp -= 2;

            var sym = s.slice(-2);

            s.splice(
                -2,
                2,
                {

                    type: "BindingExpression",

                    symbol: "=",

                    nodes: [sym[0], sym[1]],

                    pos
                }
            );

            return (e.p = 65, s);
        }

        return s;
    }

    function $_361(l, e, s) {

        if (_26.includes(l.tx)) {

            e.sp -= 2;

            return (e.p = 105, (s.splice(-2, 2, s[s.length - 1]), s));
        }

        return s;
    }

    function $_375(l, e, s) {

        if (_57.includes(l.tx) || _58.includes(l.ty)) {

            e.sp -= 2;

            var sym = s.slice(-2);

            s.splice(-2, 2, sym[0] + sym[1]);

            return (e.p = 208, s);
        }

        return s;
    }

    function $_377(l, e, s) {

        if (_59.includes(l.tx) || _58.includes(l.ty)) {

            e.sp -= 2;

            var sym = s.slice(-2);

            s.splice(-2, 2, sym[0] + sym[1]);

            return (e.p = 210, s);
        }

        return s;
    }

    function $_404(l, e, s) {

        if (_17.includes(l.tx)) {

            e.sp -= 3;

            var sym = s.slice(-3);

            s.splice(
                -3,
                3,
                {

                    type: "EqualityExpression",

                    symbol: sym[1],

                    nodes: [sym[0], sym[2]],

                    pos
                }
            );

            return (e.p = 120, s);
        }

        return s;
    }

    function $_405(l, e, s) {

        if (_18.includes(l.tx)) {

            e.sp -= 3;

            var sym = s.slice(-3);

            s.splice(
                -3,
                3,
                {

                    type: "RelationalExpression",

                    symbol: sym[1],

                    nodes: [sym[0], sym[2]],

                    pos
                }
            );

            return (e.p = 121, s);
        }

        return s;
    }

    function $_408(l, e, s) {

        if (_19.includes(l.tx)) {

            e.sp -= 3;

            var sym = s.slice(-3);

            s.splice(
                -3,
                3,
                {

                    type: "ShiftExpression",

                    symbol: sym[1],

                    nodes: [sym[0], sym[2]],

                    pos
                }
            );

            return (e.p = 122, s);
        }

        return s;
    }

    function $_409(l, e, s) {

        if (_20.includes(l.tx)) {

            e.sp -= 3;

            var sym = s.slice(-3);

            s.splice(
                -3,
                3,
                {

                    type: "AdditiveExpression",

                    symbol: sym[1],

                    nodes: [sym[0], sym[2]],

                    pos
                }
            );

            return (e.p = 123, s);
        }

        return s;
    }

    function $_410(l, e, s) {

        if (_21.includes(l.tx)) {

            e.sp -= 3;

            var sym = s.slice(-3);

            s.splice(
                -3,
                3,
                {

                    type: "MultiplicativeExpression",

                    symbol: sym[1],

                    nodes: [sym[0], sym[2]],

                    pos
                }
            );

            return (e.p = 124, s);
        }

        return s;
    }

    function $_413(l, e, s) {

        if (_50.includes(l.tx)) {

            e.sp -= 2;

            var sym = s.slice(-2);

            s.splice(-2, 2, [sym[0], sym[1]]);

            return (e.p = 154, s);
        }

        return s;
    }

    function $_416(l, e, s) {

        if (l.END || _38.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 3;

            var sym = s.slice(-3);

            s.splice(
                -3,
                3,
                {

                    type: "ExportDeclaration",

                    nodes: [sym[2]],

                    DEFAULT: true,

                    pos
                }
            );

            return (e.p = 16, s);
        }

        return s;
    }

    function $_504(l, e, s) {

        if (_42.includes(l.tx)) {

            e.sp -= 3;

            var sym = s.slice(-3);

            s.splice(-3, 3, { type: "ArrayBinding", nodes: [sym[1]], pos });

            return (e.p = 134, s);
        }

        return s;
    }

    function $_507(l, e, s) {

        if (_72.includes(l.tx)) {

            e.sp -= 2;

            var sym = s.slice(-2);

            s.splice(-2, 2, { type: "Spread", nodes: [sym[1]], pos });

            return (e.p = 142, s);
        }

        return s;
    }

    function $_519(l, e, s) {

        if (_73.includes(l.tx)) {

            e.sp -= 1;

            return (e.p = 35, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }

    function $_546(l, e, s) {

        if (_50.includes(l.tx)) {

            e.sp -= 3;

            var sym = s.slice(-3);

            s.splice(-3, 3, [...sym[0], sym[2]]);

            return (e.p = 154, s);
        }

        return s;
    }

    function $_602(l, e, s) {

        if (_64.includes(l.tx)) {

            e.sp -= 3;

            var sym = s.slice(-3);

            s.splice(
                -3,
                3,
                { type: "ImportClause", nodes: [sym[0], sym[2]], pos }
            );

            return (e.p = 7, s);
        }

        return s;
    }

    function $_619(l, e, s) {

        if (_73.includes(l.tx)) {

            e.sp -= 1;

            return (e.p = 38, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }

    function $_639(l, e, s) {

        if (_50.includes(l.tx)) {

            e.sp -= 4;

            var sym = s.slice(-4);

            s.splice(-4, 4, [...sym[0], sym[2], sym[3]]);

            return (e.p = 154, s);
        }

        return s;
    }

    function $_688(l, e, s) {

        if (_68.includes(l.tx)) {

            e.sp -= 1;

            return (e.p = 55, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }

    function $_697(l, e, s) {

        if (_42.includes(l.tx)) {

            e.sp -= 5;

            var sym = s.slice(-5);

            s.splice(
                -5,
                5,
                { type: "ArrayBinding", nodes: [...sym[1], sym[3]], pos }
            );

            return (e.p = 134, s);
        }

        return s;
    }

    function $javascript(l, e) {

        if (e.FAILED) return;

        const $1_ = $start(l, e);

        e.p = (e.FAILED) ? -1 : 0;

        return (e.IS_MODULE = false, $1_);
    }
    function $start(l, e) {

        if (e.FAILED) return;

        const $1_ = $module(l, e);

        e.p = (e.FAILED) ? -1 : 1;

        return ({

            type: (e.IS_MODULE) ? "Module" : "Script",

            nodes: $1_,

            pos
        });
    }
    function $module(l, e) {

        if (e.FAILED) return;

        const $1_ = $module_body(l, e);

        e.p = (e.FAILED) ? -1 : 2;

        return $1_;
    }
    ;
    ;
    ;
    function $import_declaration(l, e) {

        _(l, e, e.eh, [8, 256, 8, 256, 512], "import");

        const tx = l.tx, ty = l.ty;

        if (tx == '"' || tx == "'") {

            if (e.FAILED) return;

            const $2_ = $module_specifier(l, e);

            _(l, e, e.eh, [8, 256, 8, 256, 512], ";");

            e.p = (e.FAILED) ? -1 : 6;

            return ({ type: "ImportDeclaration", nodes: [null, $2_], pos });
        }

        if (ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from" || tx == "*" || tx == "{") {

            if (e.FAILED) return;

            const $2_ = $import_clause(l, e);

            if (e.FAILED) return;

            const $3_ = $from_clause(l, e);

            _(l, e, e.eh, [8, 256, 8, 256, 512], ";");

            e.p = (e.FAILED) ? -1 : 6;

            return ({ type: "ImportDeclaration", nodes: [$2_, $3_], pos });
        }

        e.FAILED = true;
    }
    function $import_clause(l, e) {

        const tx = l.tx, ty = l.ty;

        if (tx == "*") {

            if (e.FAILED) return;

            const $1_ = $name_space_import(l, e);

            e.p = (e.FAILED) ? -1 : 7;

            return ({ type: "ImportClause", nodes: [$1_], pos });
        }

        if (tx == "{") {

            if (e.FAILED) return;

            const $1_ = $named_imports(l, e);

            e.p = (e.FAILED) ? -1 : 7;

            return ({ type: "ImportClause", nodes: [$1_], pos });
        }

        if (ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from") {

            if (e.FAILED) return;

            const $1_ = $imported_default_binding(l, e);

            const tx = l.tx;

            if (tx == ",") {

                _(l, e, e.eh, [8, 256, 8, 256, 512], ",");

                const tx = l.tx;

                if (tx == "*") {

                    if (e.FAILED) return;

                    const $3_ = $name_space_import(l, e);

                    e.p = (e.FAILED) ? -1 : 7;

                    return ({ type: "ImportClause", nodes: [$1_, $3_], pos });
                }

                if (tx == "{") {

                    if (e.FAILED) return;

                    const $3_ = $named_imports(l, e);

                    e.p = (e.FAILED) ? -1 : 7;

                    return ({ type: "ImportClause", nodes: [$1_, $3_], pos });
                }
            }

            e.p = (e.FAILED) ? -1 : 7;

            return ({ type: "ImportClause", nodes: [$1_], pos });
        }

        e.FAILED = true;
    }
    function $imported_default_binding(l, e) {

        if (e.FAILED) return;

        const $1_ = $imported_binding(l, e);

        e.p = (e.FAILED) ? -1 : 8;

        return ($1_.type = "IdentifierDefault", $1_);
    }
    function $name_space_import(l, e) {

        _(l, e, e.eh, [8, 256, 8, 256, 512], "*");

        _(l, e, e.eh, [8, 256, 8, 256, 512], "as");

        if (e.FAILED) return;

        const $3_ = $imported_binding(l, e);

        e.p = (e.FAILED) ? -1 : 9;

        return ({ type: "NameSpaceImport", nodes: [$3_], pos });
    }
    ;
    function $named_imports(l, e) {

        _(l, e, e.eh, [8, 256, 8, 256, 512], "{");

        const tx = l.tx, ty = l.ty;

        if (tx == ",") {

            _(l, e, e.eh, [8, 256, 8, 256, 512], ",");

            _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

            e.p = (e.FAILED) ? -1 : 11;

            return ({ type: "NamedImports", nodes: null || [], pos });
        }

        if (tx == "}") {

            _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

            e.p = (e.FAILED) ? -1 : 11;

            return ({ type: "NamedImports", nodes: null || [], pos });
        }

        if (ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from") {

            if (e.FAILED) return;

            const $2_ = $named_imports_HC_listbody1_101(l, e);

            const tx = l.tx;

            if (tx == ",") {

                _(l, e, e.eh, [8, 256, 8, 256, 512], ",");

                _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                e.p = (e.FAILED) ? -1 : 11;

                return ({ type: "NamedImports", nodes: $2_ || [], pos });
            }

            if (tx == "}") {

                _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                e.p = (e.FAILED) ? -1 : 11;

                return ({ type: "NamedImports", nodes: $2_ || [], pos });
            }
        }

        e.FAILED = true;
    }
    function $from_clause(l, e) {

        _(l, e, e.eh, [8, 256, 8, 256, 512], "from");

        if (e.FAILED) return;

        const $2_ = $module_specifier(l, e);

        e.p = (e.FAILED) ? -1 : 12;

        return ({ type: "FromClause", nodes: [$2_], pos });
    }
    ;
    function $module_specifier(l, e) {

        if (e.FAILED) return;

        const $1_ = $string_literal(l, e);

        e.p = (e.FAILED) ? -1 : 14;

        return $1_;
    }
    function $imported_binding(l, e) {

        if (e.FAILED) return;

        const $1_ = $identifier(l, e);

        e.p = (e.FAILED) ? -1 : 15;

        return ($1_.type = "IdentifierModule", $1_);
    }
    ;
    ;
    function $export_clause(l, e) {

        _(l, e, e.eh, [8, 256, 8, 256, 512], "{");

        const tx = l.tx, ty = l.ty;

        if (tx == ",") {

            _(l, e, e.eh, [8, 256, 8, 256, 512], ",");

            _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

            e.p = (e.FAILED) ? -1 : 18;

            return ({ type: "ExportClause", nodes: null || [], pos });
        }

        if (tx == "}") {

            _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

            e.p = (e.FAILED) ? -1 : 18;

            return ({ type: "ExportClause", nodes: null || [], pos });
        }

        if (ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from") {

            if (e.FAILED) return;

            const $2_ = $export_clause_HC_listbody1_102(l, e);

            const tx = l.tx;

            if (tx == ",") {

                _(l, e, e.eh, [8, 256, 8, 256, 512], ",");

                _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                e.p = (e.FAILED) ? -1 : 18;

                return ({ type: "ExportClause", nodes: $2_ || [], pos });
            }

            if (tx == "}") {

                _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                e.p = (e.FAILED) ? -1 : 18;

                return ({ type: "ExportClause", nodes: $2_ || [], pos });
            }
        }

        e.FAILED = true;
    }
    function $export_specifier(l, e) {

        if (e.FAILED) return;

        const $1_ = $identifier(l, e);

        const tx = l.tx;

        if (tx == "as") {

            _(l, e, e.eh, [8, 256, 8, 256, 512], "as");

            if (e.FAILED) return;

            const $3_ = $identifier(l, e);

            e.p = (e.FAILED) ? -1 : 19;

            return ({ type: "Specifier", nodes: [$1_, $3_], pos });
        }

        e.p = (e.FAILED) ? -1 : 19;

        return ({ type: "Specifier", nodes: [$1_], pos });
    }
    function $script(l, e) {

        if (e.FAILED) return;

        const $1_ = $script_body(l, e);

        e.p = (e.FAILED) ? -1 : 20;

        return ({ type: "Script", nodes: $1_, pos });
    }
    function $script_body(l, e) {

        if (e.FAILED) return;

        const $1_ = $statement_list(l, e);

        e.p = (e.FAILED) ? -1 : 21;

        return $1_;
    }
    ;
    ;
    ;
    function $declaration(l, e) {

        const tx = l.tx;

        if (tx == "class") {

            if (e.FAILED) return;

            const $1_ = $class_declaration(l, e);

            e.p = (e.FAILED) ? -1 : 25;

            return $1_;
        }

        if (tx == "async" || tx == "function") {

            if (e.FAILED) return;

            const $1_ = $hoistable_declaration(l, e);

            e.p = (e.FAILED) ? -1 : 25;

            return $1_;
        }

        if (tx == "let" || tx == "const") {

            if (e.FAILED) return;

            const $1_ = $lexical_declaration(l, e);

            e.p = (e.FAILED) ? -1 : 25;

            return $1_;
        }

        e.FAILED = true;
    }
    function $hoistable_declaration(l, e) {

        if (e.FAILED) return;

        const $1_ = $function_declaration(l, e);

        e.p = (e.FAILED) ? -1 : 26;

        return $1_;
    }
    function $breakable_statement(l, e) {

        const tx = l.tx;

        if (tx == "switch") {

            if (e.FAILED) return;

            const $1_ = $switch_statement(l, e);

            e.p = (e.FAILED) ? -1 : 27;

            return $1_;
        }

        if (tx == "do" || tx == "while" || tx == "for") {

            if (e.FAILED) return;

            const $1_ = $iteration_statement(l, e);

            e.p = (e.FAILED) ? -1 : 27;

            return $1_;
        }

        e.FAILED = true;
    }
    function $block_statement(l, e) {

        if (e.FAILED) return;

        const $1_ = $block(l, e);

        e.p = (e.FAILED) ? -1 : 28;

        return $1_;
    }
    function $block(l, e) {

        _(l, e, e.eh, [8, 256, 8, 256, 512], "{");

        const tx = l.tx, ty = l.ty;

        if (tx == "}") {

            _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

            e.p = (e.FAILED) ? -1 : 29;

            return ({ type: "BlockStatement", nodes: null || [], pos });
        }

        if (tx == "{" || tx == "delete" || tx == "void" || tx == "typeof" || tx == "+" || tx == "-" || tx == "~" || tx == "!" || tx == "++" || tx == "--" || tx == "new" || tx == "this" || ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from" || tx == "true" || tx == "false" || tx == "null" || tx == '"' || tx == "'" || ty == 1 || tx == "[" || tx == "function" || tx == "class" || tx == "/" || tx == "`" || tx == "(" || tx == "super" || tx == "import" || tx == "await" || tx == "yield" || tx == "var" || tx == ";" || tx == "if" || tx == "do" || tx == "while" || tx == "for" || tx == "switch" || tx == "continue" || tx == "break" || tx == "return" || tx == "with" || tx == "throw" || tx == "try" || tx == "debugger" || tx == "let" || tx == "const") {

            if (e.FAILED) return;

            const $2_ = $statement_list(l, e);

            _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

            e.p = (e.FAILED) ? -1 : 29;

            return ({ type: "BlockStatement", nodes: $2_ || [], pos });
        }

        e.FAILED = true;
    }
    function $empty_statement(l, e) {

        _(l, e, e.eh, [8, 256, 8, 256, 512], ";");

        e.p = (e.FAILED) ? -1 : 30;

        return ({ type: "EmptyStatement", pos });
    }
    function $expression_statement(l, e) {

        if (e.FAILED) return;

        const $1_ = $expression(l, e);

        _(l, e, e.eh, [8, 256, 8, 256, 512], ";");

        e.p = (e.FAILED) ? -1 : 31;

        return ({ type: "ExpressionStatement", nodes: [$1_], pos });
    }
    function $if_statement_group_163_103(l, e) {

        _(l, e, e.eh, [8, 256, 8, 256, 512], "else");

        if (e.FAILED) return;

        const $2_ = $statement(l, e);

        e.p = (e.FAILED) ? -1 : 32;

        return $2_;
    }
    function $if_statement(l, e) {

        _(l, e, e.eh, [8, 256, 8, 256, 512], "if");

        _(l, e, e.eh, [8, 256, 8, 256, 512], "(");

        if (e.FAILED) return;

        const $3_ = $expression(l, e);

        _(l, e, e.eh, [8, 256, 8, 256, 512], ")");

        if (e.FAILED) return;

        const $5_ = $statement(l, e);

        const tx = l.tx;

        if (tx == "else") {

            if (e.FAILED) return;

            const $6_ = $if_statement_group_163_103(l, e);

            e.p = (e.FAILED) ? -1 : 33;

            return ({ type: "IfStatement", nodes: [$3_, $5_, $6_], pos });
        }

        e.p = (e.FAILED) ? -1 : 33;

        return ({ type: "IfStatement", nodes: [$3_, $5_, null], pos });
    }
    function $iteration_statement_group_168_104(l, e) {

        const tx = l.tx, ty = l.ty;

        if (tx == "var") {

            _(l, e, e.eh, [8, 256, 8, 256, 512], "var");

            if (e.FAILED) return;

            const $2_ = $variable_declaration_list(l, e);

            e.p = (e.FAILED) ? -1 : 34;

            return ({ type: "VariableDeclaration", nodes: $2_, pos });
        }

        if (tx == "delete" || tx == "void" || tx == "typeof" || tx == "+" || tx == "-" || tx == "~" || tx == "!" || tx == "++" || tx == "--" || tx == "new" || tx == "this" || ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from" || tx == "true" || tx == "false" || tx == "null" || tx == '"' || tx == "'" || ty == 1 || tx == "[" || tx == "{" || tx == "function" || tx == "class" || tx == "/" || tx == "`" || tx == "(" || tx == "super" || tx == "import" || tx == "await" || tx == "yield") {

            if (e.FAILED) return;

            const $1_ = $expression(l, e);

            e.p = (e.FAILED) ? -1 : 34;

            return $1_;
        }

        e.FAILED = true;
    }
    function $iteration_statement_group_073_105(l, e) {

        const tx = l.tx, ty = l.ty;

        if (tx == "var") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "var");

            if (e.FAILED) return;

            $for_binding(l, e);

            e.p = (e.FAILED) ? -1 : 35;

            return ({ type: "VariableDeclaration", nodes: [$1_], pos });
        }

        if (tx == "let" || tx == "const") {

            if (e.FAILED) return;

            const $1_ = $for_declaration(l, e);

            e.p = (e.FAILED) ? -1 : 35;

            return $1_;
        }

        if (tx == "new" || tx == "this" || ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from" || tx == "true" || tx == "false" || tx == "null" || tx == '"' || tx == "'" || tx == "-" || ty == 1 || tx == "[" || tx == "{" || tx == "function" || tx == "class" || tx == "/" || tx == "`" || tx == "(" || tx == "super" || tx == "import") {

            if (e.FAILED) return;

            const $1_ = $left_hand_side_expression(l, e);

            e.p = (e.FAILED) ? -1 : 35;

            return $1_;
        }

        e.FAILED = true;
    }
    ;
    function $for_declaration(l, e) {

        if (e.FAILED) return;

        const $1_ = $let_or_const(l, e);

        if (e.FAILED) return;

        const $2_ = $for_binding(l, e);

        e.p = (e.FAILED) ? -1 : 37;

        return ({ type: "LexicalBinding", nodes: [$2_], symbol: $1_, pos });
    }
    function $for_binding(l, e) {

        const tx = l.tx, ty = l.ty;

        if (tx == "{" || tx == "[") {

            if (e.FAILED) return;

            const $1_ = $binding_pattern(l, e);

            e.p = (e.FAILED) ? -1 : 38;

            return $1_;
        }

        if (ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from") {

            if (e.FAILED) return;

            const $1_ = $binding_identifier(l, e);

            e.p = (e.FAILED) ? -1 : 38;

            return $1_;
        }

        e.FAILED = true;
    }
    function $continue_statement(l, e) {

        _(l, e, e.eh, [8, 256, 8, 256, 512], "continue");

        const tx = l.tx, ty = l.ty;

        if (tx == ";") {

            _(l, e, e.eh, [8, 256, 8, 256, 512], ";");

            e.p = (e.FAILED) ? -1 : 39;

            return ({ type: "ContinueStatement", nodes: null ? [null] : [], pos });
        }

        if (ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from") {

            if (e.FAILED) return;

            const $2_ = $label_identifier(l, e);

            _(l, e, e.eh, [8, 256, 8, 256, 512], ";");

            e.p = (e.FAILED) ? -1 : 39;

            return ({ type: "ContinueStatement", nodes: $2_ ? [$2_] : [], pos });
        }

        e.FAILED = true;
    }
    function $break_statement(l, e) {

        _(l, e, e.eh, [8, 256, 8, 256, 512], "break");

        const tx = l.tx, ty = l.ty;

        if (tx == ";") {

            _(l, e, e.eh, [8, 256, 8, 256, 512], ";");

            e.p = (e.FAILED) ? -1 : 40;

            return ({ type: "BreakStatement", nodes: [null], pos });
        }

        if (ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from") {

            if (e.FAILED) return;

            const $2_ = $label_identifier(l, e);

            _(l, e, e.eh, [8, 256, 8, 256, 512], ";");

            e.p = (e.FAILED) ? -1 : 40;

            return ({ type: "BreakStatement", nodes: [$2_], pos });
        }

        e.FAILED = true;
    }
    function $return_statement(l, e) {

        _(l, e, e.eh, [8, 256, 8, 256, 512], "return");

        const tx = l.tx, ty = l.ty;

        if (tx == ";") {

            _(l, e, e.eh, [8, 256, 8, 256, 512], ";");

            e.p = (e.FAILED) ? -1 : 41;

            return ({ type: "ReturnStatement", nodes: [], pos });
        }

        if (tx == "delete" || tx == "void" || tx == "typeof" || tx == "+" || tx == "-" || tx == "~" || tx == "!" || tx == "++" || tx == "--" || tx == "new" || tx == "this" || ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from" || tx == "true" || tx == "false" || tx == "null" || tx == '"' || tx == "'" || ty == 1 || tx == "[" || tx == "{" || tx == "function" || tx == "class" || tx == "/" || tx == "`" || tx == "(" || tx == "super" || tx == "import" || tx == "await" || tx == "yield") {

            if (e.FAILED) return;

            const $2_ = $expression(l, e);

            _(l, e, e.eh, [8, 256, 8, 256, 512], ";");

            e.p = (e.FAILED) ? -1 : 41;

            return ({ type: "ReturnStatement", nodes: [$2_], pos });
        }

        e.FAILED = true;
    }
    function $throw_statement(l, e) {

        _(l, e, e.eh, [8, 256, 8, 256, 512], "throw");

        if (e.FAILED) return;

        const $2_ = $expression(l, e);

        _(l, e, e.eh, [8, 256, 8, 256, 512], ";");

        e.p = (e.FAILED) ? -1 : 42;

        return ({ type: "ThrowStatement", nodes: [$2_], pos });
    }
    function $with_statement(l, e) {

        _(l, e, e.eh, [8, 256, 8, 256, 512], "with");

        _(l, e, e.eh, [8, 256, 8, 256, 512], "(");

        if (e.FAILED) return;

        const $3_ = $expression(l, e);

        _(l, e, e.eh, [8, 256, 8, 256, 512], ")");

        if (e.FAILED) return;

        const $5_ = $statement(l, e);

        e.p = (e.FAILED) ? -1 : 43;

        return ({ type: "WithStatement", nodes: [$3_, $5_], pos });
    }
    function $switch_statement(l, e) {

        _(l, e, e.eh, [8, 256, 8, 256, 512], "switch");

        _(l, e, e.eh, [8, 256, 8, 256, 512], "(");

        if (e.FAILED) return;

        const $3_ = $expression(l, e);

        _(l, e, e.eh, [8, 256, 8, 256, 512], ")");

        if (e.FAILED) return;

        const $5_ = $case_block(l, e);

        e.p = (e.FAILED) ? -1 : 44;

        return ({ type: "SwitchStatement", nodes: [$3_, $5_], pos });
    }
    function $case_block(l, e) {

        _(l, e, e.eh, [8, 256, 8, 256, 512], "{");

        const tx = l.tx;

        if (tx == "case") {

            if (e.FAILED) return;

            const $2_ = $case_clauses(l, e);

            const tx = l.tx;

            if (tx == "default") {

                if (e.FAILED) return;

                const $3_ = $default_clause(l, e);

                const tx = l.tx;

                if (tx == "case") {

                    if (e.FAILED) return;

                    const $4_ = $case_clauses(l, e);

                    _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                    e.p = (e.FAILED) ? -1 : 45;

                    return ({ type: "CaseBlock", nodes: [...$2_, $3_, ...$4_], pos });
                }

                if (tx == "}") {

                    _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                    e.p = (e.FAILED) ? -1 : 45;

                    return ({ type: "CaseBlock", nodes: [...$2_, $3_], pos });
                }
            }

            if (tx == "case") {

                if (e.FAILED) return;

                const $3_ = $case_clauses(l, e);

                _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                e.p = (e.FAILED) ? -1 : 45;

                return ({ type: "CaseBlock", nodes: [...$2_, ...$3_], pos });
            }

            if (tx == "}") {

                _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                e.p = (e.FAILED) ? -1 : 45;

                return ({ type: "CaseBlock", nodes: [...$2_], pos });
            }
        }

        if (tx == "default") {

            if (e.FAILED) return;

            const $2_ = $default_clause(l, e);

            const tx = l.tx;

            if (tx == "case") {

                if (e.FAILED) return;

                const $3_ = $case_clauses(l, e);

                _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                e.p = (e.FAILED) ? -1 : 45;

                return ({ type: "CaseBlock", nodes: [$2_, ...$3_], pos });
            }

            if (tx == "}") {

                _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                e.p = (e.FAILED) ? -1 : 45;

                return ({ type: "CaseBlock", nodes: [$2_], pos });
            }
        }

        if (tx == "}") {

            _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

            e.p = (e.FAILED) ? -1 : 45;

            return ({ type: "CaseBlock", nodes: [], pos });
        }

        e.FAILED = true;
    }
    ;
    ;
    function $case_clause(l, e) {

        _(l, e, e.eh, [8, 256, 8, 256, 512], "case");

        if (e.FAILED) return;

        const $2_ = $expression(l, e);

        _(l, e, e.eh, [8, 256, 8, 256, 512], ":");

        const tx = l.tx, ty = l.ty;

        if (tx == "{" || tx == "delete" || tx == "void" || tx == "typeof" || tx == "+" || tx == "-" || tx == "~" || tx == "!" || tx == "++" || tx == "--" || tx == "new" || tx == "this" || ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from" || tx == "true" || tx == "false" || tx == "null" || tx == '"' || tx == "'" || ty == 1 || tx == "[" || tx == "function" || tx == "class" || tx == "/" || tx == "`" || tx == "(" || tx == "super" || tx == "import" || tx == "await" || tx == "yield" || tx == "var" || tx == ";" || tx == "if" || tx == "do" || tx == "while" || tx == "for" || tx == "switch" || tx == "continue" || tx == "break" || tx == "return" || tx == "with" || tx == "throw" || tx == "try" || tx == "debugger" || tx == "let" || tx == "const") {

            if (e.FAILED) return;

            const $4_ = $statement_list(l, e);

            e.p = (e.FAILED) ? -1 : 48;

            return ({ type: "CaseClause", nodes: [$2_, ...$4_], pos });
        }

        e.p = (e.FAILED) ? -1 : 48;

        return ({ type: "CaseClause", nodes: [$2_], pos });
    }
    function $default_clause(l, e) {

        _(l, e, e.eh, [8, 256, 8, 256, 512], "default");

        _(l, e, e.eh, [8, 256, 8, 256, 512], ":");

        const tx = l.tx, ty = l.ty;

        if (tx == "{" || tx == "delete" || tx == "void" || tx == "typeof" || tx == "+" || tx == "-" || tx == "~" || tx == "!" || tx == "++" || tx == "--" || tx == "new" || tx == "this" || ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from" || tx == "true" || tx == "false" || tx == "null" || tx == '"' || tx == "'" || ty == 1 || tx == "[" || tx == "function" || tx == "class" || tx == "/" || tx == "`" || tx == "(" || tx == "super" || tx == "import" || tx == "await" || tx == "yield" || tx == "var" || tx == ";" || tx == "if" || tx == "do" || tx == "while" || tx == "for" || tx == "switch" || tx == "continue" || tx == "break" || tx == "return" || tx == "with" || tx == "throw" || tx == "try" || tx == "debugger" || tx == "let" || tx == "const") {

            if (e.FAILED) return;

            const $3_ = $statement_list(l, e);

            e.p = (e.FAILED) ? -1 : 49;

            return ({ type: "DefaultClause", nodes: [...$3_], pos });
        }

        e.p = (e.FAILED) ? -1 : 49;

        return ({ type: "DefaultClause", nodes: [], pos });
    }
    function $labeled_statement(l, e) {

        if (e.FAILED) return;

        const $1_ = $label_identifier(l, e);

        _(l, e, e.eh, [8, 256, 8, 256, 512], ":");

        if (e.FAILED) return;

        const $3_ = $labeled_item(l, e);

        e.p = (e.FAILED) ? -1 : 50;

        return ({ type: "LabeledStatement", nodes: [$1_, $3_], pos });
    }
    ;
    function $try_statement(l, e) {

        _(l, e, e.eh, [8, 256, 8, 256, 512], "try");

        if (e.FAILED) return;

        const $2_ = $block(l, e);

        const tx = l.tx;

        if (tx == "catch") {

            if (e.FAILED) return;

            const $3_ = $catch(l, e);

            const tx = l.tx;

            if (tx == "finally") {

                if (e.FAILED) return;

                const $4_ = $finally(l, e);

                e.p = (e.FAILED) ? -1 : 52;

                return ({ type: "TryStatement", nodes: [$2_, $3_, $4_], pos });
            }

            e.p = (e.FAILED) ? -1 : 52;

            return ({ type: "TryStatement", nodes: [$2_, $3_, null], pos });
        }

        if (tx == "finally") {

            if (e.FAILED) return;

            const $3_ = $finally(l, e);

            e.p = (e.FAILED) ? -1 : 52;

            return ({ type: "TryStatement", nodes: [$2_, null, $3_], pos });
        }

        e.FAILED = true;
    }
    function $catch(l, e) {

        _(l, e, e.eh, [8, 256, 8, 256, 512], "catch");

        _(l, e, e.eh, [8, 256, 8, 256, 512], "(");

        if (e.FAILED) return;

        const $3_ = $catch_parameter(l, e);

        _(l, e, e.eh, [8, 256, 8, 256, 512], ")");

        if (e.FAILED) return;

        const $5_ = $block(l, e);

        e.p = (e.FAILED) ? -1 : 53;

        return ({ type: "CatchClause", nodes: [$3_, $5_], pos });
    }
    function $finally(l, e) {

        _(l, e, e.eh, [8, 256, 8, 256, 512], "finally");

        if (e.FAILED) return;

        const $2_ = $block(l, e);

        e.p = (e.FAILED) ? -1 : 54;

        return ({ type: "FinallyClause", nodes: [$2_], pos });
    }
    function $catch_parameter(l, e) {

        const tx = l.tx, ty = l.ty;

        if (tx == "{" || tx == "[") {

            if (e.FAILED) return;

            const $1_ = $binding_pattern(l, e);

            e.p = (e.FAILED) ? -1 : 55;

            return $1_;
        }

        if (ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from") {

            if (e.FAILED) return;

            const $1_ = $binding_identifier(l, e);

            e.p = (e.FAILED) ? -1 : 55;

            return $1_;
        }

        e.FAILED = true;
    }
    function $debugger_statement(l, e) {

        _(l, e, e.eh, [8, 256, 8, 256, 512], "debugger");

        _(l, e, e.eh, [8, 256, 8, 256, 512], ";");

        e.p = (e.FAILED) ? -1 : 56;

        return ({ type: "DebuggerStatement", pos });
    }
    function $variable_statement(l, e) {

        _(l, e, e.eh, [8, 256, 8, 256, 512], "var");

        if (e.FAILED) return;

        const $2_ = $variable_declaration_list(l, e);

        _(l, e, e.eh, [8, 256, 8, 256, 512], ";");

        e.p = (e.FAILED) ? -1 : 57;

        return ({ type: "VariableStatement", nodes: $2_, pos });
    }
    ;
    ;
    function $variable_declaration(l, e) {

        const tx = l.tx, ty = l.ty;

        if (tx == "{" || tx == "[") {

            if (e.FAILED) return;

            const $1_ = $binding_pattern(l, e);

            if (e.FAILED) return;

            const $2_ = $initializer(l, e);

            e.p = (e.FAILED) ? -1 : 60;

            return ({

                type: "BindingExpression",

                symbol: "=",

                nodes: [$1_, $2_],

                pos
            });
        }

        if (ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from") {

            if (e.FAILED) return;

            const $1_ = $binding_identifier(l, e);

            const tx = l.tx;

            if (tx == "=") {

                if (e.FAILED) return;

                const $2_ = $initializer(l, e);

                e.p = (e.FAILED) ? -1 : 60;

                return ({

                    type: "BindingExpression",

                    symbol: "=",

                    nodes: [$1_, $2_],

                    pos
                });
            }

            e.p = (e.FAILED) ? -1 : 60;

            return $1_;
        }

        e.FAILED = true;
    }
    function $lexical_declaration(l, e) {

        if (e.FAILED) return;

        const $1_ = $let_or_const(l, e);

        if (e.FAILED) return;

        const $2_ = $binding_list(l, e);

        _(l, e, e.eh, [8, 256, 8, 256, 512], ";");

        e.p = (e.FAILED) ? -1 : 61;

        return ({

            type: "LexicalDeclaration",

            symbol: $1_,

            nodes: $2_,

            pos
        });
    }
    function $let_or_const(l, e) {

        const tx = l.tx;

        if (tx == "let") {

            _(l, e, e.eh, [8, 256, 8, 256, 512], "let");

            e.p = (e.FAILED) ? -1 : 62;

            return ("let");
        }

        if (tx == "const") {

            _(l, e, e.eh, [8, 256, 8, 256, 512], "const");

            e.p = (e.FAILED) ? -1 : 62;

            return ("const");
        }

        e.FAILED = true;
    }
    ;
    ;
    function $lexical_binding(l, e) {

        const tx = l.tx, ty = l.ty;

        if (tx == "{" || tx == "[") {

            if (e.FAILED) return;

            const $1_ = $binding_pattern(l, e);

            if (e.FAILED) return;

            const $2_ = $initializer(l, e);

            e.p = (e.FAILED) ? -1 : 65;

            return ({

                type: "BindingExpression",

                symbol: "=",

                nodes: [$1_, $2_],

                pos
            });
        }

        if (ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from") {

            if (e.FAILED) return;

            const $1_ = $binding_identifier(l, e);

            const tx = l.tx;

            if (tx == "=") {

                if (e.FAILED) return;

                const $2_ = $initializer(l, e);

                e.p = (e.FAILED) ? -1 : 65;

                return ({

                    type: "BindingExpression",

                    symbol: "=",

                    nodes: [$1_, $2_],

                    pos
                });
            }

            e.p = (e.FAILED) ? -1 : 65;

            return $1_;
        }

        e.FAILED = true;
    }
    function $function_declaration(l, e) {

        const tx = l.tx;

        if (tx == "async") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "async");

            _(l, e, e.eh, [8, 256, 8, 256, 512], "function");

            const tx = l.tx, ty = l.ty;

            if (tx == "*") {

                const $3_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "*");

                const tx = l.tx, ty = l.ty;

                if (tx == "(") {

                    _(l, e, e.eh, [8, 256, 8, 256, 512], "(");

                    const tx = l.tx, ty = l.ty;

                    if (tx == ")") {

                        _(l, e, e.eh, [8, 256, 8, 256, 512], ")");

                        _(l, e, e.eh, [8, 256, 8, 256, 512], "{");

                        const tx = l.tx, ty = l.ty;

                        if (tx == "}") {

                            _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                            e.p = (e.FAILED) ? -1 : 66;

                            return ({

                                type: "FunctionDeclaration",

                                ASYNC: !!$1_,

                                GENERATOR: !!$3_,

                                nodes: [null, null, null],

                                pos
                            });
                        }

                        if (tx == "{" || tx == "delete" || tx == "void" || tx == "typeof" || tx == "+" || tx == "-" || tx == "~" || tx == "!" || tx == "++" || tx == "--" || tx == "new" || tx == "this" || ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from" || tx == "true" || tx == "false" || tx == "null" || tx == '"' || tx == "'" || ty == 1 || tx == "[" || tx == "function" || tx == "class" || tx == "/" || tx == "`" || tx == "(" || tx == "super" || tx == "import" || tx == "await" || tx == "yield" || tx == "var" || tx == ";" || tx == "if" || tx == "do" || tx == "while" || tx == "for" || tx == "switch" || tx == "continue" || tx == "break" || tx == "return" || tx == "with" || tx == "throw" || tx == "try" || tx == "debugger" || tx == "let" || tx == "const") {

                            if (e.FAILED) return;

                            const $7_ = $function_body(l, e);

                            _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                            e.p = (e.FAILED) ? -1 : 66;

                            return ({

                                type: "FunctionDeclaration",

                                ASYNC: !!$1_,

                                GENERATOR: !!$3_,

                                nodes: [null, null, $7_],

                                pos
                            });
                        }
                    }

                    if (tx == "..." || ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from" || tx == "{" || tx == "[") {

                        if (e.FAILED) return;

                        const $5_ = $formal_parameters(l, e);

                        _(l, e, e.eh, [8, 256, 8, 256, 512], ")");

                        _(l, e, e.eh, [8, 256, 8, 256, 512], "{");

                        const tx = l.tx, ty = l.ty;

                        if (tx == "}") {

                            _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                            e.p = (e.FAILED) ? -1 : 66;

                            return ({

                                type: "FunctionDeclaration",

                                ASYNC: !!$1_,

                                GENERATOR: !!$3_,

                                nodes: [null, $5_, null],

                                pos
                            });
                        }

                        if (tx == "{" || tx == "delete" || tx == "void" || tx == "typeof" || tx == "+" || tx == "-" || tx == "~" || tx == "!" || tx == "++" || tx == "--" || tx == "new" || tx == "this" || ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from" || tx == "true" || tx == "false" || tx == "null" || tx == '"' || tx == "'" || ty == 1 || tx == "[" || tx == "function" || tx == "class" || tx == "/" || tx == "`" || tx == "(" || tx == "super" || tx == "import" || tx == "await" || tx == "yield" || tx == "var" || tx == ";" || tx == "if" || tx == "do" || tx == "while" || tx == "for" || tx == "switch" || tx == "continue" || tx == "break" || tx == "return" || tx == "with" || tx == "throw" || tx == "try" || tx == "debugger" || tx == "let" || tx == "const") {

                            if (e.FAILED) return;

                            const $8_ = $function_body(l, e);

                            _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                            e.p = (e.FAILED) ? -1 : 66;

                            return ({

                                type: "FunctionDeclaration",

                                ASYNC: !!$1_,

                                GENERATOR: !!$3_,

                                nodes: [null, $5_, $8_],

                                pos
                            });
                        }
                    }
                }

                if (ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from") {

                    if (e.FAILED) return;

                    const $4_ = $binding_identifier(l, e);

                    _(l, e, e.eh, [8, 256, 8, 256, 512], "(");

                    const tx = l.tx, ty = l.ty;

                    if (tx == ")") {

                        _(l, e, e.eh, [8, 256, 8, 256, 512], ")");

                        _(l, e, e.eh, [8, 256, 8, 256, 512], "{");

                        const tx = l.tx, ty = l.ty;

                        if (tx == "}") {

                            _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                            e.p = (e.FAILED) ? -1 : 66;

                            return ({

                                type: "FunctionDeclaration",

                                ASYNC: !!$1_,

                                GENERATOR: !!$3_,

                                nodes: [$4_, null, null],

                                pos
                            });
                        }

                        if (tx == "{" || tx == "delete" || tx == "void" || tx == "typeof" || tx == "+" || tx == "-" || tx == "~" || tx == "!" || tx == "++" || tx == "--" || tx == "new" || tx == "this" || ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from" || tx == "true" || tx == "false" || tx == "null" || tx == '"' || tx == "'" || ty == 1 || tx == "[" || tx == "function" || tx == "class" || tx == "/" || tx == "`" || tx == "(" || tx == "super" || tx == "import" || tx == "await" || tx == "yield" || tx == "var" || tx == ";" || tx == "if" || tx == "do" || tx == "while" || tx == "for" || tx == "switch" || tx == "continue" || tx == "break" || tx == "return" || tx == "with" || tx == "throw" || tx == "try" || tx == "debugger" || tx == "let" || tx == "const") {

                            if (e.FAILED) return;

                            const $8_ = $function_body(l, e);

                            _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                            e.p = (e.FAILED) ? -1 : 66;

                            return ({

                                type: "FunctionDeclaration",

                                ASYNC: !!$1_,

                                GENERATOR: !!$3_,

                                nodes: [$4_, null, $8_],

                                pos
                            });
                        }
                    }

                    if (tx == "..." || ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from" || tx == "{" || tx == "[") {

                        if (e.FAILED) return;

                        const $6_ = $formal_parameters(l, e);

                        _(l, e, e.eh, [8, 256, 8, 256, 512], ")");

                        _(l, e, e.eh, [8, 256, 8, 256, 512], "{");

                        const tx = l.tx, ty = l.ty;

                        if (tx == "}") {

                            _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                            e.p = (e.FAILED) ? -1 : 66;

                            return ({

                                type: "FunctionDeclaration",

                                ASYNC: !!$1_,

                                GENERATOR: !!$3_,

                                nodes: [$4_, $6_, null],

                                pos
                            });
                        }

                        if (tx == "{" || tx == "delete" || tx == "void" || tx == "typeof" || tx == "+" || tx == "-" || tx == "~" || tx == "!" || tx == "++" || tx == "--" || tx == "new" || tx == "this" || ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from" || tx == "true" || tx == "false" || tx == "null" || tx == '"' || tx == "'" || ty == 1 || tx == "[" || tx == "function" || tx == "class" || tx == "/" || tx == "`" || tx == "(" || tx == "super" || tx == "import" || tx == "await" || tx == "yield" || tx == "var" || tx == ";" || tx == "if" || tx == "do" || tx == "while" || tx == "for" || tx == "switch" || tx == "continue" || tx == "break" || tx == "return" || tx == "with" || tx == "throw" || tx == "try" || tx == "debugger" || tx == "let" || tx == "const") {

                            if (e.FAILED) return;

                            const $9_ = $function_body(l, e);

                            _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                            e.p = (e.FAILED) ? -1 : 66;

                            return ({

                                type: "FunctionDeclaration",

                                ASYNC: !!$1_,

                                GENERATOR: !!$3_,

                                nodes: [$4_, $6_, $9_],

                                pos
                            });
                        }
                    }
                }
            }

            if (tx == "(") {

                _(l, e, e.eh, [8, 256, 8, 256, 512], "(");

                const tx = l.tx, ty = l.ty;

                if (tx == ")") {

                    _(l, e, e.eh, [8, 256, 8, 256, 512], ")");

                    _(l, e, e.eh, [8, 256, 8, 256, 512], "{");

                    const tx = l.tx, ty = l.ty;

                    if (tx == "}") {

                        _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                        e.p = (e.FAILED) ? -1 : 66;

                        return ({

                            type: "FunctionDeclaration",

                            ASYNC: !!$1_,

                            GENERATOR: !!null,

                            nodes: [null, null, null],

                            pos
                        });
                    }

                    if (tx == "{" || tx == "delete" || tx == "void" || tx == "typeof" || tx == "+" || tx == "-" || tx == "~" || tx == "!" || tx == "++" || tx == "--" || tx == "new" || tx == "this" || ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from" || tx == "true" || tx == "false" || tx == "null" || tx == '"' || tx == "'" || ty == 1 || tx == "[" || tx == "function" || tx == "class" || tx == "/" || tx == "`" || tx == "(" || tx == "super" || tx == "import" || tx == "await" || tx == "yield" || tx == "var" || tx == ";" || tx == "if" || tx == "do" || tx == "while" || tx == "for" || tx == "switch" || tx == "continue" || tx == "break" || tx == "return" || tx == "with" || tx == "throw" || tx == "try" || tx == "debugger" || tx == "let" || tx == "const") {

                        if (e.FAILED) return;

                        const $6_ = $function_body(l, e);

                        _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                        e.p = (e.FAILED) ? -1 : 66;

                        return ({

                            type: "FunctionDeclaration",

                            ASYNC: !!$1_,

                            GENERATOR: !!null,

                            nodes: [null, null, $6_],

                            pos
                        });
                    }
                }

                if (tx == "..." || ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from" || tx == "{" || tx == "[") {

                    if (e.FAILED) return;

                    const $4_ = $formal_parameters(l, e);

                    _(l, e, e.eh, [8, 256, 8, 256, 512], ")");

                    _(l, e, e.eh, [8, 256, 8, 256, 512], "{");

                    const tx = l.tx, ty = l.ty;

                    if (tx == "}") {

                        _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                        e.p = (e.FAILED) ? -1 : 66;

                        return ({

                            type: "FunctionDeclaration",

                            ASYNC: !!$1_,

                            GENERATOR: !!null,

                            nodes: [null, $4_, null],

                            pos
                        });
                    }

                    if (tx == "{" || tx == "delete" || tx == "void" || tx == "typeof" || tx == "+" || tx == "-" || tx == "~" || tx == "!" || tx == "++" || tx == "--" || tx == "new" || tx == "this" || ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from" || tx == "true" || tx == "false" || tx == "null" || tx == '"' || tx == "'" || ty == 1 || tx == "[" || tx == "function" || tx == "class" || tx == "/" || tx == "`" || tx == "(" || tx == "super" || tx == "import" || tx == "await" || tx == "yield" || tx == "var" || tx == ";" || tx == "if" || tx == "do" || tx == "while" || tx == "for" || tx == "switch" || tx == "continue" || tx == "break" || tx == "return" || tx == "with" || tx == "throw" || tx == "try" || tx == "debugger" || tx == "let" || tx == "const") {

                        if (e.FAILED) return;

                        const $7_ = $function_body(l, e);

                        _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                        e.p = (e.FAILED) ? -1 : 66;

                        return ({

                            type: "FunctionDeclaration",

                            ASYNC: !!$1_,

                            GENERATOR: !!null,

                            nodes: [null, $4_, $7_],

                            pos
                        });
                    }
                }
            }

            if (ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from") {

                if (e.FAILED) return;

                const $3_ = $binding_identifier(l, e);

                _(l, e, e.eh, [8, 256, 8, 256, 512], "(");

                const tx = l.tx, ty = l.ty;

                if (tx == ")") {

                    _(l, e, e.eh, [8, 256, 8, 256, 512], ")");

                    _(l, e, e.eh, [8, 256, 8, 256, 512], "{");

                    const tx = l.tx, ty = l.ty;

                    if (tx == "}") {

                        _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                        e.p = (e.FAILED) ? -1 : 66;

                        return ({

                            type: "FunctionDeclaration",

                            ASYNC: !!$1_,

                            GENERATOR: !!null,

                            nodes: [$3_, null, null],

                            pos
                        });
                    }

                    if (tx == "{" || tx == "delete" || tx == "void" || tx == "typeof" || tx == "+" || tx == "-" || tx == "~" || tx == "!" || tx == "++" || tx == "--" || tx == "new" || tx == "this" || ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from" || tx == "true" || tx == "false" || tx == "null" || tx == '"' || tx == "'" || ty == 1 || tx == "[" || tx == "function" || tx == "class" || tx == "/" || tx == "`" || tx == "(" || tx == "super" || tx == "import" || tx == "await" || tx == "yield" || tx == "var" || tx == ";" || tx == "if" || tx == "do" || tx == "while" || tx == "for" || tx == "switch" || tx == "continue" || tx == "break" || tx == "return" || tx == "with" || tx == "throw" || tx == "try" || tx == "debugger" || tx == "let" || tx == "const") {

                        if (e.FAILED) return;

                        const $7_ = $function_body(l, e);

                        _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                        e.p = (e.FAILED) ? -1 : 66;

                        return ({

                            type: "FunctionDeclaration",

                            ASYNC: !!$1_,

                            GENERATOR: !!null,

                            nodes: [$3_, null, $7_],

                            pos
                        });
                    }
                }

                if (tx == "..." || ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from" || tx == "{" || tx == "[") {

                    if (e.FAILED) return;

                    const $5_ = $formal_parameters(l, e);

                    _(l, e, e.eh, [8, 256, 8, 256, 512], ")");

                    _(l, e, e.eh, [8, 256, 8, 256, 512], "{");

                    const tx = l.tx, ty = l.ty;

                    if (tx == "}") {

                        _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                        e.p = (e.FAILED) ? -1 : 66;

                        return ({

                            type: "FunctionDeclaration",

                            ASYNC: !!$1_,

                            GENERATOR: !!null,

                            nodes: [$3_, $5_, null],

                            pos
                        });
                    }

                    if (tx == "{" || tx == "delete" || tx == "void" || tx == "typeof" || tx == "+" || tx == "-" || tx == "~" || tx == "!" || tx == "++" || tx == "--" || tx == "new" || tx == "this" || ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from" || tx == "true" || tx == "false" || tx == "null" || tx == '"' || tx == "'" || ty == 1 || tx == "[" || tx == "function" || tx == "class" || tx == "/" || tx == "`" || tx == "(" || tx == "super" || tx == "import" || tx == "await" || tx == "yield" || tx == "var" || tx == ";" || tx == "if" || tx == "do" || tx == "while" || tx == "for" || tx == "switch" || tx == "continue" || tx == "break" || tx == "return" || tx == "with" || tx == "throw" || tx == "try" || tx == "debugger" || tx == "let" || tx == "const") {

                        if (e.FAILED) return;

                        const $8_ = $function_body(l, e);

                        _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                        e.p = (e.FAILED) ? -1 : 66;

                        return ({

                            type: "FunctionDeclaration",

                            ASYNC: !!$1_,

                            GENERATOR: !!null,

                            nodes: [$3_, $5_, $8_],

                            pos
                        });
                    }
                }
            }
        }

        if (tx == "function") {

            _(l, e, e.eh, [8, 256, 8, 256, 512], "function");

            const tx = l.tx, ty = l.ty;

            if (tx == "*") {

                const $2_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "*");

                const tx = l.tx, ty = l.ty;

                if (tx == "(") {

                    _(l, e, e.eh, [8, 256, 8, 256, 512], "(");

                    const tx = l.tx, ty = l.ty;

                    if (tx == ")") {

                        _(l, e, e.eh, [8, 256, 8, 256, 512], ")");

                        _(l, e, e.eh, [8, 256, 8, 256, 512], "{");

                        const tx = l.tx, ty = l.ty;

                        if (tx == "}") {

                            _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                            e.p = (e.FAILED) ? -1 : 66;

                            return ({

                                type: "FunctionDeclaration",

                                ASYNC: !!null,

                                GENERATOR: !!$2_,

                                nodes: [null, null, null],

                                pos
                            });
                        }

                        if (tx == "{" || tx == "delete" || tx == "void" || tx == "typeof" || tx == "+" || tx == "-" || tx == "~" || tx == "!" || tx == "++" || tx == "--" || tx == "new" || tx == "this" || ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from" || tx == "true" || tx == "false" || tx == "null" || tx == '"' || tx == "'" || ty == 1 || tx == "[" || tx == "function" || tx == "class" || tx == "/" || tx == "`" || tx == "(" || tx == "super" || tx == "import" || tx == "await" || tx == "yield" || tx == "var" || tx == ";" || tx == "if" || tx == "do" || tx == "while" || tx == "for" || tx == "switch" || tx == "continue" || tx == "break" || tx == "return" || tx == "with" || tx == "throw" || tx == "try" || tx == "debugger" || tx == "let" || tx == "const") {

                            if (e.FAILED) return;

                            const $6_ = $function_body(l, e);

                            _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                            e.p = (e.FAILED) ? -1 : 66;

                            return ({

                                type: "FunctionDeclaration",

                                ASYNC: !!null,

                                GENERATOR: !!$2_,

                                nodes: [null, null, $6_],

                                pos
                            });
                        }
                    }

                    if (tx == "..." || ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from" || tx == "{" || tx == "[") {

                        if (e.FAILED) return;

                        const $4_ = $formal_parameters(l, e);

                        _(l, e, e.eh, [8, 256, 8, 256, 512], ")");

                        _(l, e, e.eh, [8, 256, 8, 256, 512], "{");

                        const tx = l.tx, ty = l.ty;

                        if (tx == "}") {

                            _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                            e.p = (e.FAILED) ? -1 : 66;

                            return ({

                                type: "FunctionDeclaration",

                                ASYNC: !!null,

                                GENERATOR: !!$2_,

                                nodes: [null, $4_, null],

                                pos
                            });
                        }

                        if (tx == "{" || tx == "delete" || tx == "void" || tx == "typeof" || tx == "+" || tx == "-" || tx == "~" || tx == "!" || tx == "++" || tx == "--" || tx == "new" || tx == "this" || ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from" || tx == "true" || tx == "false" || tx == "null" || tx == '"' || tx == "'" || ty == 1 || tx == "[" || tx == "function" || tx == "class" || tx == "/" || tx == "`" || tx == "(" || tx == "super" || tx == "import" || tx == "await" || tx == "yield" || tx == "var" || tx == ";" || tx == "if" || tx == "do" || tx == "while" || tx == "for" || tx == "switch" || tx == "continue" || tx == "break" || tx == "return" || tx == "with" || tx == "throw" || tx == "try" || tx == "debugger" || tx == "let" || tx == "const") {

                            if (e.FAILED) return;

                            const $7_ = $function_body(l, e);

                            _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                            e.p = (e.FAILED) ? -1 : 66;

                            return ({

                                type: "FunctionDeclaration",

                                ASYNC: !!null,

                                GENERATOR: !!$2_,

                                nodes: [null, $4_, $7_],

                                pos
                            });
                        }
                    }
                }

                if (ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from") {

                    if (e.FAILED) return;

                    const $3_ = $binding_identifier(l, e);

                    _(l, e, e.eh, [8, 256, 8, 256, 512], "(");

                    const tx = l.tx, ty = l.ty;

                    if (tx == ")") {

                        _(l, e, e.eh, [8, 256, 8, 256, 512], ")");

                        _(l, e, e.eh, [8, 256, 8, 256, 512], "{");

                        const tx = l.tx, ty = l.ty;

                        if (tx == "}") {

                            _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                            e.p = (e.FAILED) ? -1 : 66;

                            return ({

                                type: "FunctionDeclaration",

                                ASYNC: !!null,

                                GENERATOR: !!$2_,

                                nodes: [$3_, null, null],

                                pos
                            });
                        }

                        if (tx == "{" || tx == "delete" || tx == "void" || tx == "typeof" || tx == "+" || tx == "-" || tx == "~" || tx == "!" || tx == "++" || tx == "--" || tx == "new" || tx == "this" || ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from" || tx == "true" || tx == "false" || tx == "null" || tx == '"' || tx == "'" || ty == 1 || tx == "[" || tx == "function" || tx == "class" || tx == "/" || tx == "`" || tx == "(" || tx == "super" || tx == "import" || tx == "await" || tx == "yield" || tx == "var" || tx == ";" || tx == "if" || tx == "do" || tx == "while" || tx == "for" || tx == "switch" || tx == "continue" || tx == "break" || tx == "return" || tx == "with" || tx == "throw" || tx == "try" || tx == "debugger" || tx == "let" || tx == "const") {

                            if (e.FAILED) return;

                            const $7_ = $function_body(l, e);

                            _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                            e.p = (e.FAILED) ? -1 : 66;

                            return ({

                                type: "FunctionDeclaration",

                                ASYNC: !!null,

                                GENERATOR: !!$2_,

                                nodes: [$3_, null, $7_],

                                pos
                            });
                        }
                    }

                    if (tx == "..." || ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from" || tx == "{" || tx == "[") {

                        if (e.FAILED) return;

                        const $5_ = $formal_parameters(l, e);

                        _(l, e, e.eh, [8, 256, 8, 256, 512], ")");

                        _(l, e, e.eh, [8, 256, 8, 256, 512], "{");

                        const tx = l.tx, ty = l.ty;

                        if (tx == "}") {

                            _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                            e.p = (e.FAILED) ? -1 : 66;

                            return ({

                                type: "FunctionDeclaration",

                                ASYNC: !!null,

                                GENERATOR: !!$2_,

                                nodes: [$3_, $5_, null],

                                pos
                            });
                        }

                        if (tx == "{" || tx == "delete" || tx == "void" || tx == "typeof" || tx == "+" || tx == "-" || tx == "~" || tx == "!" || tx == "++" || tx == "--" || tx == "new" || tx == "this" || ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from" || tx == "true" || tx == "false" || tx == "null" || tx == '"' || tx == "'" || ty == 1 || tx == "[" || tx == "function" || tx == "class" || tx == "/" || tx == "`" || tx == "(" || tx == "super" || tx == "import" || tx == "await" || tx == "yield" || tx == "var" || tx == ";" || tx == "if" || tx == "do" || tx == "while" || tx == "for" || tx == "switch" || tx == "continue" || tx == "break" || tx == "return" || tx == "with" || tx == "throw" || tx == "try" || tx == "debugger" || tx == "let" || tx == "const") {

                            if (e.FAILED) return;

                            const $8_ = $function_body(l, e);

                            _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                            e.p = (e.FAILED) ? -1 : 66;

                            return ({

                                type: "FunctionDeclaration",

                                ASYNC: !!null,

                                GENERATOR: !!$2_,

                                nodes: [$3_, $5_, $8_],

                                pos
                            });
                        }
                    }
                }
            }

            if (tx == "(") {

                _(l, e, e.eh, [8, 256, 8, 256, 512], "(");

                const tx = l.tx, ty = l.ty;

                if (tx == ")") {

                    _(l, e, e.eh, [8, 256, 8, 256, 512], ")");

                    _(l, e, e.eh, [8, 256, 8, 256, 512], "{");

                    const tx = l.tx, ty = l.ty;

                    if (tx == "}") {

                        _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                        e.p = (e.FAILED) ? -1 : 66;

                        return ({

                            type: "FunctionDeclaration",

                            ASYNC: !!null,

                            GENERATOR: !!null,

                            nodes: [null, null, null],

                            pos
                        });
                    }

                    if (tx == "{" || tx == "delete" || tx == "void" || tx == "typeof" || tx == "+" || tx == "-" || tx == "~" || tx == "!" || tx == "++" || tx == "--" || tx == "new" || tx == "this" || ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from" || tx == "true" || tx == "false" || tx == "null" || tx == '"' || tx == "'" || ty == 1 || tx == "[" || tx == "function" || tx == "class" || tx == "/" || tx == "`" || tx == "(" || tx == "super" || tx == "import" || tx == "await" || tx == "yield" || tx == "var" || tx == ";" || tx == "if" || tx == "do" || tx == "while" || tx == "for" || tx == "switch" || tx == "continue" || tx == "break" || tx == "return" || tx == "with" || tx == "throw" || tx == "try" || tx == "debugger" || tx == "let" || tx == "const") {

                        if (e.FAILED) return;

                        const $5_ = $function_body(l, e);

                        _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                        e.p = (e.FAILED) ? -1 : 66;

                        return ({

                            type: "FunctionDeclaration",

                            ASYNC: !!null,

                            GENERATOR: !!null,

                            nodes: [null, null, $5_],

                            pos
                        });
                    }
                }

                if (tx == "..." || ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from" || tx == "{" || tx == "[") {

                    if (e.FAILED) return;

                    const $3_ = $formal_parameters(l, e);

                    _(l, e, e.eh, [8, 256, 8, 256, 512], ")");

                    _(l, e, e.eh, [8, 256, 8, 256, 512], "{");

                    const tx = l.tx, ty = l.ty;

                    if (tx == "}") {

                        _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                        e.p = (e.FAILED) ? -1 : 66;

                        return ({

                            type: "FunctionDeclaration",

                            ASYNC: !!null,

                            GENERATOR: !!null,

                            nodes: [null, $3_, null],

                            pos
                        });
                    }

                    if (tx == "{" || tx == "delete" || tx == "void" || tx == "typeof" || tx == "+" || tx == "-" || tx == "~" || tx == "!" || tx == "++" || tx == "--" || tx == "new" || tx == "this" || ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from" || tx == "true" || tx == "false" || tx == "null" || tx == '"' || tx == "'" || ty == 1 || tx == "[" || tx == "function" || tx == "class" || tx == "/" || tx == "`" || tx == "(" || tx == "super" || tx == "import" || tx == "await" || tx == "yield" || tx == "var" || tx == ";" || tx == "if" || tx == "do" || tx == "while" || tx == "for" || tx == "switch" || tx == "continue" || tx == "break" || tx == "return" || tx == "with" || tx == "throw" || tx == "try" || tx == "debugger" || tx == "let" || tx == "const") {

                        if (e.FAILED) return;

                        const $6_ = $function_body(l, e);

                        _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                        e.p = (e.FAILED) ? -1 : 66;

                        return ({

                            type: "FunctionDeclaration",

                            ASYNC: !!null,

                            GENERATOR: !!null,

                            nodes: [null, $3_, $6_],

                            pos
                        });
                    }
                }
            }

            if (ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from") {

                if (e.FAILED) return;

                const $2_ = $binding_identifier(l, e);

                _(l, e, e.eh, [8, 256, 8, 256, 512], "(");

                const tx = l.tx, ty = l.ty;

                if (tx == ")") {

                    _(l, e, e.eh, [8, 256, 8, 256, 512], ")");

                    _(l, e, e.eh, [8, 256, 8, 256, 512], "{");

                    const tx = l.tx, ty = l.ty;

                    if (tx == "}") {

                        _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                        e.p = (e.FAILED) ? -1 : 66;

                        return ({

                            type: "FunctionDeclaration",

                            ASYNC: !!null,

                            GENERATOR: !!null,

                            nodes: [$2_, null, null],

                            pos
                        });
                    }

                    if (tx == "{" || tx == "delete" || tx == "void" || tx == "typeof" || tx == "+" || tx == "-" || tx == "~" || tx == "!" || tx == "++" || tx == "--" || tx == "new" || tx == "this" || ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from" || tx == "true" || tx == "false" || tx == "null" || tx == '"' || tx == "'" || ty == 1 || tx == "[" || tx == "function" || tx == "class" || tx == "/" || tx == "`" || tx == "(" || tx == "super" || tx == "import" || tx == "await" || tx == "yield" || tx == "var" || tx == ";" || tx == "if" || tx == "do" || tx == "while" || tx == "for" || tx == "switch" || tx == "continue" || tx == "break" || tx == "return" || tx == "with" || tx == "throw" || tx == "try" || tx == "debugger" || tx == "let" || tx == "const") {

                        if (e.FAILED) return;

                        const $6_ = $function_body(l, e);

                        _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                        e.p = (e.FAILED) ? -1 : 66;

                        return ({

                            type: "FunctionDeclaration",

                            ASYNC: !!null,

                            GENERATOR: !!null,

                            nodes: [$2_, null, $6_],

                            pos
                        });
                    }
                }

                if (tx == "..." || ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from" || tx == "{" || tx == "[") {

                    if (e.FAILED) return;

                    const $4_ = $formal_parameters(l, e);

                    _(l, e, e.eh, [8, 256, 8, 256, 512], ")");

                    _(l, e, e.eh, [8, 256, 8, 256, 512], "{");

                    const tx = l.tx, ty = l.ty;

                    if (tx == "}") {

                        _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                        e.p = (e.FAILED) ? -1 : 66;

                        return ({

                            type: "FunctionDeclaration",

                            ASYNC: !!null,

                            GENERATOR: !!null,

                            nodes: [$2_, $4_, null],

                            pos
                        });
                    }

                    if (tx == "{" || tx == "delete" || tx == "void" || tx == "typeof" || tx == "+" || tx == "-" || tx == "~" || tx == "!" || tx == "++" || tx == "--" || tx == "new" || tx == "this" || ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from" || tx == "true" || tx == "false" || tx == "null" || tx == '"' || tx == "'" || ty == 1 || tx == "[" || tx == "function" || tx == "class" || tx == "/" || tx == "`" || tx == "(" || tx == "super" || tx == "import" || tx == "await" || tx == "yield" || tx == "var" || tx == ";" || tx == "if" || tx == "do" || tx == "while" || tx == "for" || tx == "switch" || tx == "continue" || tx == "break" || tx == "return" || tx == "with" || tx == "throw" || tx == "try" || tx == "debugger" || tx == "let" || tx == "const") {

                        if (e.FAILED) return;

                        const $7_ = $function_body(l, e);

                        _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                        e.p = (e.FAILED) ? -1 : 66;

                        return ({

                            type: "FunctionDeclaration",

                            ASYNC: !!null,

                            GENERATOR: !!null,

                            nodes: [$2_, $4_, $7_],

                            pos
                        });
                    }
                }
            }
        }

        e.FAILED = true;
    }
    function $function_expression(l, e) {

        const tx = l.tx;

        if (tx == "async") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "async");

            _(l, e, e.eh, [8, 256, 8, 256, 512], "function");

            const tx = l.tx, ty = l.ty;

            if (tx == "*") {

                const $3_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "*");

                const tx = l.tx, ty = l.ty;

                if (tx == "(") {

                    _(l, e, e.eh, [8, 256, 8, 256, 512], "(");

                    const tx = l.tx, ty = l.ty;

                    if (tx == ")") {

                        _(l, e, e.eh, [8, 256, 8, 256, 512], ")");

                        _(l, e, e.eh, [8, 256, 8, 256, 512], "{");

                        const tx = l.tx, ty = l.ty;

                        if (tx == "}") {

                            _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                            e.p = (e.FAILED) ? -1 : 67;

                            return ({

                                type: "FunctionExpression",

                                ASYNC: !!$1_,

                                GENERATOR: !!$3_,

                                nodes: [null, null, null],

                                pos
                            });
                        }

                        if (tx == "{" || tx == "delete" || tx == "void" || tx == "typeof" || tx == "+" || tx == "-" || tx == "~" || tx == "!" || tx == "++" || tx == "--" || tx == "new" || tx == "this" || ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from" || tx == "true" || tx == "false" || tx == "null" || tx == '"' || tx == "'" || ty == 1 || tx == "[" || tx == "function" || tx == "class" || tx == "/" || tx == "`" || tx == "(" || tx == "super" || tx == "import" || tx == "await" || tx == "yield" || tx == "var" || tx == ";" || tx == "if" || tx == "do" || tx == "while" || tx == "for" || tx == "switch" || tx == "continue" || tx == "break" || tx == "return" || tx == "with" || tx == "throw" || tx == "try" || tx == "debugger" || tx == "let" || tx == "const") {

                            if (e.FAILED) return;

                            const $7_ = $function_body(l, e);

                            _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                            e.p = (e.FAILED) ? -1 : 67;

                            return ({

                                type: "FunctionExpression",

                                ASYNC: !!$1_,

                                GENERATOR: !!$3_,

                                nodes: [null, null, $7_],

                                pos
                            });
                        }
                    }

                    if (tx == "..." || ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from" || tx == "{" || tx == "[") {

                        if (e.FAILED) return;

                        const $5_ = $formal_parameters(l, e);

                        _(l, e, e.eh, [8, 256, 8, 256, 512], ")");

                        _(l, e, e.eh, [8, 256, 8, 256, 512], "{");

                        const tx = l.tx, ty = l.ty;

                        if (tx == "}") {

                            _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                            e.p = (e.FAILED) ? -1 : 67;

                            return ({

                                type: "FunctionExpression",

                                ASYNC: !!$1_,

                                GENERATOR: !!$3_,

                                nodes: [null, $5_, null],

                                pos
                            });
                        }

                        if (tx == "{" || tx == "delete" || tx == "void" || tx == "typeof" || tx == "+" || tx == "-" || tx == "~" || tx == "!" || tx == "++" || tx == "--" || tx == "new" || tx == "this" || ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from" || tx == "true" || tx == "false" || tx == "null" || tx == '"' || tx == "'" || ty == 1 || tx == "[" || tx == "function" || tx == "class" || tx == "/" || tx == "`" || tx == "(" || tx == "super" || tx == "import" || tx == "await" || tx == "yield" || tx == "var" || tx == ";" || tx == "if" || tx == "do" || tx == "while" || tx == "for" || tx == "switch" || tx == "continue" || tx == "break" || tx == "return" || tx == "with" || tx == "throw" || tx == "try" || tx == "debugger" || tx == "let" || tx == "const") {

                            if (e.FAILED) return;

                            const $8_ = $function_body(l, e);

                            _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                            e.p = (e.FAILED) ? -1 : 67;

                            return ({

                                type: "FunctionExpression",

                                ASYNC: !!$1_,

                                GENERATOR: !!$3_,

                                nodes: [null, $5_, $8_],

                                pos
                            });
                        }
                    }
                }

                if (ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from") {

                    if (e.FAILED) return;

                    const $4_ = $binding_identifier(l, e);

                    _(l, e, e.eh, [8, 256, 8, 256, 512], "(");

                    const tx = l.tx, ty = l.ty;

                    if (tx == ")") {

                        _(l, e, e.eh, [8, 256, 8, 256, 512], ")");

                        _(l, e, e.eh, [8, 256, 8, 256, 512], "{");

                        const tx = l.tx, ty = l.ty;

                        if (tx == "}") {

                            _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                            e.p = (e.FAILED) ? -1 : 67;

                            return ({

                                type: "FunctionExpression",

                                ASYNC: !!$1_,

                                GENERATOR: !!$3_,

                                nodes: [$4_, null, null],

                                pos
                            });
                        }

                        if (tx == "{" || tx == "delete" || tx == "void" || tx == "typeof" || tx == "+" || tx == "-" || tx == "~" || tx == "!" || tx == "++" || tx == "--" || tx == "new" || tx == "this" || ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from" || tx == "true" || tx == "false" || tx == "null" || tx == '"' || tx == "'" || ty == 1 || tx == "[" || tx == "function" || tx == "class" || tx == "/" || tx == "`" || tx == "(" || tx == "super" || tx == "import" || tx == "await" || tx == "yield" || tx == "var" || tx == ";" || tx == "if" || tx == "do" || tx == "while" || tx == "for" || tx == "switch" || tx == "continue" || tx == "break" || tx == "return" || tx == "with" || tx == "throw" || tx == "try" || tx == "debugger" || tx == "let" || tx == "const") {

                            if (e.FAILED) return;

                            const $8_ = $function_body(l, e);

                            _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                            e.p = (e.FAILED) ? -1 : 67;

                            return ({

                                type: "FunctionExpression",

                                ASYNC: !!$1_,

                                GENERATOR: !!$3_,

                                nodes: [$4_, null, $8_],

                                pos
                            });
                        }
                    }

                    if (tx == "..." || ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from" || tx == "{" || tx == "[") {

                        if (e.FAILED) return;

                        const $6_ = $formal_parameters(l, e);

                        _(l, e, e.eh, [8, 256, 8, 256, 512], ")");

                        _(l, e, e.eh, [8, 256, 8, 256, 512], "{");

                        const tx = l.tx, ty = l.ty;

                        if (tx == "}") {

                            _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                            e.p = (e.FAILED) ? -1 : 67;

                            return ({

                                type: "FunctionExpression",

                                ASYNC: !!$1_,

                                GENERATOR: !!$3_,

                                nodes: [$4_, $6_, null],

                                pos
                            });
                        }

                        if (tx == "{" || tx == "delete" || tx == "void" || tx == "typeof" || tx == "+" || tx == "-" || tx == "~" || tx == "!" || tx == "++" || tx == "--" || tx == "new" || tx == "this" || ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from" || tx == "true" || tx == "false" || tx == "null" || tx == '"' || tx == "'" || ty == 1 || tx == "[" || tx == "function" || tx == "class" || tx == "/" || tx == "`" || tx == "(" || tx == "super" || tx == "import" || tx == "await" || tx == "yield" || tx == "var" || tx == ";" || tx == "if" || tx == "do" || tx == "while" || tx == "for" || tx == "switch" || tx == "continue" || tx == "break" || tx == "return" || tx == "with" || tx == "throw" || tx == "try" || tx == "debugger" || tx == "let" || tx == "const") {

                            if (e.FAILED) return;

                            const $9_ = $function_body(l, e);

                            _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                            e.p = (e.FAILED) ? -1 : 67;

                            return ({

                                type: "FunctionExpression",

                                ASYNC: !!$1_,

                                GENERATOR: !!$3_,

                                nodes: [$4_, $6_, $9_],

                                pos
                            });
                        }
                    }
                }
            }

            if (tx == "(") {

                _(l, e, e.eh, [8, 256, 8, 256, 512], "(");

                const tx = l.tx, ty = l.ty;

                if (tx == ")") {

                    _(l, e, e.eh, [8, 256, 8, 256, 512], ")");

                    _(l, e, e.eh, [8, 256, 8, 256, 512], "{");

                    const tx = l.tx, ty = l.ty;

                    if (tx == "}") {

                        _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                        e.p = (e.FAILED) ? -1 : 67;

                        return ({

                            type: "FunctionExpression",

                            ASYNC: !!$1_,

                            GENERATOR: !!null,

                            nodes: [null, null, null],

                            pos
                        });
                    }

                    if (tx == "{" || tx == "delete" || tx == "void" || tx == "typeof" || tx == "+" || tx == "-" || tx == "~" || tx == "!" || tx == "++" || tx == "--" || tx == "new" || tx == "this" || ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from" || tx == "true" || tx == "false" || tx == "null" || tx == '"' || tx == "'" || ty == 1 || tx == "[" || tx == "function" || tx == "class" || tx == "/" || tx == "`" || tx == "(" || tx == "super" || tx == "import" || tx == "await" || tx == "yield" || tx == "var" || tx == ";" || tx == "if" || tx == "do" || tx == "while" || tx == "for" || tx == "switch" || tx == "continue" || tx == "break" || tx == "return" || tx == "with" || tx == "throw" || tx == "try" || tx == "debugger" || tx == "let" || tx == "const") {

                        if (e.FAILED) return;

                        const $6_ = $function_body(l, e);

                        _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                        e.p = (e.FAILED) ? -1 : 67;

                        return ({

                            type: "FunctionExpression",

                            ASYNC: !!$1_,

                            GENERATOR: !!null,

                            nodes: [null, null, $6_],

                            pos
                        });
                    }
                }

                if (tx == "..." || ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from" || tx == "{" || tx == "[") {

                    if (e.FAILED) return;

                    const $4_ = $formal_parameters(l, e);

                    _(l, e, e.eh, [8, 256, 8, 256, 512], ")");

                    _(l, e, e.eh, [8, 256, 8, 256, 512], "{");

                    const tx = l.tx, ty = l.ty;

                    if (tx == "}") {

                        _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                        e.p = (e.FAILED) ? -1 : 67;

                        return ({

                            type: "FunctionExpression",

                            ASYNC: !!$1_,

                            GENERATOR: !!null,

                            nodes: [null, $4_, null],

                            pos
                        });
                    }

                    if (tx == "{" || tx == "delete" || tx == "void" || tx == "typeof" || tx == "+" || tx == "-" || tx == "~" || tx == "!" || tx == "++" || tx == "--" || tx == "new" || tx == "this" || ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from" || tx == "true" || tx == "false" || tx == "null" || tx == '"' || tx == "'" || ty == 1 || tx == "[" || tx == "function" || tx == "class" || tx == "/" || tx == "`" || tx == "(" || tx == "super" || tx == "import" || tx == "await" || tx == "yield" || tx == "var" || tx == ";" || tx == "if" || tx == "do" || tx == "while" || tx == "for" || tx == "switch" || tx == "continue" || tx == "break" || tx == "return" || tx == "with" || tx == "throw" || tx == "try" || tx == "debugger" || tx == "let" || tx == "const") {

                        if (e.FAILED) return;

                        const $7_ = $function_body(l, e);

                        _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                        e.p = (e.FAILED) ? -1 : 67;

                        return ({

                            type: "FunctionExpression",

                            ASYNC: !!$1_,

                            GENERATOR: !!null,

                            nodes: [null, $4_, $7_],

                            pos
                        });
                    }
                }
            }

            if (ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from") {

                if (e.FAILED) return;

                const $3_ = $binding_identifier(l, e);

                _(l, e, e.eh, [8, 256, 8, 256, 512], "(");

                const tx = l.tx, ty = l.ty;

                if (tx == ")") {

                    _(l, e, e.eh, [8, 256, 8, 256, 512], ")");

                    _(l, e, e.eh, [8, 256, 8, 256, 512], "{");

                    const tx = l.tx, ty = l.ty;

                    if (tx == "}") {

                        _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                        e.p = (e.FAILED) ? -1 : 67;

                        return ({

                            type: "FunctionExpression",

                            ASYNC: !!$1_,

                            GENERATOR: !!null,

                            nodes: [$3_, null, null],

                            pos
                        });
                    }

                    if (tx == "{" || tx == "delete" || tx == "void" || tx == "typeof" || tx == "+" || tx == "-" || tx == "~" || tx == "!" || tx == "++" || tx == "--" || tx == "new" || tx == "this" || ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from" || tx == "true" || tx == "false" || tx == "null" || tx == '"' || tx == "'" || ty == 1 || tx == "[" || tx == "function" || tx == "class" || tx == "/" || tx == "`" || tx == "(" || tx == "super" || tx == "import" || tx == "await" || tx == "yield" || tx == "var" || tx == ";" || tx == "if" || tx == "do" || tx == "while" || tx == "for" || tx == "switch" || tx == "continue" || tx == "break" || tx == "return" || tx == "with" || tx == "throw" || tx == "try" || tx == "debugger" || tx == "let" || tx == "const") {

                        if (e.FAILED) return;

                        const $7_ = $function_body(l, e);

                        _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                        e.p = (e.FAILED) ? -1 : 67;

                        return ({

                            type: "FunctionExpression",

                            ASYNC: !!$1_,

                            GENERATOR: !!null,

                            nodes: [$3_, null, $7_],

                            pos
                        });
                    }
                }

                if (tx == "..." || ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from" || tx == "{" || tx == "[") {

                    if (e.FAILED) return;

                    const $5_ = $formal_parameters(l, e);

                    _(l, e, e.eh, [8, 256, 8, 256, 512], ")");

                    _(l, e, e.eh, [8, 256, 8, 256, 512], "{");

                    const tx = l.tx, ty = l.ty;

                    if (tx == "}") {

                        _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                        e.p = (e.FAILED) ? -1 : 67;

                        return ({

                            type: "FunctionExpression",

                            ASYNC: !!$1_,

                            GENERATOR: !!null,

                            nodes: [$3_, $5_, null],

                            pos
                        });
                    }

                    if (tx == "{" || tx == "delete" || tx == "void" || tx == "typeof" || tx == "+" || tx == "-" || tx == "~" || tx == "!" || tx == "++" || tx == "--" || tx == "new" || tx == "this" || ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from" || tx == "true" || tx == "false" || tx == "null" || tx == '"' || tx == "'" || ty == 1 || tx == "[" || tx == "function" || tx == "class" || tx == "/" || tx == "`" || tx == "(" || tx == "super" || tx == "import" || tx == "await" || tx == "yield" || tx == "var" || tx == ";" || tx == "if" || tx == "do" || tx == "while" || tx == "for" || tx == "switch" || tx == "continue" || tx == "break" || tx == "return" || tx == "with" || tx == "throw" || tx == "try" || tx == "debugger" || tx == "let" || tx == "const") {

                        if (e.FAILED) return;

                        const $8_ = $function_body(l, e);

                        _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                        e.p = (e.FAILED) ? -1 : 67;

                        return ({

                            type: "FunctionExpression",

                            ASYNC: !!$1_,

                            GENERATOR: !!null,

                            nodes: [$3_, $5_, $8_],

                            pos
                        });
                    }
                }
            }
        }

        if (tx == "function") {

            _(l, e, e.eh, [8, 256, 8, 256, 512], "function");

            const tx = l.tx, ty = l.ty;

            if (tx == "*") {

                const $2_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "*");

                const tx = l.tx, ty = l.ty;

                if (tx == "(") {

                    _(l, e, e.eh, [8, 256, 8, 256, 512], "(");

                    const tx = l.tx, ty = l.ty;

                    if (tx == ")") {

                        _(l, e, e.eh, [8, 256, 8, 256, 512], ")");

                        _(l, e, e.eh, [8, 256, 8, 256, 512], "{");

                        const tx = l.tx, ty = l.ty;

                        if (tx == "}") {

                            _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                            e.p = (e.FAILED) ? -1 : 67;

                            return ({

                                type: "FunctionExpression",

                                ASYNC: !!null,

                                GENERATOR: !!$2_,

                                nodes: [null, null, null],

                                pos
                            });
                        }

                        if (tx == "{" || tx == "delete" || tx == "void" || tx == "typeof" || tx == "+" || tx == "-" || tx == "~" || tx == "!" || tx == "++" || tx == "--" || tx == "new" || tx == "this" || ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from" || tx == "true" || tx == "false" || tx == "null" || tx == '"' || tx == "'" || ty == 1 || tx == "[" || tx == "function" || tx == "class" || tx == "/" || tx == "`" || tx == "(" || tx == "super" || tx == "import" || tx == "await" || tx == "yield" || tx == "var" || tx == ";" || tx == "if" || tx == "do" || tx == "while" || tx == "for" || tx == "switch" || tx == "continue" || tx == "break" || tx == "return" || tx == "with" || tx == "throw" || tx == "try" || tx == "debugger" || tx == "let" || tx == "const") {

                            if (e.FAILED) return;

                            const $6_ = $function_body(l, e);

                            _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                            e.p = (e.FAILED) ? -1 : 67;

                            return ({

                                type: "FunctionExpression",

                                ASYNC: !!null,

                                GENERATOR: !!$2_,

                                nodes: [null, null, $6_],

                                pos
                            });
                        }
                    }

                    if (tx == "..." || ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from" || tx == "{" || tx == "[") {

                        if (e.FAILED) return;

                        const $4_ = $formal_parameters(l, e);

                        _(l, e, e.eh, [8, 256, 8, 256, 512], ")");

                        _(l, e, e.eh, [8, 256, 8, 256, 512], "{");

                        const tx = l.tx, ty = l.ty;

                        if (tx == "}") {

                            _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                            e.p = (e.FAILED) ? -1 : 67;

                            return ({

                                type: "FunctionExpression",

                                ASYNC: !!null,

                                GENERATOR: !!$2_,

                                nodes: [null, $4_, null],

                                pos
                            });
                        }

                        if (tx == "{" || tx == "delete" || tx == "void" || tx == "typeof" || tx == "+" || tx == "-" || tx == "~" || tx == "!" || tx == "++" || tx == "--" || tx == "new" || tx == "this" || ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from" || tx == "true" || tx == "false" || tx == "null" || tx == '"' || tx == "'" || ty == 1 || tx == "[" || tx == "function" || tx == "class" || tx == "/" || tx == "`" || tx == "(" || tx == "super" || tx == "import" || tx == "await" || tx == "yield" || tx == "var" || tx == ";" || tx == "if" || tx == "do" || tx == "while" || tx == "for" || tx == "switch" || tx == "continue" || tx == "break" || tx == "return" || tx == "with" || tx == "throw" || tx == "try" || tx == "debugger" || tx == "let" || tx == "const") {

                            if (e.FAILED) return;

                            const $7_ = $function_body(l, e);

                            _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                            e.p = (e.FAILED) ? -1 : 67;

                            return ({

                                type: "FunctionExpression",

                                ASYNC: !!null,

                                GENERATOR: !!$2_,

                                nodes: [null, $4_, $7_],

                                pos
                            });
                        }
                    }
                }

                if (ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from") {

                    if (e.FAILED) return;

                    const $3_ = $binding_identifier(l, e);

                    _(l, e, e.eh, [8, 256, 8, 256, 512], "(");

                    const tx = l.tx, ty = l.ty;

                    if (tx == ")") {

                        _(l, e, e.eh, [8, 256, 8, 256, 512], ")");

                        _(l, e, e.eh, [8, 256, 8, 256, 512], "{");

                        const tx = l.tx, ty = l.ty;

                        if (tx == "}") {

                            _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                            e.p = (e.FAILED) ? -1 : 67;

                            return ({

                                type: "FunctionExpression",

                                ASYNC: !!null,

                                GENERATOR: !!$2_,

                                nodes: [$3_, null, null],

                                pos
                            });
                        }

                        if (tx == "{" || tx == "delete" || tx == "void" || tx == "typeof" || tx == "+" || tx == "-" || tx == "~" || tx == "!" || tx == "++" || tx == "--" || tx == "new" || tx == "this" || ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from" || tx == "true" || tx == "false" || tx == "null" || tx == '"' || tx == "'" || ty == 1 || tx == "[" || tx == "function" || tx == "class" || tx == "/" || tx == "`" || tx == "(" || tx == "super" || tx == "import" || tx == "await" || tx == "yield" || tx == "var" || tx == ";" || tx == "if" || tx == "do" || tx == "while" || tx == "for" || tx == "switch" || tx == "continue" || tx == "break" || tx == "return" || tx == "with" || tx == "throw" || tx == "try" || tx == "debugger" || tx == "let" || tx == "const") {

                            if (e.FAILED) return;

                            const $7_ = $function_body(l, e);

                            _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                            e.p = (e.FAILED) ? -1 : 67;

                            return ({

                                type: "FunctionExpression",

                                ASYNC: !!null,

                                GENERATOR: !!$2_,

                                nodes: [$3_, null, $7_],

                                pos
                            });
                        }
                    }

                    if (tx == "..." || ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from" || tx == "{" || tx == "[") {

                        if (e.FAILED) return;

                        const $5_ = $formal_parameters(l, e);

                        _(l, e, e.eh, [8, 256, 8, 256, 512], ")");

                        _(l, e, e.eh, [8, 256, 8, 256, 512], "{");

                        const tx = l.tx, ty = l.ty;

                        if (tx == "}") {

                            _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                            e.p = (e.FAILED) ? -1 : 67;

                            return ({

                                type: "FunctionExpression",

                                ASYNC: !!null,

                                GENERATOR: !!$2_,

                                nodes: [$3_, $5_, null],

                                pos
                            });
                        }

                        if (tx == "{" || tx == "delete" || tx == "void" || tx == "typeof" || tx == "+" || tx == "-" || tx == "~" || tx == "!" || tx == "++" || tx == "--" || tx == "new" || tx == "this" || ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from" || tx == "true" || tx == "false" || tx == "null" || tx == '"' || tx == "'" || ty == 1 || tx == "[" || tx == "function" || tx == "class" || tx == "/" || tx == "`" || tx == "(" || tx == "super" || tx == "import" || tx == "await" || tx == "yield" || tx == "var" || tx == ";" || tx == "if" || tx == "do" || tx == "while" || tx == "for" || tx == "switch" || tx == "continue" || tx == "break" || tx == "return" || tx == "with" || tx == "throw" || tx == "try" || tx == "debugger" || tx == "let" || tx == "const") {

                            if (e.FAILED) return;

                            const $8_ = $function_body(l, e);

                            _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                            e.p = (e.FAILED) ? -1 : 67;

                            return ({

                                type: "FunctionExpression",

                                ASYNC: !!null,

                                GENERATOR: !!$2_,

                                nodes: [$3_, $5_, $8_],

                                pos
                            });
                        }
                    }
                }
            }

            if (tx == "(") {

                _(l, e, e.eh, [8, 256, 8, 256, 512], "(");

                const tx = l.tx, ty = l.ty;

                if (tx == ")") {

                    _(l, e, e.eh, [8, 256, 8, 256, 512], ")");

                    _(l, e, e.eh, [8, 256, 8, 256, 512], "{");

                    const tx = l.tx, ty = l.ty;

                    if (tx == "}") {

                        _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                        e.p = (e.FAILED) ? -1 : 67;

                        return ({

                            type: "FunctionExpression",

                            ASYNC: !!null,

                            GENERATOR: !!null,

                            nodes: [null, null, null],

                            pos
                        });
                    }

                    if (tx == "{" || tx == "delete" || tx == "void" || tx == "typeof" || tx == "+" || tx == "-" || tx == "~" || tx == "!" || tx == "++" || tx == "--" || tx == "new" || tx == "this" || ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from" || tx == "true" || tx == "false" || tx == "null" || tx == '"' || tx == "'" || ty == 1 || tx == "[" || tx == "function" || tx == "class" || tx == "/" || tx == "`" || tx == "(" || tx == "super" || tx == "import" || tx == "await" || tx == "yield" || tx == "var" || tx == ";" || tx == "if" || tx == "do" || tx == "while" || tx == "for" || tx == "switch" || tx == "continue" || tx == "break" || tx == "return" || tx == "with" || tx == "throw" || tx == "try" || tx == "debugger" || tx == "let" || tx == "const") {

                        if (e.FAILED) return;

                        const $5_ = $function_body(l, e);

                        _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                        e.p = (e.FAILED) ? -1 : 67;

                        return ({

                            type: "FunctionExpression",

                            ASYNC: !!null,

                            GENERATOR: !!null,

                            nodes: [null, null, $5_],

                            pos
                        });
                    }
                }

                if (tx == "..." || ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from" || tx == "{" || tx == "[") {

                    if (e.FAILED) return;

                    const $3_ = $formal_parameters(l, e);

                    _(l, e, e.eh, [8, 256, 8, 256, 512], ")");

                    _(l, e, e.eh, [8, 256, 8, 256, 512], "{");

                    const tx = l.tx, ty = l.ty;

                    if (tx == "}") {

                        _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                        e.p = (e.FAILED) ? -1 : 67;

                        return ({

                            type: "FunctionExpression",

                            ASYNC: !!null,

                            GENERATOR: !!null,

                            nodes: [null, $3_, null],

                            pos
                        });
                    }

                    if (tx == "{" || tx == "delete" || tx == "void" || tx == "typeof" || tx == "+" || tx == "-" || tx == "~" || tx == "!" || tx == "++" || tx == "--" || tx == "new" || tx == "this" || ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from" || tx == "true" || tx == "false" || tx == "null" || tx == '"' || tx == "'" || ty == 1 || tx == "[" || tx == "function" || tx == "class" || tx == "/" || tx == "`" || tx == "(" || tx == "super" || tx == "import" || tx == "await" || tx == "yield" || tx == "var" || tx == ";" || tx == "if" || tx == "do" || tx == "while" || tx == "for" || tx == "switch" || tx == "continue" || tx == "break" || tx == "return" || tx == "with" || tx == "throw" || tx == "try" || tx == "debugger" || tx == "let" || tx == "const") {

                        if (e.FAILED) return;

                        const $6_ = $function_body(l, e);

                        _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                        e.p = (e.FAILED) ? -1 : 67;

                        return ({

                            type: "FunctionExpression",

                            ASYNC: !!null,

                            GENERATOR: !!null,

                            nodes: [null, $3_, $6_],

                            pos
                        });
                    }
                }
            }

            if (ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from") {

                if (e.FAILED) return;

                const $2_ = $binding_identifier(l, e);

                _(l, e, e.eh, [8, 256, 8, 256, 512], "(");

                const tx = l.tx, ty = l.ty;

                if (tx == ")") {

                    _(l, e, e.eh, [8, 256, 8, 256, 512], ")");

                    _(l, e, e.eh, [8, 256, 8, 256, 512], "{");

                    const tx = l.tx, ty = l.ty;

                    if (tx == "}") {

                        _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                        e.p = (e.FAILED) ? -1 : 67;

                        return ({

                            type: "FunctionExpression",

                            ASYNC: !!null,

                            GENERATOR: !!null,

                            nodes: [$2_, null, null],

                            pos
                        });
                    }

                    if (tx == "{" || tx == "delete" || tx == "void" || tx == "typeof" || tx == "+" || tx == "-" || tx == "~" || tx == "!" || tx == "++" || tx == "--" || tx == "new" || tx == "this" || ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from" || tx == "true" || tx == "false" || tx == "null" || tx == '"' || tx == "'" || ty == 1 || tx == "[" || tx == "function" || tx == "class" || tx == "/" || tx == "`" || tx == "(" || tx == "super" || tx == "import" || tx == "await" || tx == "yield" || tx == "var" || tx == ";" || tx == "if" || tx == "do" || tx == "while" || tx == "for" || tx == "switch" || tx == "continue" || tx == "break" || tx == "return" || tx == "with" || tx == "throw" || tx == "try" || tx == "debugger" || tx == "let" || tx == "const") {

                        if (e.FAILED) return;

                        const $6_ = $function_body(l, e);

                        _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                        e.p = (e.FAILED) ? -1 : 67;

                        return ({

                            type: "FunctionExpression",

                            ASYNC: !!null,

                            GENERATOR: !!null,

                            nodes: [$2_, null, $6_],

                            pos
                        });
                    }
                }

                if (tx == "..." || ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from" || tx == "{" || tx == "[") {

                    if (e.FAILED) return;

                    const $4_ = $formal_parameters(l, e);

                    _(l, e, e.eh, [8, 256, 8, 256, 512], ")");

                    _(l, e, e.eh, [8, 256, 8, 256, 512], "{");

                    const tx = l.tx, ty = l.ty;

                    if (tx == "}") {

                        _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                        e.p = (e.FAILED) ? -1 : 67;

                        return ({

                            type: "FunctionExpression",

                            ASYNC: !!null,

                            GENERATOR: !!null,

                            nodes: [$2_, $4_, null],

                            pos
                        });
                    }

                    if (tx == "{" || tx == "delete" || tx == "void" || tx == "typeof" || tx == "+" || tx == "-" || tx == "~" || tx == "!" || tx == "++" || tx == "--" || tx == "new" || tx == "this" || ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from" || tx == "true" || tx == "false" || tx == "null" || tx == '"' || tx == "'" || ty == 1 || tx == "[" || tx == "function" || tx == "class" || tx == "/" || tx == "`" || tx == "(" || tx == "super" || tx == "import" || tx == "await" || tx == "yield" || tx == "var" || tx == ";" || tx == "if" || tx == "do" || tx == "while" || tx == "for" || tx == "switch" || tx == "continue" || tx == "break" || tx == "return" || tx == "with" || tx == "throw" || tx == "try" || tx == "debugger" || tx == "let" || tx == "const") {

                        if (e.FAILED) return;

                        const $7_ = $function_body(l, e);

                        _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                        e.p = (e.FAILED) ? -1 : 67;

                        return ({

                            type: "FunctionExpression",

                            ASYNC: !!null,

                            GENERATOR: !!null,

                            nodes: [$2_, $4_, $7_],

                            pos
                        });
                    }
                }
            }
        }

        e.FAILED = true;
    }
    function $unique_formal_parameters(l, e) {

        if (e.FAILED) return;

        const $1_ = $formal_parameters(l, e);

        e.p = (e.FAILED) ? -1 : 68;

        return $1_;
    }
    function $formal_parameters(l, e) {

        const tx = l.tx, ty = l.ty;

        if (tx == "...") {

            if (e.FAILED) return;

            const $1_ = $function_rest_parameter(l, e);

            e.p = (e.FAILED) ? -1 : 69;

            return ({ type: "FormalParameters", nodes: [$1_], pos });
        }

        if (ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from" || tx == "{" || tx == "[") {

            if (e.FAILED) return;

            const $1_ = $formal_parameter_list(l, e);

            const tx = l.tx;

            if (tx == ",") {

                _(l, e, e.eh, [8, 256, 8, 256, 512], ",");

                const tx = l.tx;

                if (tx == "...") {

                    if (e.FAILED) return;

                    const $3_ = $function_rest_parameter(l, e);

                    e.p = (e.FAILED) ? -1 : 69;

                    return ({ type: "FormalParameters", nodes: [...$1_, $3_], pos });
                }

                e.p = (e.FAILED) ? -1 : 69;

                return ({ type: "FormalParameters", nodes: $1_, pos });
            }

            e.p = (e.FAILED) ? -1 : 69;

            return ({ type: "FormalParameters", nodes: $1_, pos });
        }

        e.FAILED = true;
    }
    ;
    ;
    function $function_rest_parameter(l, e) {

        if (e.FAILED) return;

        const $1_ = $binding_rest_element(l, e);

        e.p = (e.FAILED) ? -1 : 72;

        return $1_;
    }
    function $formal_parameter(l, e) {

        if (e.FAILED) return;

        const $1_ = $binding_element(l, e);

        e.p = (e.FAILED) ? -1 : 73;

        return $1_;
    }
    function $function_body(l, e) {

        if (e.FAILED) return;

        const $1_ = $function_statement_list(l, e);

        e.p = (e.FAILED) ? -1 : 74;

        return ({ type: "FunctionBody", nodes: $1_, pos });
    }
    function $function_statement_list(l, e) {

        const tx = l.tx, ty = l.ty;

        if (tx == "}") { e.p = (e.FAILED) ? -1 : 75; return $1_; }

        if (tx == "{" || tx == "delete" || tx == "void" || tx == "typeof" || tx == "+" || tx == "-" || tx == "~" || tx == "!" || tx == "++" || tx == "--" || tx == "new" || tx == "this" || ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from" || tx == "true" || tx == "false" || tx == "null" || tx == '"' || tx == "'" || ty == 1 || tx == "[" || tx == "function" || tx == "class" || tx == "/" || tx == "`" || tx == "(" || tx == "super" || tx == "import" || tx == "await" || tx == "yield" || tx == "var" || tx == ";" || tx == "if" || tx == "do" || tx == "while" || tx == "for" || tx == "switch" || tx == "continue" || tx == "break" || tx == "return" || tx == "with" || tx == "throw" || tx == "try" || tx == "debugger" || tx == "let" || tx == "const") {

            if (e.FAILED) return;

            const $1_ = $statement_list(l, e);

            e.p = (e.FAILED) ? -1 : 75;

            return $1_;
        }

        e.FAILED = true;
    }
    function $yield_expression_group_0127_110(l, e) {

        const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "*");

        e.p = (e.FAILED) ? -1 : 76;

        return $1_;
    }
    function $yield_expression(l, e) {

        _(l, e, e.eh, [8, 256, 8, 256, 512], "yield");

        const tx = l.tx, ty = l.ty;

        if (ty == 256) {

            _(l, e, e.eh, [8, 256, 8, 256, 512], 256);

            e.p = (e.FAILED) ? -1 : 77;

            return ({ type: "YieldExpression", nodes: [], pos });
        }

        if (tx == "*") {

            if (e.FAILED) return;

            const $2_ = $yield_expression_group_0127_110(l, e);

            if (e.FAILED) return;

            const $3_ = $assignment_expression(l, e);

            e.p = (e.FAILED) ? -1 : 77;

            return ({

                type: "YieldExpression",

                nodes: [$3_],

                pos,

                GENERATOR: !!$2_
            });
        }

        if (tx == "delete" || tx == "void" || tx == "typeof" || tx == "+" || tx == "-" || tx == "~" || tx == "!" || tx == "++" || tx == "--" || tx == "new" || tx == "this" || ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from" || tx == "true" || tx == "false" || tx == "null" || tx == '"' || tx == "'" || ty == 1 || tx == "[" || tx == "{" || tx == "function" || tx == "class" || tx == "/" || tx == "`" || tx == "(" || tx == "super" || tx == "import" || tx == "await" || tx == "yield") {

            if (e.FAILED) return;

            const $2_ = $assignment_expression(l, e);

            e.p = (e.FAILED) ? -1 : 77;

            return ({

                type: "YieldExpression",

                nodes: [$2_],

                pos,

                GENERATOR: !!null
            });
        }

        e.FAILED = true;
    }
    ;
    function $arrow_parameters(l, e) {

        const tx = l.tx, ty = l.ty;

        if (tx == "(") {

            if (e.FAILED) return;

            const $1_ = $cover_parenthesized_expression_and_arrow_parameter_list(l, e);

            e.p = (e.FAILED) ? -1 : 79;

            return $1_;
        }

        if (ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from") {

            if (e.FAILED) return;

            const $1_ = $identifier_reference(l, e);

            e.p = (e.FAILED) ? -1 : 79;

            return ($1_.type = "IdentifierBinding", $1_);
        }

        e.FAILED = true;
    }
    ;
    function $cover_call_expression_and_async_arrow_head(l, e) {

        if (e.FAILED) return;

        const $1_ = $member_expression(l, e);

        if (e.FAILED) return;

        const $2_ = $arguments(l, e);

        e.p = (e.FAILED) ? -1 : 81;

        return ({ type: "CallExpression", nodes: [$1_, $2_], pos });
    }
    function $class_declaration(l, e) {

        _(l, e, e.eh, [8, 256, 8, 256, 512], "class");

        const tx = l.tx, ty = l.ty;

        if (tx == "extends") {

            if (e.FAILED) return;

            const $2_ = $class_heritage(l, e);

            _(l, e, e.eh, [8, 256, 8, 256, 512], "{");

            const tx = l.tx, ty = l.ty;

            if (tx == "}") {

                _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                e.p = (e.FAILED) ? -1 : 82;

                return ({ type: "Class", nodes: [null, $2_], pos });
            }

            if (tx == ";" || tx == "static" || tx == "async" || tx == "get" || tx == "set" || tx == "*" || ty == 2 || tx == "$" || tx == "_" || tx == "null" || tx == "true" || tx == "false" || tx == "await" || tx == "break" || tx == "case" || tx == "catch" || tx == "class" || tx == "const" || tx == "continue" || tx == "debugger" || tx == "default" || tx == "delete" || tx == "do" || tx == "else" || tx == "export" || tx == "extends" || tx == "finally" || tx == "for" || tx == "function" || tx == "if" || tx == "import" || tx == "in" || tx == "instanceof" || tx == "new" || tx == "return" || tx == "super" || tx == "switch" || tx == "this" || tx == "throw" || tx == "try" || tx == "typeof" || tx == "var" || tx == "void" || tx == "while" || tx == "with" || tx == "yield" || tx == "implements" || tx == "package" || tx == "protected" || tx == "interface" || tx == "private" || tx == "public" || tx == "target" || tx == "as" || tx == "from" || tx == '"' || tx == "'" || tx == "-" || ty == 1 || tx == "[") {

                if (e.FAILED) return;

                const $4_ = $class_body(l, e);

                _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                e.p = (e.FAILED) ? -1 : 82;

                return ({ type: "Class", nodes: [null, $2_, ...$4_], pos });
            }
        }

        if (tx == "{") {

            _(l, e, e.eh, [8, 256, 8, 256, 512], "{");

            const tx = l.tx, ty = l.ty;

            if (tx == "}") {

                _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                e.p = (e.FAILED) ? -1 : 82;

                return ({ type: "Class", nodes: [null, null], pos });
            }

            if (tx == ";" || tx == "static" || tx == "async" || tx == "get" || tx == "set" || tx == "*" || ty == 2 || tx == "$" || tx == "_" || tx == "null" || tx == "true" || tx == "false" || tx == "await" || tx == "break" || tx == "case" || tx == "catch" || tx == "class" || tx == "const" || tx == "continue" || tx == "debugger" || tx == "default" || tx == "delete" || tx == "do" || tx == "else" || tx == "export" || tx == "extends" || tx == "finally" || tx == "for" || tx == "function" || tx == "if" || tx == "import" || tx == "in" || tx == "instanceof" || tx == "new" || tx == "return" || tx == "super" || tx == "switch" || tx == "this" || tx == "throw" || tx == "try" || tx == "typeof" || tx == "var" || tx == "void" || tx == "while" || tx == "with" || tx == "yield" || tx == "implements" || tx == "package" || tx == "protected" || tx == "interface" || tx == "private" || tx == "public" || tx == "target" || tx == "as" || tx == "from" || tx == '"' || tx == "'" || tx == "-" || ty == 1 || tx == "[") {

                if (e.FAILED) return;

                const $3_ = $class_body(l, e);

                _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                e.p = (e.FAILED) ? -1 : 82;

                return ({ type: "Class", nodes: [null, null, ...$3_], pos });
            }
        }

        if (ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from") {

            if (e.FAILED) return;

            const $2_ = $binding_identifier(l, e);

            const tx = l.tx;

            if (tx == "extends") {

                if (e.FAILED) return;

                const $3_ = $class_heritage(l, e);

                _(l, e, e.eh, [8, 256, 8, 256, 512], "{");

                const tx = l.tx, ty = l.ty;

                if (tx == "}") {

                    _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                    e.p = (e.FAILED) ? -1 : 82;

                    return ({ type: "Class", nodes: [$2_, $3_], pos });
                }

                if (tx == ";" || tx == "static" || tx == "async" || tx == "get" || tx == "set" || tx == "*" || ty == 2 || tx == "$" || tx == "_" || tx == "null" || tx == "true" || tx == "false" || tx == "await" || tx == "break" || tx == "case" || tx == "catch" || tx == "class" || tx == "const" || tx == "continue" || tx == "debugger" || tx == "default" || tx == "delete" || tx == "do" || tx == "else" || tx == "export" || tx == "extends" || tx == "finally" || tx == "for" || tx == "function" || tx == "if" || tx == "import" || tx == "in" || tx == "instanceof" || tx == "new" || tx == "return" || tx == "super" || tx == "switch" || tx == "this" || tx == "throw" || tx == "try" || tx == "typeof" || tx == "var" || tx == "void" || tx == "while" || tx == "with" || tx == "yield" || tx == "implements" || tx == "package" || tx == "protected" || tx == "interface" || tx == "private" || tx == "public" || tx == "target" || tx == "as" || tx == "from" || tx == '"' || tx == "'" || tx == "-" || ty == 1 || tx == "[") {

                    if (e.FAILED) return;

                    const $5_ = $class_body(l, e);

                    _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                    e.p = (e.FAILED) ? -1 : 82;

                    return ({ type: "Class", nodes: [$2_, $3_, ...$5_], pos });
                }
            }

            if (tx == "{") {

                _(l, e, e.eh, [8, 256, 8, 256, 512], "{");

                const tx = l.tx, ty = l.ty;

                if (tx == "}") {

                    _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                    e.p = (e.FAILED) ? -1 : 82;

                    return ({ type: "Class", nodes: [$2_, null], pos });
                }

                if (tx == ";" || tx == "static" || tx == "async" || tx == "get" || tx == "set" || tx == "*" || ty == 2 || tx == "$" || tx == "_" || tx == "null" || tx == "true" || tx == "false" || tx == "await" || tx == "break" || tx == "case" || tx == "catch" || tx == "class" || tx == "const" || tx == "continue" || tx == "debugger" || tx == "default" || tx == "delete" || tx == "do" || tx == "else" || tx == "export" || tx == "extends" || tx == "finally" || tx == "for" || tx == "function" || tx == "if" || tx == "import" || tx == "in" || tx == "instanceof" || tx == "new" || tx == "return" || tx == "super" || tx == "switch" || tx == "this" || tx == "throw" || tx == "try" || tx == "typeof" || tx == "var" || tx == "void" || tx == "while" || tx == "with" || tx == "yield" || tx == "implements" || tx == "package" || tx == "protected" || tx == "interface" || tx == "private" || tx == "public" || tx == "target" || tx == "as" || tx == "from" || tx == '"' || tx == "'" || tx == "-" || ty == 1 || tx == "[") {

                    if (e.FAILED) return;

                    const $4_ = $class_body(l, e);

                    _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                    e.p = (e.FAILED) ? -1 : 82;

                    return ({ type: "Class", nodes: [$2_, null, ...$4_], pos });
                }
            }
        }

        e.FAILED = true;
    }
    function $class_expression(l, e) {

        _(l, e, e.eh, [8, 256, 8, 256, 512], "class");

        const tx = l.tx, ty = l.ty;

        if (tx == "extends") {

            if (e.FAILED) return;

            const $2_ = $class_heritage(l, e);

            _(l, e, e.eh, [8, 256, 8, 256, 512], "{");

            const tx = l.tx, ty = l.ty;

            if (tx == "}") {

                _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                e.p = (e.FAILED) ? -1 : 83;

                return ({ type: "Class", nodes: [null, $2_], pos });
            }

            if (tx == ";" || tx == "static" || tx == "async" || tx == "get" || tx == "set" || tx == "*" || ty == 2 || tx == "$" || tx == "_" || tx == "null" || tx == "true" || tx == "false" || tx == "await" || tx == "break" || tx == "case" || tx == "catch" || tx == "class" || tx == "const" || tx == "continue" || tx == "debugger" || tx == "default" || tx == "delete" || tx == "do" || tx == "else" || tx == "export" || tx == "extends" || tx == "finally" || tx == "for" || tx == "function" || tx == "if" || tx == "import" || tx == "in" || tx == "instanceof" || tx == "new" || tx == "return" || tx == "super" || tx == "switch" || tx == "this" || tx == "throw" || tx == "try" || tx == "typeof" || tx == "var" || tx == "void" || tx == "while" || tx == "with" || tx == "yield" || tx == "implements" || tx == "package" || tx == "protected" || tx == "interface" || tx == "private" || tx == "public" || tx == "target" || tx == "as" || tx == "from" || tx == '"' || tx == "'" || tx == "-" || ty == 1 || tx == "[") {

                if (e.FAILED) return;

                const $4_ = $class_body(l, e);

                _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                e.p = (e.FAILED) ? -1 : 83;

                return ({ type: "Class", nodes: [null, $2_, ...$4_], pos });
            }
        }

        if (tx == "{") {

            _(l, e, e.eh, [8, 256, 8, 256, 512], "{");

            const tx = l.tx, ty = l.ty;

            if (tx == "}") {

                _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                e.p = (e.FAILED) ? -1 : 83;

                return ({ type: "Class", nodes: [null, null], pos });
            }

            if (tx == ";" || tx == "static" || tx == "async" || tx == "get" || tx == "set" || tx == "*" || ty == 2 || tx == "$" || tx == "_" || tx == "null" || tx == "true" || tx == "false" || tx == "await" || tx == "break" || tx == "case" || tx == "catch" || tx == "class" || tx == "const" || tx == "continue" || tx == "debugger" || tx == "default" || tx == "delete" || tx == "do" || tx == "else" || tx == "export" || tx == "extends" || tx == "finally" || tx == "for" || tx == "function" || tx == "if" || tx == "import" || tx == "in" || tx == "instanceof" || tx == "new" || tx == "return" || tx == "super" || tx == "switch" || tx == "this" || tx == "throw" || tx == "try" || tx == "typeof" || tx == "var" || tx == "void" || tx == "while" || tx == "with" || tx == "yield" || tx == "implements" || tx == "package" || tx == "protected" || tx == "interface" || tx == "private" || tx == "public" || tx == "target" || tx == "as" || tx == "from" || tx == '"' || tx == "'" || tx == "-" || ty == 1 || tx == "[") {

                if (e.FAILED) return;

                const $3_ = $class_body(l, e);

                _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                e.p = (e.FAILED) ? -1 : 83;

                return ({ type: "Class", nodes: [null, null, ...$3_], pos });
            }
        }

        if (ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from") {

            if (e.FAILED) return;

            const $2_ = $binding_identifier(l, e);

            const tx = l.tx;

            if (tx == "extends") {

                if (e.FAILED) return;

                const $3_ = $class_heritage(l, e);

                _(l, e, e.eh, [8, 256, 8, 256, 512], "{");

                const tx = l.tx, ty = l.ty;

                if (tx == "}") {

                    _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                    e.p = (e.FAILED) ? -1 : 83;

                    return ({ type: "Class", nodes: [$2_, $3_], pos });
                }

                if (tx == ";" || tx == "static" || tx == "async" || tx == "get" || tx == "set" || tx == "*" || ty == 2 || tx == "$" || tx == "_" || tx == "null" || tx == "true" || tx == "false" || tx == "await" || tx == "break" || tx == "case" || tx == "catch" || tx == "class" || tx == "const" || tx == "continue" || tx == "debugger" || tx == "default" || tx == "delete" || tx == "do" || tx == "else" || tx == "export" || tx == "extends" || tx == "finally" || tx == "for" || tx == "function" || tx == "if" || tx == "import" || tx == "in" || tx == "instanceof" || tx == "new" || tx == "return" || tx == "super" || tx == "switch" || tx == "this" || tx == "throw" || tx == "try" || tx == "typeof" || tx == "var" || tx == "void" || tx == "while" || tx == "with" || tx == "yield" || tx == "implements" || tx == "package" || tx == "protected" || tx == "interface" || tx == "private" || tx == "public" || tx == "target" || tx == "as" || tx == "from" || tx == '"' || tx == "'" || tx == "-" || ty == 1 || tx == "[") {

                    if (e.FAILED) return;

                    const $5_ = $class_body(l, e);

                    _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                    e.p = (e.FAILED) ? -1 : 83;

                    return ({ type: "Class", nodes: [$2_, $3_, ...$5_], pos });
                }
            }

            if (tx == "{") {

                _(l, e, e.eh, [8, 256, 8, 256, 512], "{");

                const tx = l.tx, ty = l.ty;

                if (tx == "}") {

                    _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                    e.p = (e.FAILED) ? -1 : 83;

                    return ({ type: "Class", nodes: [$2_, null], pos });
                }

                if (tx == ";" || tx == "static" || tx == "async" || tx == "get" || tx == "set" || tx == "*" || ty == 2 || tx == "$" || tx == "_" || tx == "null" || tx == "true" || tx == "false" || tx == "await" || tx == "break" || tx == "case" || tx == "catch" || tx == "class" || tx == "const" || tx == "continue" || tx == "debugger" || tx == "default" || tx == "delete" || tx == "do" || tx == "else" || tx == "export" || tx == "extends" || tx == "finally" || tx == "for" || tx == "function" || tx == "if" || tx == "import" || tx == "in" || tx == "instanceof" || tx == "new" || tx == "return" || tx == "super" || tx == "switch" || tx == "this" || tx == "throw" || tx == "try" || tx == "typeof" || tx == "var" || tx == "void" || tx == "while" || tx == "with" || tx == "yield" || tx == "implements" || tx == "package" || tx == "protected" || tx == "interface" || tx == "private" || tx == "public" || tx == "target" || tx == "as" || tx == "from" || tx == '"' || tx == "'" || tx == "-" || ty == 1 || tx == "[") {

                    if (e.FAILED) return;

                    const $4_ = $class_body(l, e);

                    _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                    e.p = (e.FAILED) ? -1 : 83;

                    return ({ type: "Class", nodes: [$2_, null, ...$4_], pos });
                }
            }
        }

        e.FAILED = true;
    }
    function $class_heritage(l, e) {

        _(l, e, e.eh, [8, 256, 8, 256, 512], "extends");

        if (e.FAILED) return;

        const $2_ = $left_hand_side_expression(l, e);

        e.p = (e.FAILED) ? -1 : 84;

        return $2_;
    }
    ;
    function $class_element(l, e) {

        const tx = l.tx, ty = l.ty;

        if (tx == "static") {

            _(l, e, e.eh, [8, 256, 8, 256, 512], "static");

            if (e.FAILED) return;

            const $2_ = $method_definition(l, e);

            e.p = (e.FAILED) ? -1 : 86;

            return (($2_.STATIC = true, $2_));
        }

        if (tx == "async" || tx == "get" || tx == "set" || tx == "*" || ty == 2 || tx == "$" || tx == "_" || tx == "null" || tx == "true" || tx == "false" || tx == "await" || tx == "break" || tx == "case" || tx == "catch" || tx == "class" || tx == "const" || tx == "continue" || tx == "debugger" || tx == "default" || tx == "delete" || tx == "do" || tx == "else" || tx == "export" || tx == "extends" || tx == "finally" || tx == "for" || tx == "function" || tx == "if" || tx == "import" || tx == "in" || tx == "instanceof" || tx == "new" || tx == "return" || tx == "super" || tx == "switch" || tx == "this" || tx == "throw" || tx == "try" || tx == "typeof" || tx == "var" || tx == "void" || tx == "while" || tx == "with" || tx == "yield" || tx == "implements" || tx == "package" || tx == "protected" || tx == "interface" || tx == "private" || tx == "public" || tx == "target" || tx == "as" || tx == "from" || tx == '"' || tx == "'" || tx == "-" || ty == 1 || tx == "[") {

            if (e.FAILED) return;

            const $1_ = $method_definition(l, e);

            e.p = (e.FAILED) ? -1 : 86;

            return $1_;
        }

        e.FAILED = true;
    }
    ;
    function $property_set_parameter_list(l, e) {

        if (e.FAILED) return;

        const $1_ = $formal_parameter(l, e);

        e.p = (e.FAILED) ? -1 : 88;

        return $1_;
    }
    ;
    ;
    ;
    ;
    function $super_property(l, e) {

        _(l, e, e.eh, [8, 256, 8, 256, 512], "super");

        const tx = l.tx;

        if (tx == ".") {

            _(l, e, e.eh, [8, 256, 8, 256, 512], ".");

            if (e.FAILED) return;

            const $3_ = $identifier_name(l, e);

            e.p = (e.FAILED) ? -1 : 93;

            return ((
                $3_.type |= e.cls.PROPERTY_NAME,
                {

                    type: "SuperExpression",

                    nodes: [$3_],

                    pos,

                    COMPUTED: false
                }));
        }

        if (tx == "[") {

            _(l, e, e.eh, [8, 256, 8, 256, 512], "[");

            if (e.FAILED) return;

            const $3_ = $expression(l, e);

            _(l, e, e.eh, [8, 256, 8, 256, 512], "]");

            e.p = (e.FAILED) ? -1 : 93;

            return ({

                type: "SuperExpression",

                nodes: [$3_],

                pos,

                COMPUTED: true
            });
        }

        e.FAILED = true;
    }
    function $meta_property(l, e) {

        const tx = l.tx;

        if (tx == "new") {

            if (e.FAILED) return;

            const $1_ = $new_target(l, e);

            e.p = (e.FAILED) ? -1 : 94;

            return $1_;
        }

        if (tx == "import") {

            if (e.FAILED) return;

            const $1_ = $import_meta(l, e);

            e.p = (e.FAILED) ? -1 : 94;

            return $1_;
        }

        e.FAILED = true;
    }
    function $import_meta(l, e) {

        _(l, e, e.eh, [8, 256, 8, 256, 512], "import");

        _(l, e, e.eh, [8, 256, 8, 256, 512], ".");

        _(l, e, e.eh, [8, 256, 8, 256, 512], "meta");

        e.p = (e.FAILED) ? -1 : 95;

        return ({ type: "ImportMeta", pos });
    }
    function $new_target(l, e) {

        _(l, e, e.eh, [8, 256, 8, 256, 512], "new");

        _(l, e, e.eh, [8, 256, 8, 256, 512], ".");

        _(l, e, e.eh, [8, 256, 8, 256, 512], "target");

        e.p = (e.FAILED) ? -1 : 96;

        return ({ type: "NewTarget", pos });
    }
    ;
    function $super_call(l, e) {

        _(l, e, e.eh, [8, 256, 8, 256, 512], "super");

        if (e.FAILED) return;

        const $2_ = $arguments(l, e);

        e.p = (e.FAILED) ? -1 : 98;

        return ({ type: "SuperCall", nodes: [$2_], pos });
    }
    function $import_call(l, e) {

        _(l, e, e.eh, [8, 256, 8, 256, 512], "import");

        _(l, e, e.eh, [8, 256, 8, 256, 512], "(");

        if (e.FAILED) return;

        const $3_ = $assignment_expression(l, e);

        _(l, e, e.eh, [8, 256, 8, 256, 512], ")");

        e.p = (e.FAILED) ? -1 : 99;

        return ({ type: "ImportCall", nodes: [$3_], pos });
    }
    function $arguments(l, e) {

        _(l, e, e.eh, [8, 256, 8, 256, 512], "(");

        const tx = l.tx, ty = l.ty;

        if (tx == ",") {

            _(l, e, e.eh, [8, 256, 8, 256, 512], ",");

            _(l, e, e.eh, [8, 256, 8, 256, 512], ")");

            e.p = (e.FAILED) ? -1 : 100;

            return ({ type: "Arguments", nodes: null || [], pos });
        }

        if (tx == ")") {

            _(l, e, e.eh, [8, 256, 8, 256, 512], ")");

            e.p = (e.FAILED) ? -1 : 100;

            return ({ type: "Arguments", nodes: null || [], pos });
        }

        if (tx == "..." || tx == "delete" || tx == "void" || tx == "typeof" || tx == "+" || tx == "-" || tx == "~" || tx == "!" || tx == "++" || tx == "--" || tx == "new" || tx == "this" || ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from" || tx == "true" || tx == "false" || tx == "null" || tx == '"' || tx == "'" || ty == 1 || tx == "[" || tx == "{" || tx == "function" || tx == "class" || tx == "/" || tx == "`" || tx == "(" || tx == "super" || tx == "import" || tx == "await" || tx == "yield") {

            if (e.FAILED) return;

            const $2_ = $argument_list(l, e);

            const tx = l.tx;

            if (tx == ",") {

                _(l, e, e.eh, [8, 256, 8, 256, 512], ",");

                _(l, e, e.eh, [8, 256, 8, 256, 512], ")");

                e.p = (e.FAILED) ? -1 : 100;

                return ({ type: "Arguments", nodes: $2_ || [], pos });
            }

            if (tx == ")") {

                _(l, e, e.eh, [8, 256, 8, 256, 512], ")");

                e.p = (e.FAILED) ? -1 : 100;

                return ({ type: "Arguments", nodes: $2_ || [], pos });
            }
        }

        e.FAILED = true;
    }
    function $argument_list_group_1179_111(l, e) {

        const tx = l.tx, ty = l.ty;

        if (tx == "...") {

            _(l, e, e.eh, [8, 256, 8, 256, 512], "...");

            if (e.FAILED) return;

            const $2_ = $assignment_expression(l, e);

            e.p = (e.FAILED) ? -1 : 101;

            return ({ type: "Spread", nodes: [$2_], pos });
        }

        if (tx == "delete" || tx == "void" || tx == "typeof" || tx == "+" || tx == "-" || tx == "~" || tx == "!" || tx == "++" || tx == "--" || tx == "new" || tx == "this" || ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from" || tx == "true" || tx == "false" || tx == "null" || tx == '"' || tx == "'" || ty == 1 || tx == "[" || tx == "{" || tx == "function" || tx == "class" || tx == "/" || tx == "`" || tx == "(" || tx == "super" || tx == "import" || tx == "await" || tx == "yield") {

            if (e.FAILED) return;

            const $1_ = $assignment_expression(l, e);

            e.p = (e.FAILED) ? -1 : 101;

            return $1_;
        }

        e.FAILED = true;
    }
    ;
    ;
    ;
    ;
    ;
    function $await_expression(l, e) {

        _(l, e, e.eh, [8, 256, 8, 256, 512], "await");

        if (e.FAILED) return;

        const $2_ = $unary_expression(l, e);

        e.p = (e.FAILED) ? -1 : 107;

        return ({ type: "AwaitExpression", nodes: [$2_], pos });
    }
    ;
    function $assignment_operator(l, e) {

        const tx = l.tx;

        if (tx == "*=") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "*=");

            e.p = (e.FAILED) ? -1 : 109;

            return $1_;
        }

        if (tx == "/=") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "/=");

            e.p = (e.FAILED) ? -1 : 109;

            return $1_;
        }

        if (tx == "%=") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "%=");

            e.p = (e.FAILED) ? -1 : 109;

            return $1_;
        }

        if (tx == "+=") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "+=");

            e.p = (e.FAILED) ? -1 : 109;

            return $1_;
        }

        if (tx == "-=") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "-=");

            e.p = (e.FAILED) ? -1 : 109;

            return $1_;
        }

        if (tx == "<<=") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "<<=");

            e.p = (e.FAILED) ? -1 : 109;

            return $1_;
        }

        if (tx == ">>=") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], ">>=");

            e.p = (e.FAILED) ? -1 : 109;

            return $1_;
        }

        if (tx == ">>>=") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], ">>>=");

            e.p = (e.FAILED) ? -1 : 109;

            return $1_;
        }

        if (tx == "&=") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "&=");

            e.p = (e.FAILED) ? -1 : 109;

            return $1_;
        }

        if (tx == "^=") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "^=");

            e.p = (e.FAILED) ? -1 : 109;

            return $1_;
        }

        if (tx == "|=") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "|=");

            e.p = (e.FAILED) ? -1 : 109;

            return $1_;
        }

        if (tx == "**=") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "**=");

            e.p = (e.FAILED) ? -1 : 109;

            return $1_;
        }

        e.FAILED = true;
    }
    function $conditional_expression(l, e) {

        if (e.FAILED) return;

        const $1_ = $short_circuit_expression(l, e);

        const tx = l.tx;

        if (tx == "?") {

            _(l, e, e.eh, [8, 256, 8, 256, 512], "?");

            if (e.FAILED) return;

            const $3_ = $assignment_expression(l, e);

            _(l, e, e.eh, [8, 256, 8, 256, 512], ":");

            if (e.FAILED) return;

            const $5_ = $assignment_expression(l, e);

            e.p = (e.FAILED) ? -1 : 110;

            return ({

                type: "ConditionalExpression",

                nodes: [$1_, $3_, $5_],

                pos
            });
        }

        e.p = (e.FAILED) ? -1 : 110;

        return $1_;
    }
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    function $update_expression(l, e) {

        const tx = l.tx, ty = l.ty;

        if (tx == "++") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "++");

            if (e.FAILED) return;

            const $2_ = $unary_expression(l, e);

            e.p = (e.FAILED) ? -1 : 127;

            return ({ type: "PreExpression", symbol: $1_, nodes: [$2_], pos });
        }

        if (tx == "--") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "--");

            if (e.FAILED) return;

            const $2_ = $unary_expression(l, e);

            e.p = (e.FAILED) ? -1 : 127;

            return ({ type: "PreExpression", symbol: $1_, nodes: [$2_], pos });
        }

        if (tx == "new" || tx == "this" || ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from" || tx == "true" || tx == "false" || tx == "null" || tx == '"' || tx == "'" || tx == "-" || ty == 1 || tx == "[" || tx == "{" || tx == "function" || tx == "class" || tx == "/" || tx == "`" || tx == "(" || tx == "super" || tx == "import") {

            if (e.FAILED) return;

            const $1_ = $left_hand_side_expression(l, e);

            const tx = l.tx;

            if (tx == "++") {

                const $2_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "++");

                e.p = (e.FAILED) ? -1 : 127;

                return ({ type: "PostExpression", symbol: $2_, nodes: [$1_], pos });
            }

            if (tx == "--") {

                const $2_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "--");

                e.p = (e.FAILED) ? -1 : 127;

                return ({ type: "PostExpression", symbol: $2_, nodes: [$1_], pos });
            }

            e.p = (e.FAILED) ? -1 : 127;

            return $1_;
        }

        e.FAILED = true;
    }
    function $cover_parenthesized_expression_and_arrow_parameter_list_group_1279_114(l, e) {

        _(l, e, e.eh, [8, 256, 8, 256, 512], "...");

        if (e.FAILED) return;

        const $2_ = $binding_identifier(l, e);

        e.p = (e.FAILED) ? -1 : 128;

        return ({ type: "Spread", nodes: [$2_], pos });
    }
    function $cover_parenthesized_expression_and_arrow_parameter_list_group_1281_115(l, e) {

        _(l, e, e.eh, [8, 256, 8, 256, 512], "...");

        if (e.FAILED) return;

        const $2_ = $binding_pattern(l, e);

        e.p = (e.FAILED) ? -1 : 129;

        return ({ type: "Spread", nodes: [$2_], pos });
    }
    ;
    function $parenthesized(l, e) {

        _(l, e, e.eh, [8, 256, 8, 256, 512], "(");

        if (e.FAILED) return;

        const $2_ = $expression(l, e);

        _(l, e, e.eh, [8, 256, 8, 256, 512], ")");

        e.p = (e.FAILED) ? -1 : 131;

        return ({ type: "Parenthesized", nodes: [$2_], pos });
    }
    function $binding_pattern(l, e) {

        const tx = l.tx;

        if (tx == "{") {

            if (e.FAILED) return;

            const $1_ = $object_binding_pattern(l, e);

            e.p = (e.FAILED) ? -1 : 132;

            return $1_;
        }

        if (tx == "[") {

            if (e.FAILED) return;

            const $1_ = $array_binding_pattern(l, e);

            e.p = (e.FAILED) ? -1 : 132;

            return $1_;
        }

        e.FAILED = true;
    }
    function $object_binding_pattern(l, e) {

        _(l, e, e.eh, [8, 256, 8, 256, 512], "{");

        const tx = l.tx, ty = l.ty;

        if (tx == "}") {

            _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

            e.p = (e.FAILED) ? -1 : 133;

            return ({ type: "ObjectBinding", nodes: [], pos });
        }

        if (tx == "...") {

            if (e.FAILED) return;

            const $2_ = $binding_rest_property(l, e);

            _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

            e.p = (e.FAILED) ? -1 : 133;

            return ({ type: "ObjectBinding", nodes: [$2_], pos });
        }

        if (ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from" || tx == "null" || tx == "true" || tx == "false" || tx == "await" || tx == "break" || tx == "case" || tx == "catch" || tx == "class" || tx == "const" || tx == "continue" || tx == "debugger" || tx == "default" || tx == "delete" || tx == "do" || tx == "else" || tx == "export" || tx == "extends" || tx == "finally" || tx == "for" || tx == "function" || tx == "if" || tx == "import" || tx == "in" || tx == "instanceof" || tx == "new" || tx == "return" || tx == "super" || tx == "switch" || tx == "this" || tx == "throw" || tx == "try" || tx == "typeof" || tx == "var" || tx == "void" || tx == "while" || tx == "with" || tx == "yield" || tx == "implements" || tx == "package" || tx == "protected" || tx == "interface" || tx == "private" || tx == "public" || tx == '"' || tx == "'" || tx == "-" || ty == 1 || tx == "[") {

            if (e.FAILED) return;

            const $2_ = $binding_property_list(l, e);

            const tx = l.tx;

            if (tx == "}") {

                _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                e.p = (e.FAILED) ? -1 : 133;

                return ({ type: "ObjectBinding", nodes: [...$2_], pos });
            }

            if (tx == ",") {

                _(l, e, e.eh, [8, 256, 8, 256, 512], ",");

                const tx = l.tx;

                if (tx == "...") {

                    if (e.FAILED) return;

                    const $4_ = $binding_rest_property(l, e);

                    _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                    e.p = (e.FAILED) ? -1 : 133;

                    return ({ type: "ObjectBinding", nodes: [...$2_, $4_], pos });
                }

                if (tx == "}") {

                    _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                    e.p = (e.FAILED) ? -1 : 133;

                    return ({ type: "ObjectBinding", nodes: [...$2_], pos });
                }
            }
        }

        e.FAILED = true;
    }
    ;
    function $binding_rest_property(l, e) {

        _(l, e, e.eh, [8, 256, 8, 256, 512], "...");

        if (e.FAILED) return;

        const $2_ = $binding_identifier(l, e);

        e.p = (e.FAILED) ? -1 : 135;

        return ({ type: "Spread", nodes: [$2_], pos });
    }
    ;
    ;
    function $binding_elision_element(l, e) {

        const tx = l.tx, ty = l.ty;

        if (tx == ",") {

            if (e.FAILED) return;

            const $1_ = $elision(l, e);

            if (e.FAILED) return;

            const $2_ = $binding_element(l, e);

            e.p = (e.FAILED) ? -1 : 138;

            return ([$1_, $2_]);
        }

        if (ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from" || tx == "{" || tx == "[") {

            if (e.FAILED) return;

            const $1_ = $binding_element(l, e);

            e.p = (e.FAILED) ? -1 : 138;

            return ([$1_]);
        }

        e.FAILED = true;
    }
    ;
    function $binding_element(l, e) {

        const tx = l.tx, ty = l.ty;

        if (tx == "{" || tx == "[") {

            if (e.FAILED) return;

            const $1_ = $binding_pattern(l, e);

            const tx = l.tx;

            if (tx == "=") {

                if (e.FAILED) return;

                const $2_ = $initializer(l, e);

                e.p = (e.FAILED) ? -1 : 140;

                return ($2_ ? { type: "BindingExpression", nodes: [$1_, $2_], pos } : $1_);
            }

            e.p = (e.FAILED) ? -1 : 140;

            return (null ? { type: "BindingExpression", nodes: [$1_], pos } : $1_);
        }

        if (ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from") {

            if (e.FAILED) return;

            const $1_ = $single_name_binding(l, e);

            e.p = (e.FAILED) ? -1 : 140;

            return $1_;
        }

        e.FAILED = true;
    }
    function $single_name_binding(l, e) {

        if (e.FAILED) return;

        const $1_ = $binding_identifier(l, e);

        const tx = l.tx;

        if (tx == "=") {

            if (e.FAILED) return;

            const $2_ = $initializer(l, e);

            e.p = (e.FAILED) ? -1 : 141;

            return ($2_ ? { type: "BindingExpression", nodes: [$1_, $2_], pos } : $1_);
        }

        e.p = (e.FAILED) ? -1 : 141;

        return (null ? { type: "BindingExpression", nodes: [$1_], pos } : $1_);
    }
    function $binding_rest_element(l, e) {

        _(l, e, e.eh, [8, 256, 8, 256, 512], "...");

        const tx = l.tx, ty = l.ty;

        if (tx == "{" || tx == "[") {

            if (e.FAILED) return;

            const $2_ = $binding_pattern(l, e);

            e.p = (e.FAILED) ? -1 : 142;

            return ({ type: "Spread", nodes: [$2_], pos });
        }

        if (ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from") {

            if (e.FAILED) return;

            const $2_ = $binding_identifier(l, e);

            e.p = (e.FAILED) ? -1 : 142;

            return ({ type: "Spread", nodes: [$2_], pos });
        }

        e.FAILED = true;
    }
    function $regular_expression_literal(l, e) {

        const s = [];

        e.fn.parseRegex(l, e, s, false);

        s.push(_(l, e, e.eh, [8, 256, 8, 256, 512], "/"));

        s.push(_(l, e, e.eh, [8, 256, 8, 256, 512], "/"));

        const tx = l.tx, ty = l.ty;

        if (tx == "_" || tx == "$" || ty == 2) {

            if (e.FAILED) return;

            s.push($def$js_identifier(l, e));

            e.p = (e.FAILED) ? -1 : 143;

            return ({ type: "RegexLiteral", value: s[0], flags: s[2], pos });
        }

        e.p = (e.FAILED) ? -1 : 143;

        return ({ type: "RegexLiteral", value: s[0], pos });
    }
    function $regular_expression_flags(l, e) {

        if (e.FAILED) return;

        const $1_ = $identifier_name(l, e);

        e.p = (e.FAILED) ? -1 : 144;

        return $1_;
    }
    function $object_literal(l, e) {

        _(l, e, e.eh, [8, 256, 8, 256, 512], "{");

        const tx = l.tx, ty = l.ty;

        if (tx == "}") {

            _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

            e.p = (e.FAILED) ? -1 : 145;

            return ({ type: "ObjectLiteral", nodes: [], pos });
        }

        if (tx == "..." || ty == 2 || tx == "$" || tx == "_" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from" || tx == "*" || tx == "null" || tx == "true" || tx == "false" || tx == "await" || tx == "break" || tx == "case" || tx == "catch" || tx == "class" || tx == "const" || tx == "continue" || tx == "debugger" || tx == "default" || tx == "delete" || tx == "do" || tx == "else" || tx == "export" || tx == "extends" || tx == "finally" || tx == "for" || tx == "function" || tx == "if" || tx == "import" || tx == "in" || tx == "instanceof" || tx == "new" || tx == "return" || tx == "super" || tx == "switch" || tx == "this" || tx == "throw" || tx == "try" || tx == "typeof" || tx == "var" || tx == "void" || tx == "while" || tx == "with" || tx == "yield" || tx == "implements" || tx == "package" || tx == "protected" || tx == "interface" || tx == "private" || tx == "public" || tx == '"' || tx == "'" || tx == "-" || ty == 1 || tx == "[") {

            if (e.FAILED) return;

            const $2_ = $property_definition_list(l, e);

            const tx = l.tx;

            if (tx == ",") {

                _(l, e, e.eh, [8, 256, 8, 256, 512], ",");

                _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                e.p = (e.FAILED) ? -1 : 145;

                return ({ type: "ObjectLiteral", nodes: $2_, pos });
            }

            if (tx == "}") {

                _(l, e, e.eh, [8, 256, 8, 256, 512], "}");

                e.p = (e.FAILED) ? -1 : 145;

                return ({ type: "ObjectLiteral", nodes: $2_, pos });
            }
        }

        e.FAILED = true;
    }
    ;
    ;
    function $property_name(l, e) {

        const tx = l.tx, ty = l.ty;

        if (tx == "[") {

            if (e.FAILED) return;

            const $1_ = $computed_property_name(l, e);

            e.p = (e.FAILED) ? -1 : 148;

            return ($1_.type |= e.cls.PROPERTY_NAME, $1_);
        }

        if (ty == 2 || tx == "$" || tx == "_" || tx == "null" || tx == "true" || tx == "false" || tx == "await" || tx == "break" || tx == "case" || tx == "catch" || tx == "class" || tx == "const" || tx == "continue" || tx == "debugger" || tx == "default" || tx == "delete" || tx == "do" || tx == "else" || tx == "export" || tx == "extends" || tx == "finally" || tx == "for" || tx == "function" || tx == "if" || tx == "import" || tx == "in" || tx == "instanceof" || tx == "new" || tx == "return" || tx == "super" || tx == "switch" || tx == "this" || tx == "throw" || tx == "try" || tx == "typeof" || tx == "var" || tx == "void" || tx == "while" || tx == "with" || tx == "yield" || tx == "implements" || tx == "package" || tx == "protected" || tx == "interface" || tx == "private" || tx == "public" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from" || tx == '"' || tx == "'" || tx == "-" || ty == 1) {

            if (e.FAILED) return;

            const $1_ = $literal_property_name(l, e);

            e.p = (e.FAILED) ? -1 : 148;

            return ($1_.type |= e.cls.PROPERTY_NAME, $1_);
        }

        e.FAILED = true;
    }
    function $literal_property_name(l, e) {

        const tx = l.tx, ty = l.ty;

        if (tx == '"' || tx == "'") {

            if (e.FAILED) return;

            const $1_ = $string_literal(l, e);

            e.p = (e.FAILED) ? -1 : 149;

            return $1_;
        }

        if (tx == "-" || ty == 1) {

            if (e.FAILED) return;

            const $1_ = $numeric_literal(l, e);

            e.p = (e.FAILED) ? -1 : 149;

            return $1_;
        }

        if (ty == 2 || tx == "$" || tx == "_" || tx == "null" || tx == "true" || tx == "false" || tx == "await" || tx == "break" || tx == "case" || tx == "catch" || tx == "class" || tx == "const" || tx == "continue" || tx == "debugger" || tx == "default" || tx == "delete" || tx == "do" || tx == "else" || tx == "export" || tx == "extends" || tx == "finally" || tx == "for" || tx == "function" || tx == "if" || tx == "import" || tx == "in" || tx == "instanceof" || tx == "new" || tx == "return" || tx == "super" || tx == "switch" || tx == "this" || tx == "throw" || tx == "try" || tx == "typeof" || tx == "var" || tx == "void" || tx == "while" || tx == "with" || tx == "yield" || tx == "implements" || tx == "package" || tx == "protected" || tx == "interface" || tx == "private" || tx == "public" || tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from") {

            if (e.FAILED) return;

            const $1_ = $identifier_name(l, e);

            e.p = (e.FAILED) ? -1 : 149;

            return $1_;
        }

        e.FAILED = true;
    }
    function $computed_property_name(l, e) {

        _(l, e, e.eh, [8, 256, 8, 256, 512], "[");

        if (e.FAILED) return;

        const $2_ = $assignment_expression(l, e);

        _(l, e, e.eh, [8, 256, 8, 256, 512], "]");

        e.p = (e.FAILED) ? -1 : 150;

        return ({ type: "ComputedProperty", nodes: [$2_], pos });
    }
    function $cover_initialized_name(l, e) {

        const s = [];

        if (e.FAILED) return;

        s.push($identifier_reference(l, e));

        if (e.FAILED) return;

        s.push($initializer(l, e));

        sym[sym.length - 2].type |= e.cls.PROPERTY_NAME;

        e.p = (e.FAILED) ? -1 : 151;

        return ({

            type: "BindingExpression",

            symbol: "=",

            nodes: [s[0], s[1]],

            pos
        });
    }
    function $initializer(l, e) {

        _(l, e, e.eh, [8, 256, 8, 256, 512], "=");

        if (e.FAILED) return;

        const $2_ = $assignment_expression(l, e);

        e.p = (e.FAILED) ? -1 : 152;

        return ($2_);
    }
    ;
    ;
    ;
    function $spread_element(l, e) {

        _(l, e, e.eh, [8, 256, 8, 256, 512], "...");

        if (e.FAILED) return;

        const $2_ = $assignment_expression(l, e);

        e.p = (e.FAILED) ? -1 : 156;

        return ({ type: "Spread", nodes: [$2_], pos });
    }
    ;
    function $no_substitute_template(l, e) {

        const s = [];

        e.fn.parseTemplate(l, e, s, false);

        s.push(_(l, e, e.eh, [8, 256, 8, 256, 512], "`"));

        s.push(_(l, e, e.eh, [8, 256, 8, 256, 512], "`"));

        e.p = (e.FAILED) ? -1 : 158;

        return ({

            type: "Template",

            nodes: [{ quote_type: "", type: "StringLiteral", value: s[0], pos }],

            NO_SUBSTITUTE: true,

            pos
        });
    }
    function $substitute_template(l, e) {

        if (e.FAILED) return;

        const $1_ = $template_head(l, e);

        if (e.FAILED) return;

        const $2_ = $expression(l, e);

        if (e.FAILED) return;

        const $3_ = $template_spans(l, e);

        e.p = (e.FAILED) ? -1 : 159;

        return ($3_.unshift($1_, $2_), { type: "Template", nodes: $3_, pos });
    }
    ;
    ;
    function $template_head(l, e) {

        const s = [];

        e.fn.parseTemplate(l, e, s, false);

        s.push(_(l, e, e.eh, [8, 256, 8, 256, 512], "`"));

        s.push(_(l, e, e.eh, [8, 256, 8, 256, 512], "${"));

        e.p = (e.FAILED) ? -1 : 162;

        return ({ type: "TemplateHead", value: s[0], pos });
    }
    function $template_middle(l, e) {

        const s = [];

        e.fn.parseTemplate(l, e, s, false);

        s.push(_(l, e, e.eh, [8, 256, 8, 256, 512], "}"));

        s.push(_(l, e, e.eh, [8, 256, 8, 256, 512], "${"));

        e.p = (e.FAILED) ? -1 : 163;

        return ({ type: "TemplateMiddle", value: s[0], pos });
    }
    function $template_tail(l, e) {

        const s = [];

        e.fn.parseTemplate(l, e, s, false);

        s.push(_(l, e, e.eh, [8, 256, 8, 256, 512], "}"));

        s.push(_(l, e, e.eh, [8, 256, 8, 256, 512], "`"));

        e.p = (e.FAILED) ? -1 : 164;

        return ({ type: "TemplateTail", value: s[0], pos });
    }
    ;
    ;
    ;
    ;
    function $string_literal(l, e) {

        const s = [];

        const tx = l.tx;

        if (tx == '"') {

            e.fn.parseString(l, e, s, false);

            s.push(_(l, e, e.eh, [8, 256, 8, 256, 512], '"'));

            s.push(_(l, e, e.eh, [8, 256, 8, 256, 512], '"'));

            e.p = (e.FAILED) ? -1 : 169;

            return ({

                quote_type: s[1],

                type: "StringLiteral",

                value: s[0] || "",

                pos
            });
        }

        if (tx == "'") {

            e.fn.parseString(l, e, s, false);

            s.push(_(l, e, e.eh, [8, 256, 8, 256, 512], "'"));

            s.push(_(l, e, e.eh, [8, 256, 8, 256, 512], "'"));

            e.p = (e.FAILED) ? -1 : 169;

            return ({

                quote_type: s[1],

                type: "StringLiteral",

                value: s[0] || "",

                pos
            });
        }

        e.FAILED = true;
    }
    ;
    function $escaped_sequence_group_0387_117(l, e) {

        const ty = l.ty;

        if (ty == 256) {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], 256);

            e.p = (e.FAILED) ? -1 : 171;

            return $1_;
        }

        if (ty == 8) {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], 8);

            e.p = (e.FAILED) ? -1 : 171;

            return $1_;
        }

        if (ty == 128) {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], 128);

            e.p = (e.FAILED) ? -1 : 171;

            return $1_;
        }

        if (ty == 64) {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], 64);

            e.p = (e.FAILED) ? -1 : 171;

            return $1_;
        }

        if (ty == 32) {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], 32);

            e.p = (e.FAILED) ? -1 : 171;

            return $1_;
        }

        if (ty == 16) {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], 16);

            e.p = (e.FAILED) ? -1 : 171;

            return $1_;
        }

        if (ty == 1) {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], 1);

            e.p = (e.FAILED) ? -1 : 171;

            return $1_;
        }

        if (ty == 2) {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], 2);

            e.p = (e.FAILED) ? -1 : 171;

            return $1_;
        }

        if (true) {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], true);

            e.p = (e.FAILED) ? -1 : 171;

            return $1_;
        }

        e.FAILED = true;
    }
    ;
    function $numeric_literal(l, e) {

        const tx = l.tx, ty = l.ty;

        if (tx == "-") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "-");

            _(l, e, e.eh, [8, 256, 8, 256, 512], 1);

            e.p = (e.FAILED) ? -1 : 173;

            return ({

                type: "NumericLiteral",

                value: $1_,

                computed_value: parseFloat($1_),

                value_data: $1_,

                pos,

                NEGATIVE: !!$1_
            });
        }

        if (ty == 1) {

            _(l, e, e.eh, [8, 256, 8, 256, 512], 1);

            e.p = (e.FAILED) ? -1 : 173;

            return ({

                type: "NumericLiteral",

                computed_value: parseFloat(),

                pos,

                NEGATIVE: !!null
            });
        }

        e.FAILED = true;
    }
    function $bigint(l, e) {

        const tx = l.tx, ty = l.ty;

        if (tx == "-") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "-");

            const $2_ = _(l, e, e.eh, [8, 256, 8, 256, 512], 1);

            _(l, e, e.eh, [8, 256, 8, 256, 512], "n");

            e.p = (e.FAILED) ? -1 : 174;

            return ({ type: "BigIntLiteral", value: $2_, pos, NEGATIVE: !!$1_ });
        }

        if (ty == 1) {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], 1);

            _(l, e, e.eh, [8, 256, 8, 256, 512], "n");

            e.p = (e.FAILED) ? -1 : 174;

            return ({

                type: "BigIntLiteral",

                value: $1_,

                pos,

                NEGATIVE: !!null
            });
        }

        e.FAILED = true;
    }
    function $null_literal(l, e) {

        _(l, e, e.eh, [8, 256, 8, 256, 512], "null");

        e.p = (e.FAILED) ? -1 : 175;

        return ({ type: "NullLiteral", pos });
    }
    function $boolean_literal(l, e) {

        const tx = l.tx;

        if (tx == "true") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "true");

            e.p = (e.FAILED) ? -1 : 176;

            return ({ type: "BooleanLiteral", value: $1_, pos });
        }

        if (tx == "false") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "false");

            e.p = (e.FAILED) ? -1 : 176;

            return ({ type: "BooleanLiteral", value: $1_, pos });
        }

        e.FAILED = true;
    }
    function $label_identifier(l, e) {

        if (e.FAILED) return;

        const $1_ = $identifier(l, e);

        e.p = (e.FAILED) ? -1 : 177;

        return ($1_.type = "IdentifierLabel", $1_);
    }
    function $identifier_reference(l, e) {

        if (e.FAILED) return;

        const $1_ = $identifier(l, e);

        e.p = (e.FAILED) ? -1 : 178;

        return ($1_.type = "IdentifierReference", $1_);
    }
    function $binding_identifier(l, e) {

        if (e.FAILED) return;

        const $1_ = $identifier(l, e);

        e.p = (e.FAILED) ? -1 : 179;

        return ($1_.type = "IdentifierBinding", $1_);
    }
    function $identifier(l, e) {

        const tx = l.tx, ty = l.ty;

        if (ty == 2 || tx == "$" || tx == "_") {

            if (e.FAILED) return;

            const $1_ = $composite_identifier(l, e);

            e.p = (e.FAILED) ? -1 : 180;

            return ({ type: "Identifier", value: $1_, pos });
        }

        if (tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from") {

            if (e.FAILED) return;

            const $1_ = $unreserved_word(l, e);

            e.p = (e.FAILED) ? -1 : 180;

            return ({ type: "Identifier", value: $1_, pos });
        }

        e.FAILED = true;
    }
    function $identifier_name(l, e) {

        const tx = l.tx, ty = l.ty;

        if (ty == 2 || tx == "$" || tx == "_") {

            if (e.FAILED) return;

            const $1_ = $composite_identifier(l, e);

            e.p = (e.FAILED) ? -1 : 181;

            return ({ type: "IdentifierName", value: $1_, pos });
        }

        if (tx == "async" || tx == "get" || tx == "set" || tx == "target" || tx == "as" || tx == "from") {

            if (e.FAILED) return;

            const $1_ = $unreserved_word(l, e);

            e.p = (e.FAILED) ? -1 : 181;

            return ({ type: "IdentifierName", value: $1_, pos });
        }

        if (tx == "null" || tx == "true" || tx == "false" || tx == "await" || tx == "break" || tx == "case" || tx == "catch" || tx == "class" || tx == "const" || tx == "continue" || tx == "debugger" || tx == "default" || tx == "delete" || tx == "do" || tx == "else" || tx == "export" || tx == "extends" || tx == "finally" || tx == "for" || tx == "function" || tx == "if" || tx == "import" || tx == "in" || tx == "instanceof" || tx == "new" || tx == "return" || tx == "super" || tx == "switch" || tx == "this" || tx == "throw" || tx == "try" || tx == "typeof" || tx == "var" || tx == "void" || tx == "while" || tx == "with" || tx == "yield" || tx == "implements" || tx == "package" || tx == "protected" || tx == "interface" || tx == "private" || tx == "public") {

            if (e.FAILED) return;

            const $1_ = $reserved_word(l, e);

            e.p = (e.FAILED) ? -1 : 181;

            return ({ type: "IdentifierName", value: $1_, pos });
        }

        e.FAILED = true;
    }
    function $unreserved_word(l, e) {

        const tx = l.tx;

        if (tx == "async") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "async");

            e.p = (e.FAILED) ? -1 : 182;

            return $1_;
        }

        if (tx == "get") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "get");

            e.p = (e.FAILED) ? -1 : 182;

            return $1_;
        }

        if (tx == "set") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "set");

            e.p = (e.FAILED) ? -1 : 182;

            return $1_;
        }

        if (tx == "target") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "target");

            e.p = (e.FAILED) ? -1 : 182;

            return $1_;
        }

        if (tx == "as") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "as");

            e.p = (e.FAILED) ? -1 : 182;

            return $1_;
        }

        if (tx == "from") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "from");

            e.p = (e.FAILED) ? -1 : 182;

            return $1_;
        }

        e.FAILED = true;
    }
    function $reserved_word(l, e) {

        const tx = l.tx;

        if (tx == "null") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "null");

            e.p = (e.FAILED) ? -1 : 183;

            return $1_;
        }

        if (tx == "true") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "true");

            e.p = (e.FAILED) ? -1 : 183;

            return $1_;
        }

        if (tx == "false") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "false");

            e.p = (e.FAILED) ? -1 : 183;

            return $1_;
        }

        if (tx == "implements" || tx == "package" || tx == "protected" || tx == "interface" || tx == "private" || tx == "public") {

            if (e.FAILED) return;

            const $1_ = $future_reserved_word(l, e);

            e.p = (e.FAILED) ? -1 : 183;

            return $1_;
        }

        if (tx == "await" || tx == "break" || tx == "case" || tx == "catch" || tx == "class" || tx == "const" || tx == "continue" || tx == "debugger" || tx == "default" || tx == "delete" || tx == "do" || tx == "else" || tx == "export" || tx == "extends" || tx == "finally" || tx == "for" || tx == "function" || tx == "if" || tx == "import" || tx == "in" || tx == "instanceof" || tx == "new" || tx == "return" || tx == "super" || tx == "switch" || tx == "this" || tx == "throw" || tx == "try" || tx == "typeof" || tx == "var" || tx == "void" || tx == "while" || tx == "with" || tx == "yield") {

            if (e.FAILED) return;

            const $1_ = $keyword(l, e);

            e.p = (e.FAILED) ? -1 : 183;

            return $1_;
        }

        e.FAILED = true;
    }
    function $future_reserved_word(l, e) {

        const tx = l.tx;

        if (tx == "implements") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "implements");

            e.p = (e.FAILED) ? -1 : 184;

            return $1_;
        }

        if (tx == "package") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "package");

            e.p = (e.FAILED) ? -1 : 184;

            return $1_;
        }

        if (tx == "protected") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "protected");

            e.p = (e.FAILED) ? -1 : 184;

            return $1_;
        }

        if (tx == "interface") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "interface");

            e.p = (e.FAILED) ? -1 : 184;

            return $1_;
        }

        if (tx == "private") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "private");

            e.p = (e.FAILED) ? -1 : 184;

            return $1_;
        }

        if (tx == "public") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "public");

            e.p = (e.FAILED) ? -1 : 184;

            return $1_;
        }

        e.FAILED = true;
    }
    function $composite_identifier(l, e) {

        const s = [];

        const tx = l.tx, ty = l.ty;

        if (ty == 2) {

            e.fn.parseIdentifier(l, e, s, false);

            s.push(_(l, e, e.eh, [8, 256, 8, 256, 512], 2));

            e.p = (e.FAILED) ? -1 : 185;

            return s[0];
        }

        if (tx == "$") {

            e.fn.parseIdentifier(l, e, s, false);

            s.push(_(l, e, e.eh, [8, 256, 8, 256, 512], "$"));

            e.p = (e.FAILED) ? -1 : 185;

            return s[0];
        }

        if (tx == "_") {

            e.fn.parseIdentifier(l, e, s, false);

            s.push(_(l, e, e.eh, [8, 256, 8, 256, 512], "_"));

            e.p = (e.FAILED) ? -1 : 185;

            return s[0];
        }

        e.FAILED = true;
    }
    function $keyword(l, e) {

        const tx = l.tx;

        if (tx == "await") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "await");

            e.p = (e.FAILED) ? -1 : 186;

            return $1_;
        }

        if (tx == "break") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "break");

            e.p = (e.FAILED) ? -1 : 186;

            return $1_;
        }

        if (tx == "case") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "case");

            e.p = (e.FAILED) ? -1 : 186;

            return $1_;
        }

        if (tx == "catch") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "catch");

            e.p = (e.FAILED) ? -1 : 186;

            return $1_;
        }

        if (tx == "class") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "class");

            e.p = (e.FAILED) ? -1 : 186;

            return $1_;
        }

        if (tx == "const") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "const");

            e.p = (e.FAILED) ? -1 : 186;

            return $1_;
        }

        if (tx == "continue") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "continue");

            e.p = (e.FAILED) ? -1 : 186;

            return $1_;
        }

        if (tx == "debugger") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "debugger");

            e.p = (e.FAILED) ? -1 : 186;

            return $1_;
        }

        if (tx == "default") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "default");

            e.p = (e.FAILED) ? -1 : 186;

            return $1_;
        }

        if (tx == "delete") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "delete");

            e.p = (e.FAILED) ? -1 : 186;

            return $1_;
        }

        if (tx == "do") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "do");

            e.p = (e.FAILED) ? -1 : 186;

            return $1_;
        }

        if (tx == "else") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "else");

            e.p = (e.FAILED) ? -1 : 186;

            return $1_;
        }

        if (tx == "export") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "export");

            e.p = (e.FAILED) ? -1 : 186;

            return $1_;
        }

        if (tx == "extends") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "extends");

            e.p = (e.FAILED) ? -1 : 186;

            return $1_;
        }

        if (tx == "finally") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "finally");

            e.p = (e.FAILED) ? -1 : 186;

            return $1_;
        }

        if (tx == "for") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "for");

            e.p = (e.FAILED) ? -1 : 186;

            return $1_;
        }

        if (tx == "function") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "function");

            e.p = (e.FAILED) ? -1 : 186;

            return $1_;
        }

        if (tx == "if") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "if");

            e.p = (e.FAILED) ? -1 : 186;

            return $1_;
        }

        if (tx == "import") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "import");

            e.p = (e.FAILED) ? -1 : 186;

            return $1_;
        }

        if (tx == "in") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "in");

            e.p = (e.FAILED) ? -1 : 186;

            return $1_;
        }

        if (tx == "instanceof") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "instanceof");

            e.p = (e.FAILED) ? -1 : 186;

            return $1_;
        }

        if (tx == "new") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "new");

            e.p = (e.FAILED) ? -1 : 186;

            return $1_;
        }

        if (tx == "return") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "return");

            e.p = (e.FAILED) ? -1 : 186;

            return $1_;
        }

        if (tx == "super") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "super");

            e.p = (e.FAILED) ? -1 : 186;

            return $1_;
        }

        if (tx == "switch") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "switch");

            e.p = (e.FAILED) ? -1 : 186;

            return $1_;
        }

        if (tx == "this") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "this");

            e.p = (e.FAILED) ? -1 : 186;

            return $1_;
        }

        if (tx == "throw") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "throw");

            e.p = (e.FAILED) ? -1 : 186;

            return $1_;
        }

        if (tx == "try") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "try");

            e.p = (e.FAILED) ? -1 : 186;

            return $1_;
        }

        if (tx == "typeof") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "typeof");

            e.p = (e.FAILED) ? -1 : 186;

            return $1_;
        }

        if (tx == "var") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "var");

            e.p = (e.FAILED) ? -1 : 186;

            return $1_;
        }

        if (tx == "void") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "void");

            e.p = (e.FAILED) ? -1 : 186;

            return $1_;
        }

        if (tx == "while") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "while");

            e.p = (e.FAILED) ? -1 : 186;

            return $1_;
        }

        if (tx == "with") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "with");

            e.p = (e.FAILED) ? -1 : 186;

            return $1_;
        }

        if (tx == "yield") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "yield");

            e.p = (e.FAILED) ? -1 : 186;

            return $1_;
        }

        e.FAILED = true;
    }
    function $def$start(l, e) {

        if (e.FAILED) return;

        const $1_ = $def$defaultproductions(l, e);

        e.p = (e.FAILED) ? -1 : 187;

        return $1_;
    }
    ;
    ;
    ;
    function $def$hex_digit(l, e) {

        const tx = l.tx, ty = l.ty;

        if (ty == 8193) {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], 8193);

            e.p = (e.FAILED) ? -1 : 191;

            return $1_;
        }

        if (tx == "a") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "a");

            e.p = (e.FAILED) ? -1 : 191;

            return $1_;
        }

        if (tx == "b") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "b");

            e.p = (e.FAILED) ? -1 : 191;

            return $1_;
        }

        if (tx == "c") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "c");

            e.p = (e.FAILED) ? -1 : 191;

            return $1_;
        }

        if (tx == "d") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "d");

            e.p = (e.FAILED) ? -1 : 191;

            return $1_;
        }

        if (tx == "e") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "e");

            e.p = (e.FAILED) ? -1 : 191;

            return $1_;
        }

        if (tx == "f") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "f");

            e.p = (e.FAILED) ? -1 : 191;

            return $1_;
        }

        if (tx == "A") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "A");

            e.p = (e.FAILED) ? -1 : 191;

            return $1_;
        }

        if (tx == "B") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "B");

            e.p = (e.FAILED) ? -1 : 191;

            return $1_;
        }

        if (tx == "C") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "C");

            e.p = (e.FAILED) ? -1 : 191;

            return $1_;
        }

        if (tx == "D") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "D");

            e.p = (e.FAILED) ? -1 : 191;

            return $1_;
        }

        if (tx == "E") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "E");

            e.p = (e.FAILED) ? -1 : 191;

            return $1_;
        }

        if (tx == "F") {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], "F");

            e.p = (e.FAILED) ? -1 : 191;

            return $1_;
        }

        e.FAILED = true;
    }
    function $def$hex(l, e) {

        const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], 4097);

        e.p = (e.FAILED) ? -1 : 192;

        return ({ val: parseFloat($1_), type: "hex", original_val: $1_ });
    }
    function $def$binary(l, e) {

        const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], 1025);

        e.p = (e.FAILED) ? -1 : 193;

        return ({ val: parseFloat($1_), type: "bin", original_val: $1_ });
    }
    function $def$octal(l, e) {

        const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], 2049);

        e.p = (e.FAILED) ? -1 : 194;

        return ({ val: parseFloat($1_), type: "oct", original_val: $1_ });
    }
    function $def$scientific(l, e) {

        const ty = l.ty;

        if (ty == 16385) {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], 16385);

            e.p = (e.FAILED) ? -1 : 195;

            return ({ val: parseFloat($1_), type: "sci", original_val: $1_ });
        }

        if (ty == 32769 || ty == 1) {

            if (e.FAILED) return;

            const $1_ = $def$float(l, e);

            e.p = (e.FAILED) ? -1 : 195;

            return $1_;
        }

        e.FAILED = true;
    }
    function $def$float(l, e) {

        const ty = l.ty;

        if (ty == 32769) {

            const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], 32769);

            e.p = (e.FAILED) ? -1 : 196;

            return ({ val: parseFloat($1_), type: "flt", original_val: $1_ });
        }

        if (ty == 1) {

            if (e.FAILED) return;

            const $1_ = $def$integer(l, e);

            e.p = (e.FAILED) ? -1 : 196;

            return $1_;
        }

        e.FAILED = true;
    }
    function $def$integer(l, e) {

        if (e.FAILED) return;

        const $1_ = $def$natural(l, e);

        e.p = (e.FAILED) ? -1 : 197;

        return ({ val: parseFloat($1_), type: "int", original_val: $1_ });
    }
    function $def$natural(l, e) {

        const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], 1);

        e.p = (e.FAILED) ? -1 : 198;

        return $1_;
    }
    function $def$id(l, e) {

        const $1_ = _(l, e, e.eh, [8, 256, 8, 256, 512], 2);

        e.p = (e.FAILED) ? -1 : 199;

        return $1_;
    }
    ;
    ;
    ;
    function $def$string(l, e) {

        const tx = l.tx;

        if (tx == '"') {

            _(l, e, e.eh, [8, 256, 8, 256, 512], '"');

            if (e.FAILED) return;

            const $2_ = $def$string_HC_listbody1_102(l, e);

            _(l, e, e.eh, [8, 256, 8, 256, 512], '"');

            e.p = (e.FAILED) ? -1 : 203;

            return ($2_);
        }

        if (tx == "'") {

            _(l, e, e.eh, [8, 256, 8, 256, 512], "'");

            if (e.FAILED) return;

            const $2_ = $def$string_HC_listbody1_103(l, e);

            _(l, e, e.eh, [8, 256, 8, 256, 512], "'");

            e.p = (e.FAILED) ? -1 : 203;

            return ($2_);
        }

        e.FAILED = true;
    }
    ;
    ;
    ;
    function $def$js_identifier(l, e) {

        if (e.FAILED) return;

        const $1_ = $def$js_id_symbols(l, e);

        e.p = (e.FAILED) ? -1 : 207;

        return $1_;
    }
    ;
    function $def$identifier(l, e) {

        if (e.FAILED) return;

        const $1_ = $def$identifier_symbols(l, e);

        e.p = (e.FAILED) ? -1 : 209;

        return $1_;
    }
    ;
    function $named_imports_HC_listbody1_101(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "!": s.push($unary_expression(l, e)); break;

            case "!=": s = $500(l, e, _s(s, l, e, e.eh, _0)); break;

            case "!==": s = $502(l, e, _s(s, l, e, e.eh, _0)); break;

            case "\"":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($string_literal(cp, e));

                if (e.p !== 169) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s = $553(l, e, _s(s, l, e, e.eh, _0));

                break;


            case "$":

                var cp = l.copy(), _sym = null;

                _sym = $429(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 208) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $705(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 208) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $715(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 210) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s = $9(l, e, _s(s, l, e, e.eh, _0));

                break;


            case "%": s = $516(l, e, _s(s, l, e, e.eh, _0)); break;

            case "%=": s = $481(l, e, _s(s, l, e, e.eh, _0)); break;

            case "&&": s = $495(l, e, _s(s, l, e, e.eh, _0)); break;

            case "&": s = $498(l, e, _s(s, l, e, e.eh, _0)); break;

            case "&=": s = $487(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($string_literal(cp, e));

                if (e.p !== 169) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s = $554(l, e, _s(s, l, e, e.eh, _0));

                break;


            case "(":

                var cp = l.copy(), _sym = null;

                _sym = $1003(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 87) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1025(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1026(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($parenthesized(cp, e));

                if (e.p !== 131) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push(
                    $cover_parenthesized_expression_and_arrow_parameter_list(cp, e)
                );

                if (e.p !== 130) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($arguments(cp, e));

                if (e.p !== 100) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $558(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $561(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $579(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 99) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $591(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 33) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $596(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 36) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _s(s.slice(), cp, e, e.eh, _0);

                e.ASI = false;

                _sym = $597(cp, e, _sym);

                if (e.p !== 36) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $599(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 44) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $605(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 43) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $658(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 87) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $779(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $783(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $785(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $786(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $788(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $794(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $829(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 36) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $889(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 87) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $890(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 87) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $891(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 87) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $892(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 87) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $920(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $922(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $924(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $927(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $928(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $933(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $975(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 53) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s = $977(l, e, _s(s, l, e, e.eh, _0));

                break;


            case ")":

                var cp = l.copy(), _sym = null;

                _sym = $1004(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 87) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1008(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 87) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1009(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 87) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1012(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 87) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1024(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1027(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1030(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1031(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1033(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1036(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1037(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1041(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1043(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1046(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1047(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1051(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1055(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 100) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1087(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 87) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1088(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 87) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1091(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 87) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1094(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 87) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _s(s.slice(), cp, e, e.eh, _0);

                e.ASI = true;

                _sym = $1101(cp, e, _sym);

                if (e.p !== 36) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _s(s.slice(), cp, e, e.eh, _0);

                e.ASI = true;

                _sym = $1103(cp, e, _sym);

                if (e.p !== 36) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1106(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1109(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1113(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1116(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1117(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1120(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1123(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1128(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1152(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 53) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1154(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 36) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _s(s.slice(), cp, e, e.eh, _0);

                e.ASI = true;

                _sym = $1158(cp, e, _sym);

                if (e.p !== 36) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1161(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 87) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _s(s.slice(), cp, e, e.eh, _0);

                e.ASI = true;

                _sym = $1163(cp, e, _sym);

                if (e.p !== 36) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _s(s.slice(), cp, e, e.eh, _0);

                e.ASI = true;

                _sym = $1167(cp, e, _sym);

                if (e.p !== 36) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _s(s.slice(), cp, e, e.eh, _0);

                e.ASI = true;

                _sym = $1169(cp, e, _sym);

                if (e.p !== 36) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _s(s.slice(), cp, e, e.eh, _0);

                e.ASI = true;

                _sym = $1171(cp, e, _sym);

                if (e.p !== 36) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _s(s.slice(), cp, e, e.eh, _0);

                e.ASI = true;

                _sym = $1172(cp, e, _sym);

                if (e.p !== 36) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _s(s.slice(), cp, e, e.eh, _0);

                e.ASI = true;

                _sym = $1173(cp, e, _sym);

                if (e.p !== 36) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1187(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1189(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _s(s.slice(), cp, e, e.eh, _0);

                e.ASI = true;

                _sym = $1232(cp, e, _sym);

                if (e.p !== 36) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _s(s.slice(), cp, e, e.eh, _0);

                e.ASI = true;

                _sym = $1240(cp, e, _sym);

                if (e.p !== 36) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _s(s.slice(), cp, e, e.eh, _0);

                e.ASI = true;

                _sym = $1241(cp, e, _sym);

                if (e.p !== 36) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _s(s.slice(), cp, e, e.eh, _0);

                e.ASI = true;

                _sym = $1242(cp, e, _sym);

                if (e.p !== 36) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _s(s.slice(), cp, e, e.eh, _0);

                e.ASI = true;

                _sym = $1244(cp, e, _sym);

                if (e.p !== 36) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _s(s.slice(), cp, e, e.eh, _0);

                e.ASI = true;

                _sym = $1298(cp, e, _sym);

                if (e.p !== 36) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $790(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $799(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $816(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 100) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $832(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 131) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $894(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 87) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $926(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $930(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $932(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $935(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $936(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $940(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $943(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $944(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $959(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 100) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $960(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 100) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $966(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 99) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $971(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 36) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $972(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 44) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $973(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 43) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s = $985(l, e, _s(s, l, e, e.eh, _0));

                break;


            case "**": s = $517(l, e, _s(s, l, e, e.eh, _0)); break;

            case "**=": s = $490(l, e, _s(s, l, e, e.eh, _0)); break;

            case "*":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($method_definition(cp, e));

                if (e.p !== 87) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $469(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 16) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $514(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 124) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $556(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $559(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $595(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 76) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($name_space_import(cp, e));

                if (e.p !== 9) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $654(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 87) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $777(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s = $781(l, e, _s(s, l, e, e.eh, _0));

                break;


            case "*=": s = $479(l, e, _s(s, l, e, e.eh, _0)); break;

            case "++":

                var cp = l.copy(), _sym = null;

                _sym = $491(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 127) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($update_expression(l, e));

                break;


            case "+":

                var cp = l.copy(), _sym = null;

                _sym = $512(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 123) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($unary_expression(l, e));

                break;


            case "+=": s = $482(l, e, _s(s, l, e, e.eh, _0)); break;

            case ",":

                var cp = l.copy(), _sym = null;

                _sym = $358(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 155) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $476(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 89) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $680(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 155) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $729(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 145) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $815(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 100) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $858(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 153) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $863(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 133) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $868(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 134) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s = $958(l, e, _s(s, l, e, e.eh, _0));

                break;


            case "--":

                var cp = l.copy(), _sym = null;

                _sym = $492(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 127) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($update_expression(l, e));

                break;


            case "-":

                var cp = l.copy(), _sym = null;

                _sym = $444(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 204) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $513(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 123) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $714(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 210) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($unary_expression(cp, e));

                if (e.p !== 126) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "-=": s = $483(l, e, _s(s, l, e, e.eh, _0)); break;

            case "...":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($argument_list_group_1179_111(cp, e));

                if (e.p !== 101) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($property_definition(cp, e));

                if (e.p !== 147) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($spread_element(cp, e));

                if (e.p !== 156) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($binding_rest_property(cp, e));

                if (e.p !== 135) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($binding_rest_element(l, e));

                break;


            case ".":

                var cp = l.copy(), _sym = null;

                _sym = $537(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 97) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $546(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $548(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 96) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $575(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $578(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 95) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s = $667(l, e, _s(s, l, e, e.eh, _0));

                break;


            case "/":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($regular_expression_literal(cp, e));

                if (e.p !== 143) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $442(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 204) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $515(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 124) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s = $569(l, e, _s(s, l, e, e.eh, _0));

                break;


            case "/=": s = $480(l, e, _s(s, l, e, e.eh, _0)); break;

            case ":":

                var cp = l.copy(), _sym = null;

                _sym = $589(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 50) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $859(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 48) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s = $915(l, e, _s(s, l, e, e.eh, _0));

                break;


            case ";":

                var cp = l.copy(), _sym = null;

                _sym = $1014(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 36) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1016(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 36) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1097(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 36) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1098(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 36) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1099(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 36) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1165(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 36) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1235(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 36) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $167(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 30) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $307(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 85) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $475(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 31) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $601(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 39) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $603(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 40) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $608(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 56) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $612(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 41) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $734(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 16) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $823(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 57) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $830(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 39) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $831(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 40) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $843(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 61) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $846(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 41) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $848(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 6) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $854(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 42) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $881(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 36) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $909(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 16) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $911(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 16) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $919(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 16) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $978(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 6) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s = $995(l, e, _s(s, l, e, e.eh, _0));

                break;


            case "<": s = $503(l, e, _s(s, l, e, e.eh, _0)); break;

            case "<<": s = $509(l, e, _s(s, l, e, e.eh, _0)); break;

            case "<<=": s = $484(l, e, _s(s, l, e, e.eh, _0)); break;

            case "<=": s = $505(l, e, _s(s, l, e, e.eh, _0)); break;

            case "=":

                var cp = l.copy(), _sym = null;

                _sym = $477(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 108) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($initializer(l, e));

                break;


            case "==": s = $499(l, e, _s(s, l, e, e.eh, _0)); break;

            case "===": s = $501(l, e, _s(s, l, e, e.eh, _0)); break;

            case "=>":

                var cp = l.copy(), _sym = null;

                _sym = $588(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 78) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s = $780(l, e, _s(s, l, e, e.eh, _0));

                break;


            case ">": s = $504(l, e, _s(s, l, e, e.eh, _0)); break;

            case ">=": s = $506(l, e, _s(s, l, e, e.eh, _0)); break;

            case ">>": s = $510(l, e, _s(s, l, e, e.eh, _0)); break;

            case ">>=": s = $485(l, e, _s(s, l, e, e.eh, _0)); break;

            case ">>>": s = $511(l, e, _s(s, l, e, e.eh, _0)); break;

            case ">>>=": s = $486(l, e, _s(s, l, e, e.eh, _0)); break;

            case "?.": s.push($optional_chain(l, e)); break;

            case "?": s = $493(l, e, _s(s, l, e, e.eh, _0)); break;

            case "??": s = $586(l, e, _s(s, l, e, e.eh, _0)); break;

            case "[":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($array_literal(cp, e));

                if (e.p !== 153) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($array_binding_pattern(cp, e));

                if (e.p !== 134) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($computed_property_name(cp, e));

                if (e.p !== 150) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $539(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 97) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $545(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $576(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $666(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 105) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s = $670(l, e, _s(s, l, e, e.eh, _0));

                break;


            case "'\'": s = $443(l, e, _s(s, l, e, e.eh, _0)); break;

            case "]":

                var cp = l.copy(), _sym = null;

                _sym = $1017(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 105) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1018(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 105) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1076(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 153) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1083(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 134) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1084(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 134) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1157(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 134) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $625(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 153) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $641(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 134) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $856(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 153) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $857(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 153) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $866(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 134) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $867(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 134) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $869(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 134) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $896(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 150) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $949(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 97) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $955(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $970(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $987(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 153) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $991(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 134) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s = $994(l, e, _s(s, l, e, e.eh, _0));

                break;


            case "^": s = $497(l, e, _s(s, l, e, e.eh, _0)); break;

            case "^=": s = $488(l, e, _s(s, l, e, e.eh, _0)); break;

            case "_":

                var cp = l.copy(), _sym = null;

                _sym = $10(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 185) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $427(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 208) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $445(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 204) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $704(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 208) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s = $713(l, e, _s(s, l, e, e.eh, _0));

                break;


            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($template_head(cp, e));

                if (e.p !== 162) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $570(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s = $687(l, e, _s(s, l, e, e.eh, _0));

                break;


            case "true":

                var cp = l.copy(), _sym = null;

                _sym = $446(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 204) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s = $721(l, e, _s(s, l, e, e.eh, _0));

                var cp = l.copy(), _sym = null;

                _sym = $130(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 176) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s = $260(l, e, _s(s, l, e, e.eh, _0));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($arrow_function(cp, e));

                if (e.p !== 78) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($function_declaration(cp, e));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($method_definition(l, e));

                break;


            case "await":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($await_expression(cp, e));

                if (e.p !== 107) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $262(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 186) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s = $598(l, e, _s(s, l, e, e.eh, _0));

                break;


            case "break":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($break_statement(cp, e));

                if (e.p !== 40) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s = $263(l, e, _s(s, l, e, e.eh, _0));

                break;


            case "case":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($case_clause(cp, e));

                if (e.p !== 48) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s = $264(l, e, _s(s, l, e, e.eh, _0));

                break;


            case "catch":

                var cp = l.copy(), _sym = null;

                _sym = $265(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 186) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($catch(l, e));

                break;


            case "class":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($class_expression(cp, e));

                if (e.p !== 83) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($class_declaration(cp, e));

                if (e.p !== 82) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s = $266(l, e, _s(s, l, e, e.eh, _0));

                break;


            case "const":

                var cp = l.copy(), _sym = null;

                _sym = $188(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 62) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s = $267(l, e, _s(s, l, e, e.eh, _0));

                break;


            case "continue":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($continue_statement(cp, e));

                if (e.p !== 39) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s = $268(l, e, _s(s, l, e, e.eh, _0));

                break;


            case "debugger":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($debugger_statement(cp, e));

                if (e.p !== 56) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s = $269(l, e, _s(s, l, e, e.eh, _0));

                break;


            case "default":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($default_clause(cp, e));

                if (e.p !== 49) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $270(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 186) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s = $473(l, e, _s(s, l, e, e.eh, _0));

                break;


            case "delete":

                var cp = l.copy(), _sym = null;

                _sym = $271(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 186) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($unary_expression(l, e));

                break;


            case "do":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($iteration_statement(cp, e));

                if (e.p !== 36) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s = $272(l, e, _s(s, l, e, e.eh, _0));

                break;


            case "else":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($if_statement_group_163_103(cp, e));

                if (e.p !== 32) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s = $273(l, e, _s(s, l, e, e.eh, _0));

                break;


            case "export": s = $274(l, e, _s(s, l, e, e.eh, _0)); break;

            case "extends":

                var cp = l.copy(), _sym = null;

                _sym = $275(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 186) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($class_heritage(l, e));

                break;


            case "false":

                var cp = l.copy(), _sym = null;

                _sym = $131(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 176) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s = $261(l, e, _s(s, l, e, e.eh, _0));

                break;


            case "finally":

                var cp = l.copy(), _sym = null;

                _sym = $276(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 186) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($finally(l, e));

                break;


            case "for":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($iteration_statement(cp, e));

                if (e.p !== 36) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s = $277(l, e, _s(s, l, e, e.eh, _0));

                break;


            case "from":

                var cp = l.copy(), _sym = null;

                _sym = $16(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($from_clause(l, e));

                break;


            case "function":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($function_declaration(cp, e));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $278(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 186) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $550(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s = $552(l, e, _s(s, l, e, e.eh, _0));

                break;


            case "get":

                var cp = l.copy(), _sym = null;

                _sym = $12(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($method_definition(l, e));

                break;


            case "if":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($if_statement(cp, e));

                if (e.p !== 33) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s = $279(l, e, _s(s, l, e, e.eh, _0));

                break;


            case "implements": s = $296(l, e, _s(s, l, e, e.eh, _0)); break;

            case "import":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($import_meta(cp, e));

                if (e.p !== 95) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($import_call(cp, e));

                if (e.p !== 99) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s = $280(l, e, _s(s, l, e, e.eh, _0));

                break;


            case "in":

                var cp = l.copy(), _sym = null;

                _sym = $281(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 186) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $508(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 121) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s = $996(l, e, _s(s, l, e, e.eh, _0));

                break;


            case "instanceof":

                var cp = l.copy(), _sym = null;

                _sym = $282(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 186) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s = $507(l, e, _s(s, l, e, e.eh, _0));

                break;


            case "interface": s = $299(l, e, _s(s, l, e, e.eh, _0)); break;

            case "keyword":

                var cp = l.copy(), _sym = null;

                _sym = $703(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 208) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s = $712(l, e, _s(s, l, e, e.eh, _0));

                break;


            case "let": s = $187(l, e, _s(s, l, e, e.eh, _0)); break;

            case "meta": s = $817(l, e, _s(s, l, e, e.eh, _0)); break;

            case "n":

                var cp = l.copy(), _sym = null;

                _sym = $555(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 174) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s = $766(l, e, _s(s, l, e, e.eh, _0));

                break;


            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($new_expression(cp, e));

                if (e.p !== 91) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($new_target(cp, e));

                if (e.p !== 96) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s = $283(l, e, _s(s, l, e, e.eh, _0));

                break;


            case "null":

                var cp = l.copy(), _sym = null;

                _sym = $132(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 175) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s = $259(l, e, _s(s, l, e, e.eh, _0));

                break;


            case "of":

                var cp = l.copy(), _sym = null;

                _sym = $1063(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 36) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s = $997(l, e, _s(s, l, e, e.eh, _0));

                break;


            case "package": s = $297(l, e, _s(s, l, e, e.eh, _0)); break;

            case "private": s = $300(l, e, _s(s, l, e, e.eh, _0)); break;

            case "protected": s = $298(l, e, _s(s, l, e, e.eh, _0)); break;

            case "public": s = $301(l, e, _s(s, l, e, e.eh, _0)); break;

            case "return":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($return_statement(cp, e));

                if (e.p !== 41) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s = $284(l, e, _s(s, l, e, e.eh, _0));

                break;


            case "set":

                var cp = l.copy(), _sym = null;

                _sym = $13(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($method_definition(l, e));

                break;


            case "static": s.push($class_element(l, e)); break;

            case "super":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($super_property(cp, e));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($super_call(cp, e));

                if (e.p !== 98) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s = $285(l, e, _s(s, l, e, e.eh, _0));

                break;


            case "switch":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($switch_statement(cp, e));

                if (e.p !== 44) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s = $286(l, e, _s(s, l, e, e.eh, _0));

                break;


            case "target":

                var cp = l.copy(), _sym = null;

                _sym = $14(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s = $775(l, e, _s(s, l, e, e.eh, _0));

                break;


            case "this":

                var cp = l.copy(), _sym = null;

                _sym = $108(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 106) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s = $287(l, e, _s(s, l, e, e.eh, _0));

                break;


            case "throw":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($throw_statement(cp, e));

                if (e.p !== 42) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s = $288(l, e, _s(s, l, e, e.eh, _0));

                break;


            case "try":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($try_statement(cp, e));

                if (e.p !== 52) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s = $289(l, e, _s(s, l, e, e.eh, _0));

                break;


            case "typeof":

                var cp = l.copy(), _sym = null;

                _sym = $290(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 186) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($unary_expression(l, e));

                break;


            case "var":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($variable_statement(cp, e));

                if (e.p !== 57) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $291(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 186) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($iteration_statement_group_168_104(cp, e));

                if (e.p !== 34) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($iteration_statement_group_073_105(l, e));

                break;


            case "void":

                var cp = l.copy(), _sym = null;

                _sym = $292(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 186) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($unary_expression(l, e));

                break;


            case "while":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($iteration_statement(cp, e));

                if (e.p !== 36) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $293(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 186) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s = $844(l, e, _s(s, l, e, e.eh, _0));

                break;


            case "with":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($with_statement(cp, e));

                if (e.p !== 43) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s = $294(l, e, _s(s, l, e, e.eh, _0));

                break;


            case "yield":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($yield_expression(cp, e));

                if (e.p !== 77) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s = $295(l, e, _s(s, l, e, e.eh, _0));

                break;


            case "{":

                var cp = l.copy(), _sym = null;

                _sym = $1010(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 87) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1028(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1032(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1034(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1038(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1039(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1044(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1048(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1049(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($case_block(cp, e));

                if (e.p !== 45) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1086(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 87) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1089(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 87) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1092(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 87) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1095(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 87) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1107(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1108(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1110(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1111(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1114(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1118(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1119(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1121(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1122(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1124(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1125(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1129(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1159(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 87) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1160(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 87) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1162(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 87) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1164(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 87) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1185(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1186(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1188(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1190(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1191(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1192(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1197(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1203(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1237(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 87) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1262(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1263(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($object_binding_pattern(cp, e));

                if (e.p !== 133) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($block(cp, e));

                if (e.p !== 29) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($object_literal(cp, e));

                if (e.p !== 145) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($export_clause(cp, e));

                if (e.p !== 18) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $564(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 83) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $568(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 82) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($named_imports(cp, e));

                if (e.p !== 11) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $796(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 83) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $797(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 83) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $802(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 82) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $803(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 82) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($concise_body(cp, e));

                if (e.p !== 80) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $937(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $941(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 83) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $945(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s = $946(l, e, _s(s, l, e, e.eh, _0));

                break;


            case "|": s = $496(l, e, _s(s, l, e, e.eh, _0)); break;

            case "|=": s = $489(l, e, _s(s, l, e, e.eh, _0)); break;

            case "||": s = $494(l, e, _s(s, l, e, e.eh, _0)); break;

            case "}":

                var cp = l.copy(), _sym = null;

                _sym = $1052(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 83) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1053(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 83) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1054(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 82) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1058(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 82) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1060(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 83) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1062(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 82) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1064(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 80) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1066(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1069(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1081(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 133) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1105(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 87) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1127(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1131(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1133(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1137(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1138(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 83) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1139(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 82) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1141(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1143(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1145(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1146(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1147(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1150(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 45) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1176(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 87) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1179(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 87) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1181(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 87) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1183(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 87) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1184(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 87) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1194(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1196(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1199(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1201(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1202(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1205(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1206(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1207(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1209(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1211(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1213(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1214(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1215(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1216(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1217(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1218(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1221(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 45) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1223(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 45) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1227(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1229(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1231(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1234(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1250(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 87) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1251(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 87) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1252(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 87) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1254(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 87) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1257(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 87) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1259(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 87) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1260(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 87) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1261(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 87) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1264(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1265(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1266(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1267(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1269(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1270(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1271(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1273(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1275(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1277(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1278(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1279(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1281(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1283(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1285(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1287(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1289(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 45) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1290(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 45) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1291(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 45) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1293(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1294(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1295(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1296(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1299(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 87) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1300(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 87) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1302(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 87) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1303(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 87) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1305(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 87) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1309(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1310(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1311(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1312(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1313(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1314(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1315(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1316(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1317(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 45) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1319(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1321(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1322(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 87) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1324(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 66) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $1325(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($template_tail(cp, e));

                if (e.p !== 164) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($template_middle(cp, e));

                if (e.p !== 163) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $467(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 145) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $574(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 29) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $634(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 133) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $730(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 145) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $807(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 83) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $809(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 29) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $811(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 82) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $861(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 133) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $862(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 133) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $908(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 145) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $948(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 83) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $950(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 82) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $952(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 83) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $954(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 83) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $957(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 82) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = $965(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 82) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s = $990(l, e, _s(s, l, e, e.eh, _0));

                break;


            case "~": s.push($unary_expression(l, e)); break;

            default:

                switch (l.ty) {

                    case 1025:

                        var cp = l.copy(), _sym = null;

                        _sym = $708(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 208) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s = $718(l, e, _s(s, l, e, e.eh, _0));

                        break;


                    case 32: s = $448(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 4097:

                        var cp = l.copy(), _sym = null;

                        _sym = $707(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 208) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s = $717(l, e, _s(s, l, e, e.eh, _0));

                        break;


                    case 2:

                        var cp = l.copy(), _sym = null;

                        _sym = $414(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 208) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        cp = l.copy();

                        _sym = $450(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 204) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        cp = l.copy();

                        _sym = $702(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 208) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        cp = l.copy();

                        _sym = $711(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 210) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s = $8(l, e, _s(s, l, e, e.eh, _0));

                        break;


                    case 256: s = $592(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        cp = l.copy();

                        _sym = s.slice();

                        _sym.push($bigint(cp, e));

                        if (e.p !== 174) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        cp = l.copy();

                        _sym = $449(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 204) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        cp = l.copy();

                        _sym = $523(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        cp = l.copy();

                        _sym = $524(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 174) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        cp = l.copy();

                        _sym = $706(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 208) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s = $716(l, e, _s(s, l, e, e.eh, _0));

                        break;


                    case 16: s = $447(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 2049:

                        var cp = l.copy(), _sym = null;

                        _sym = $709(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 208) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s = $719(l, e, _s(s, l, e, e.eh, _0));

                        break;


                    case 128: s = $451(l, e, _s(s, l, e, e.eh, _0)); break;
                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 208:

                    s = $425(l, e, s);

                    if (e.p < 0) s = $426(l, e, s);

                    break;


                case 207: s = $805(l, e, s); break;

                case 204: s = $720(l, e, s); break;

                case 186: s = $257(l, e, s); break;

                case 185:

                    s = $6(l, e, s);

                    if (e.p < 0) s = $254(l, e, s);

                    break;


                case 184: s = $258(l, e, s); break;

                case 183: s = $255(l, e, s); break;

                case 182:

                    s = $7(l, e, s);

                    if (e.p < 0) s = $256(l, e, s);

                    break;


                case 181:

                    s = $251(l, e, s);

                    if (e.p < 0) s = $671(l, e, s);

                    if (e.p < 0) s = $800(l, e, s);

                    if (e.p < 0) s = $813(l, e, s);

                    if (e.p < 0) s = $771(l, e, s);

                    if (e.p < 0) s = $897(l, e, s);

                    break;


                case 180:

                    s = $4(l, e, s);

                    if (e.p < 0) s = $5(l, e, s);

                    if (e.p < 0) s = $211(l, e, s);

                    if (e.p < 0) s = $120(l, e, s);

                    if (e.p < 0) s = $121(l, e, s);

                    break;


                case 179:

                    s = $560(l, e, s);

                    if (e.p < 0) s = $566(l, e, s);

                    if (e.p < 0) s = $209(l, e, s);

                    if (e.p < 0) s = $222(l, e, s);

                    if (e.p < 0) s = $236(l, e, s);

                    if (e.p < 0) s = $557(l, e, s);

                    if (e.p < 0) s = $562(l, e, s);

                    if (e.p < 0) s = $782(l, e, s);

                    if (e.p < 0) s = $787(l, e, s);

                    if (e.p < 0) s = $778(l, e, s);

                    if (e.p < 0) s = $784(l, e, s);

                    if (e.p < 0) s = $870(l, e, s);

                    if (e.p < 0) s = $923(l, e, s);

                    if (e.p < 0) s = $921(l, e, s);

                    if (e.p < 0) s = $1000(l, e, s);

                    if (e.p < 0) s = $1073(l, e, s);

                    break;


                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    if (e.p < 0) s = $365(l, e, s);

                    if (e.p < 0) s = $366(l, e, s);

                    break;


                case 177:

                    s = $165(l, e, s);

                    if (e.p < 0) s = $600(l, e, s);

                    if (e.p < 0) s = $602(l, e, s);

                    break;


                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173:

                    s = $128(l, e, s);

                    if (e.p < 0) s = $253(l, e, s);

                    break;


                case 169:

                    s = $127(l, e, s);

                    if (e.p < 0) s = $621(l, e, s);

                    if (e.p < 0) s = $252(l, e, s);

                    break;


                case 168: s = $111(l, e, s); break;

                case 164:

                    s = $375(l, e, s);

                    if (e.p < 0) s = $685(l, e, s);

                    break;


                case 163: s = $380(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 161:

                    s = $376(l, e, s);

                    if (e.p < 0) s = $377(l, e, s);

                    break;


                case 160: s = $834(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157:

                    s = $117(l, e, s);

                    if (e.p < 0) s = $547(l, e, s);

                    if (e.p < 0) s = $540(l, e, s);

                    if (e.p < 0) s = $668(l, e, s);

                    if (e.p < 0) s = $672(l, e, s);

                    break;


                case 156: s = $531(l, e, s); break;

                case 155:

                    s = $638(l, e, s);

                    if (e.p < 0) s = $356(l, e, s);

                    if (e.p < 0) s = $355(l, e, s);

                    if (e.p < 0) s = $623(l, e, s);

                    if (e.p < 0) s = $528(l, e, s);

                    if (e.p < 0) s = $992(l, e, s);

                    if (e.p < 0) s = $986(l, e, s);

                    break;


                case 154:

                    s = $624(l, e, s);

                    if (e.p < 0) s = $529(l, e, s);

                    break;


                case 153: s = $112(l, e, s); break;

                case 152:

                    s = $631(l, e, s);

                    if (e.p < 0) s = $633(l, e, s);

                    if (e.p < 0) s = $645(l, e, s);

                    if (e.p < 0) s = $646(l, e, s);

                    if (e.p < 0) s = $651(l, e, s);

                    if (e.p < 0) s = $652(l, e, s);

                    break;


                case 151: s = $364(l, e, s); break;

                case 150: s = $250(l, e, s); break;

                case 149: s = $249(l, e, s); break;

                case 148:

                    s = $350(l, e, s);

                    if (e.p < 0) s = $369(l, e, s);

                    if (e.p < 0) s = $248(l, e, s);

                    if (e.p < 0) s = $655(l, e, s);

                    if (e.p < 0) s = $656(l, e, s);

                    if (e.p < 0) s = $657(l, e, s);

                    if (e.p < 0) s = $659(l, e, s);

                    if (e.p < 0) s = $888(l, e, s);

                    break;


                case 147: s = $362(l, e, s); break;

                case 146:

                    s = $468(l, e, s);

                    if (e.p < 0) s = $363(l, e, s);

                    break;


                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 142:

                    s = $640(l, e, s);

                    if (e.p < 0) s = $793(l, e, s);

                    if (e.p < 0) s = $865(l, e, s);

                    if (e.p < 0) s = $993(l, e, s);

                    if (e.p < 0) s = $1082(l, e, s);

                    break;


                case 141:

                    s = $349(l, e, s);

                    if (e.p < 0) s = $234(l, e, s);

                    break;


                case 140:

                    s = $357(l, e, s);

                    if (e.p < 0) s = $233(l, e, s);

                    break;


                case 139: s = $347(l, e, s); break;

                case 138: s = $353(l, e, s); break;

                case 137:

                    s = $639(l, e, s);

                    if (e.p < 0) s = $354(l, e, s);

                    break;


                case 136:

                    s = $636(l, e, s);

                    if (e.p < 0) s = $348(l, e, s);

                    break;


                case 135:

                    s = $635(l, e, s);

                    if (e.p < 0) s = $989(l, e, s);

                    break;


                case 134: s = $213(l, e, s); break;

                case 133: s = $212(l, e, s); break;

                case 132:

                    s = $210(l, e, s);

                    if (e.p < 0) s = $223(l, e, s);

                    if (e.p < 0) s = $235(l, e, s);

                    if (e.p < 0) s = $871(l, e, s);

                    if (e.p < 0) s = $1001(l, e, s);

                    if (e.p < 0) s = $1074(l, e, s);

                    break;


                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126:

                    s = $77(l, e, s);

                    if (e.p < 0) s = $519(l, e, s);

                    if (e.p < 0) s = $521(l, e, s);

                    if (e.p < 0) s = $520(l, e, s);

                    if (e.p < 0) s = $525(l, e, s);

                    if (e.p < 0) s = $522(l, e, s);

                    if (e.p < 0) s = $526(l, e, s);

                    if (e.p < 0) s = $533(l, e, s);

                    if (e.p < 0) s = $536(l, e, s);

                    if (e.p < 0) s = $534(l, e, s);

                    if (e.p < 0) s = $587(l, e, s);

                    break;


                case 125:

                    s = $76(l, e, s);

                    if (e.p < 0) s = $763(l, e, s);

                    if (e.p < 0) s = $762(l, e, s);

                    if (e.p < 0) s = $764(l, e, s);

                    if (e.p < 0) s = $765(l, e, s);

                    break;


                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    if (e.p < 0) s = $759(l, e, s);

                    if (e.p < 0) s = $760(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    if (e.p < 0) s = $757(l, e, s);

                    if (e.p < 0) s = $761(l, e, s);

                    if (e.p < 0) s = $758(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    if (e.p < 0) s = $751(l, e, s);

                    if (e.p < 0) s = $755(l, e, s);

                    if (e.p < 0) s = $752(l, e, s);

                    if (e.p < 0) s = $753(l, e, s);

                    if (e.p < 0) s = $756(l, e, s);

                    if (e.p < 0) s = $754(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    if (e.p < 0) s = $748(l, e, s);

                    if (e.p < 0) s = $749(l, e, s);

                    if (e.p < 0) s = $747(l, e, s);

                    if (e.p < 0) s = $750(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    if (e.p < 0) s = $746(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    if (e.p < 0) s = $745(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    if (e.p < 0) s = $744(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    if (e.p < 0) s = $743(l, e, s);

                    if (e.p < 0) s = $824(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    if (e.p < 0) s = $742(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 109: s = $478(l, e, s); break;

                case 108:

                    s = $46(l, e, s);

                    if (e.p < 0) s = $530(l, e, s);

                    if (e.p < 0) s = $594(l, e, s);

                    if (e.p < 0) s = $674(l, e, s);

                    if (e.p < 0) s = $660(l, e, s);

                    if (e.p < 0) s = $774(l, e, s);

                    if (e.p < 0) s = $875(l, e, s);

                    if (e.p < 0) s = $826(l, e, s);

                    if (e.p < 0) s = $327(l, e, s);

                    if (e.p < 0) s = $833(l, e, s);

                    if (e.p < 0) s = $740(l, e, s);

                    if (e.p < 0) s = $741(l, e, s);

                    if (e.p < 0) s = $738(l, e, s);

                    if (e.p < 0) s = $739(l, e, s);

                    if (e.p < 0) s = $828(l, e, s);

                    if (e.p < 0) s = $1020(l, e, s);

                    break;


                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 105:

                    s = $535(l, e, s);

                    if (e.p < 0) s = $318(l, e, s);

                    if (e.p < 0) s = $543(l, e, s);

                    if (e.p < 0) s = $544(l, e, s);

                    break;


                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 103:

                    s = $814(l, e, s);

                    if (e.p < 0) s = $330(l, e, s);

                    break;


                case 101: s = $331(l, e, s); break;

                case 100:

                    s = $538(l, e, s);

                    if (e.p < 0) s = $542(l, e, s);

                    if (e.p < 0) s = $577(l, e, s);

                    if (e.p < 0) s = $665(l, e, s);

                    if (e.p < 0) s = $669(l, e, s);

                    if (e.p < 0) s = $776(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    if (e.p < 0) s = $549(l, e, s);

                    break;


                case 91:

                    s = $92(l, e, s);

                    if (e.p < 0) s = $572(l, e, s);

                    break;


                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    if (e.p < 0) s = $885(l, e, s);

                    break;


                case 89:

                    s = $44(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    if (e.p < 0) s = $611(l, e, s);

                    if (e.p < 0) s = $628(l, e, s);

                    if (e.p < 0) s = $622(l, e, s);

                    if (e.p < 0) s = $604(l, e, s);

                    if (e.p < 0) s = $606(l, e, s);

                    if (e.p < 0) s = $836(l, e, s);

                    if (e.p < 0) s = $837(l, e, s);

                    if (e.p < 0) s = $855(l, e, s);

                    if (e.p < 0) s = $838(l, e, s);

                    if (e.p < 0) s = $882(l, e, s);

                    if (e.p < 0) s = $812(l, e, s);

                    if (e.p < 0) s = $835(l, e, s);

                    if (e.p < 0) s = $808(l, e, s);

                    if (e.p < 0) s = $900(l, e, s);

                    if (e.p < 0) s = $898(l, e, s);

                    if (e.p < 0) s = $1015(l, e, s);

                    if (e.p < 0) s = $1013(l, e, s);

                    if (e.p < 0) s = $1077(l, e, s);

                    if (e.p < 0) s = $1085(l, e, s);

                    if (e.p < 0) s = $1093(l, e, s);

                    if (e.p < 0) s = $1096(l, e, s);

                    if (e.p < 0) s = $1102(l, e, s);

                    if (e.p < 0) s = $1100(l, e, s);

                    if (e.p < 0) s = $1153(l, e, s);

                    if (e.p < 0) s = $1166(l, e, s);

                    if (e.p < 0) s = $1168(l, e, s);

                    if (e.p < 0) s = $1170(l, e, s);

                    if (e.p < 0) s = $1243(l, e, s);

                    break;


                case 88: s = $1005(l, e, s); break;

                case 87:

                    s = $367(l, e, s);

                    if (e.p < 0) s = $308(l, e, s);

                    break;


                case 86: s = $305(l, e, s); break;

                case 85:

                    s = $810(l, e, s);

                    if (e.p < 0) s = $306(l, e, s);

                    if (e.p < 0) s = $806(l, e, s);

                    if (e.p < 0) s = $964(l, e, s);

                    if (e.p < 0) s = $956(l, e, s);

                    if (e.p < 0) s = $953(l, e, s);

                    if (e.p < 0) s = $951(l, e, s);

                    if (e.p < 0) s = $1061(l, e, s);

                    if (e.p < 0) s = $1059(l, e, s);

                    break;


                case 84:

                    s = $567(l, e, s);

                    if (e.p < 0) s = $563(l, e, s);

                    if (e.p < 0) s = $801(l, e, s);

                    if (e.p < 0) s = $795(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 82:

                    s = $182(l, e, s);

                    if (e.p < 0) s = $773(l, e, s);

                    break;


                case 81: s = $158(l, e, s); break;

                case 80:

                    s = $825(l, e, s);

                    if (e.p < 0) s = $947(l, e, s);

                    break;


                case 79:

                    s = $163(l, e, s);

                    if (e.p < 0) s = $551(l, e, s);

                    break;


                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 76: s = $593(l, e, s); break;

                case 75:

                    s = $968(l, e, s);

                    if (e.p < 0) s = $1067(l, e, s);

                    break;


                case 74:

                    s = $1068(l, e, s);

                    if (e.p < 0) s = $1065(l, e, s);

                    if (e.p < 0) s = $1104(l, e, s);

                    if (e.p < 0) s = $1136(l, e, s);

                    if (e.p < 0) s = $1144(l, e, s);

                    if (e.p < 0) s = $1142(l, e, s);

                    if (e.p < 0) s = $1140(l, e, s);

                    if (e.p < 0) s = $1126(l, e, s);

                    if (e.p < 0) s = $1134(l, e, s);

                    if (e.p < 0) s = $1130(l, e, s);

                    if (e.p < 0) s = $1132(l, e, s);

                    if (e.p < 0) s = $1175(l, e, s);

                    if (e.p < 0) s = $1178(l, e, s);

                    if (e.p < 0) s = $1180(l, e, s);

                    if (e.p < 0) s = $1182(l, e, s);

                    if (e.p < 0) s = $1226(l, e, s);

                    if (e.p < 0) s = $1212(l, e, s);

                    if (e.p < 0) s = $1228(l, e, s);

                    if (e.p < 0) s = $1210(l, e, s);

                    if (e.p < 0) s = $1230(l, e, s);

                    if (e.p < 0) s = $1233(l, e, s);

                    if (e.p < 0) s = $1193(l, e, s);

                    if (e.p < 0) s = $1200(l, e, s);

                    if (e.p < 0) s = $1198(l, e, s);

                    if (e.p < 0) s = $1208(l, e, s);

                    if (e.p < 0) s = $1204(l, e, s);

                    if (e.p < 0) s = $1195(l, e, s);

                    if (e.p < 0) s = $1249(l, e, s);

                    if (e.p < 0) s = $1253(l, e, s);

                    if (e.p < 0) s = $1256(l, e, s);

                    if (e.p < 0) s = $1258(l, e, s);

                    if (e.p < 0) s = $1280(l, e, s);

                    if (e.p < 0) s = $1282(l, e, s);

                    if (e.p < 0) s = $1284(l, e, s);

                    if (e.p < 0) s = $1286(l, e, s);

                    if (e.p < 0) s = $1276(l, e, s);

                    if (e.p < 0) s = $1272(l, e, s);

                    if (e.p < 0) s = $1268(l, e, s);

                    if (e.p < 0) s = $1274(l, e, s);

                    if (e.p < 0) s = $1301(l, e, s);

                    if (e.p < 0) s = $1318(l, e, s);

                    if (e.p < 0) s = $1320(l, e, s);

                    break;


                case 73:

                    s = $239(l, e, s);

                    if (e.p < 0) s = $1006(l, e, s);

                    break;


                case 72: s = $791(l, e, s); break;

                case 71:

                    s = $792(l, e, s);

                    if (e.p < 0) s = $238(l, e, s);

                    break;


                case 69:

                    s = $798(l, e, s);

                    if (e.p < 0) s = $789(l, e, s);

                    if (e.p < 0) s = $895(l, e, s);

                    if (e.p < 0) s = $931(l, e, s);

                    if (e.p < 0) s = $939(l, e, s);

                    if (e.p < 0) s = $942(l, e, s);

                    if (e.p < 0) s = $925(l, e, s);

                    if (e.p < 0) s = $934(l, e, s);

                    if (e.p < 0) s = $929(l, e, s);

                    if (e.p < 0) s = $1035(l, e, s);

                    if (e.p < 0) s = $1045(l, e, s);

                    if (e.p < 0) s = $1050(l, e, s);

                    if (e.p < 0) s = $1029(l, e, s);

                    if (e.p < 0) s = $1023(l, e, s);

                    if (e.p < 0) s = $1040(l, e, s);

                    if (e.p < 0) s = $1115(l, e, s);

                    if (e.p < 0) s = $1112(l, e, s);

                    break;


                case 68:

                    s = $893(l, e, s);

                    if (e.p < 0) s = $1007(l, e, s);

                    if (e.p < 0) s = $1011(l, e, s);

                    if (e.p < 0) s = $1090(l, e, s);

                    break;


                case 67: s = $114(l, e, s); break;

                case 66:

                    s = $185(l, e, s);

                    if (e.p < 0) s = $323(l, e, s);

                    break;


                case 65: s = $226(l, e, s); break;

                case 64:

                    s = $609(l, e, s);

                    if (e.p < 0) s = $225(l, e, s);

                    break;


                case 62:

                    s = $186(l, e, s);

                    if (e.p < 0) s = $886(l, e, s);

                    break;


                case 61:

                    s = $184(l, e, s);

                    if (e.p < 0) s = $879(l, e, s);

                    break;


                case 60: s = $218(l, e, s); break;

                case 59:

                    s = $590(l, e, s);

                    if (e.p < 0) s = $217(l, e, s);

                    break;


                case 57:

                    s = $30(l, e, s);

                    if (e.p < 0) s = $471(l, e, s);

                    break;


                case 56: s = $40(l, e, s); break;

                case 55: s = $1072(l, e, s); break;

                case 54:

                    s = $840(l, e, s);

                    if (e.p < 0) s = $974(l, e, s);

                    break;


                case 53: s = $839(l, e, s); break;

                case 52: s = $39(l, e, s); break;

                case 51: s = $845(l, e, s); break;

                case 50: s = $29(l, e, s); break;

                case 49:

                    s = $1149(l, e, s);

                    if (e.p < 0) s = $1219(l, e, s);

                    break;


                case 48:

                    s = $202(l, e, s);

                    if (e.p < 0) s = $627(l, e, s);

                    break;


                case 47:

                    s = $1148(l, e, s);

                    if (e.p < 0) s = $201(l, e, s);

                    if (e.p < 0) s = $1220(l, e, s);

                    if (e.p < 0) s = $1222(l, e, s);

                    if (e.p < 0) s = $1288(l, e, s);

                    break;


                case 45: s = $1070(l, e, s); break;

                case 44: s = $170(l, e, s); break;

                case 43: s = $37(l, e, s); break;

                case 42: s = $38(l, e, s); break;

                case 41: s = $36(l, e, s); break;

                case 40: s = $35(l, e, s); break;

                case 39: s = $34(l, e, s); break;

                case 38:

                    s = $999(l, e, s);

                    if (e.p < 0) s = $1002(l, e, s);

                    break;


                case 37: s = $887(l, e, s); break;

                case 36: s = $169(l, e, s); break;

                case 35:

                    s = $880(l, e, s);

                    if (e.p < 0) s = $967(l, e, s);

                    break;


                case 34: s = $878(l, e, s); break;

                case 33: s = $32(l, e, s); break;

                case 32: s = $1155(l, e, s); break;

                case 31: s = $28(l, e, s); break;

                case 30: s = $31(l, e, s); break;

                case 29:

                    s = $41(l, e, s);

                    if (e.p < 0) s = $607(l, e, s);

                    if (e.p < 0) s = $976(l, e, s);

                    if (e.p < 0) s = $1225(l, e, s);

                    break;


                case 28: s = $27(l, e, s); break;

                case 27: s = $33(l, e, s); break;

                case 26:

                    s = $183(l, e, s);

                    if (e.p < 0) s = $772(l, e, s);

                    break;


                case 25:

                    s = $26(l, e, s);

                    if (e.p < 0) s = $472(l, e, s);

                    break;


                case 24:

                    s = $610(l, e, s);

                    if (e.p < 0) s = $25(l, e, s);

                    if (e.p < 0) s = $322(l, e, s);

                    if (e.p < 0) s = $1078(l, e, s);

                    if (e.p < 0) s = $1079(l, e, s);

                    if (e.p < 0) s = $1080(l, e, s);

                    if (e.p < 0) s = $1177(l, e, s);

                    if (e.p < 0) s = $1174(l, e, s);

                    if (e.p < 0) s = $1236(l, e, s);

                    if (e.p < 0) s = $1239(l, e, s);

                    if (e.p < 0) s = $1238(l, e, s);

                    if (e.p < 0) s = $1245(l, e, s);

                    if (e.p < 0) s = $1246(l, e, s);

                    if (e.p < 0) s = $1247(l, e, s);

                    if (e.p < 0) s = $1255(l, e, s);

                    if (e.p < 0) s = $1248(l, e, s);

                    if (e.p < 0) s = $1297(l, e, s);

                    if (e.p < 0) s = $1304(l, e, s);

                    if (e.p < 0) s = $1308(l, e, s);

                    if (e.p < 0) s = $1306(l, e, s);

                    if (e.p < 0) s = $1307(l, e, s);

                    if (e.p < 0) s = $1323(l, e, s);

                    break;


                case 23:

                    s = $228(l, e, s);

                    if (e.p < 0) s = $661(l, e, s);

                    break;


                case 22:

                    s = $573(l, e, s);

                    if (e.p < 0) s = $229(l, e, s);

                    if (e.p < 0) s = $988(l, e, s);

                    if (e.p < 0) s = $969(l, e, s);

                    break;


                case 18: s = $470(l, e, s); break;

                case 15:

                    s = $3(l, e, s);

                    if (e.p < 0) s = $618(l, e, s);

                    break;


                case 14: s = $614(l, e, s); break;

                case 13: s = $2(l, e, s); break;

                case 12:

                    s = $847(l, e, s);

                    if (e.p < 0) s = $731(l, e, s);

                    if (e.p < 0) s = $733(l, e, s);

                    break;


                case 11: s = $617(l, e, s); break;

                case 10: s = $1(l, e, s); break;

                case 9: s = $616(l, e, s); break;

                case 8: s = $615(l, e, s); break;

                case 7: s = $613(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![10].includes(a)) fail(l, e);

        return s;
    }
    function $1(l, e, s = []) {

        e.p = -1;


        if (_1.includes(l.tx)) { return $460(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $2(l, e, s = []) {

        e.p = -1;


        if (_2.includes(l.tx)) {

            e.sp -= 1;

            var sym = s.slice(-1);

            s.splice(-1, 1, [sym[0]]);

            return (e.p = 10, s);
        }

        return s;
    }
    function $3(l, e, s = []) {

        e.p = -1;


        if (_2.includes(l.tx)) {

            e.sp -= 1;

            var sym = s.slice(-1);

            s.splice(-1, 1, { type: "Specifier", nodes: [sym[0]], pos });

            return (e.p = 13, s);
        }

        return s;
    }
    function $4(l, e, s = []) {

        e.p = -1;


        if (_3.includes(l.tx)) { return $462(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $5(l, e, s = []) {

        e.p = -1;


        if ([",", "from", "}"].includes(l.tx)) {

            e.sp -= 1;

            var sym = s.slice(-1);

            s.splice(-1, 1, sym[0].type = "IdentifierModule", sym[0]);

            return (e.p = 15, s);
        }

        return s;
    }
    function $6(l, e, s = []) { e.p = -1; s = $_6(l, e, s); return s; }
    function $7(l, e, s = []) { e.p = -1; s = $_6(l, e, s); return s; }
    function $8(l, e, s = []) { e.p = -1; s = $_7(l, e, s); return s; }
    function $9(l, e, s = []) { e.p = -1; s = $_7(l, e, s); return s; }
    function $10(l, e, s = []) { e.p = -1; s = $_7(l, e, s); return s; }
    function $11(l, e, s = []) { e.p = -1; s = $_8(l, e, s); return s; }
    function $12(l, e, s = []) { e.p = -1; s = $_8(l, e, s); return s; }
    function $13(l, e, s = []) { e.p = -1; s = $_8(l, e, s); return s; }
    function $14(l, e, s = []) { e.p = -1; s = $_8(l, e, s); return s; }
    function $15(l, e, s = []) { e.p = -1; s = $_8(l, e, s); return s; }
    function $16(l, e, s = []) { e.p = -1; s = $_8(l, e, s); return s; }
    function $import_specifier(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_9(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180:

                    s = $4(l, e, s);

                    if (e.p < 0) s = $5(l, e, s);

                    break;


                case 15: s = $3(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![13].includes(a)) fail(l, e);

        return s;
    }
    function $export_clause_HC_listbody1_102(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_9(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $21(l, e, s); break;

                case 19: s = $20(l, e, s); break;

                case 17: s = $19(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![17].includes(a)) fail(l, e);

        return s;
    }
    function $19(l, e, s = []) {

        e.p = -1;


        if (_1.includes(l.tx)) { return $465(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $20(l, e, s = []) {

        e.p = -1;


        if (_2.includes(l.tx)) {

            e.sp -= 1;

            var sym = s.slice(-1);

            s.splice(-1, 1, [sym[0]]);

            return (e.p = 17, s);
        }

        return s;
    }
    function $21(l, e, s = []) {

        e.p = -1;


        switch (l.tx) {

            case "as": return $466(l, e, _s(s, l, e, e.eh, _0));

            case ",":

            case "}":

                e.sp -= 1;

                var sym = s.slice(-1);

                s.splice(-1, 1, { type: "Specifier", nodes: [sym[0]], pos });

                return (e.p = 19, s);

        }

        return s;
    }
    function $export_declaration(l, e, s = []) {

        e.p = -1;


        if (["export"].includes(l.tx)) { s.push($export_declaration(l, e)); }

        return s;
    }
    function $statement_list_item(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_15(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180:

                    s = $120(l, e, s);

                    if (e.p < 0) s = $121(l, e, s);

                    break;


                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 177: s = $165(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $44(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 82: s = $182(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                case 66: s = $185(l, e, s); break;

                case 62: s = $186(l, e, s); break;

                case 61: s = $184(l, e, s); break;

                case 57: s = $30(l, e, s); break;

                case 56: s = $40(l, e, s); break;

                case 52: s = $39(l, e, s); break;

                case 50: s = $29(l, e, s); break;

                case 44: s = $170(l, e, s); break;

                case 43: s = $37(l, e, s); break;

                case 42: s = $38(l, e, s); break;

                case 41: s = $36(l, e, s); break;

                case 40: s = $35(l, e, s); break;

                case 39: s = $34(l, e, s); break;

                case 36: s = $169(l, e, s); break;

                case 33: s = $32(l, e, s); break;

                case 31: s = $28(l, e, s); break;

                case 30: s = $31(l, e, s); break;

                case 29: s = $41(l, e, s); break;

                case 28: s = $27(l, e, s); break;

                case 27: s = $33(l, e, s); break;

                case 26: s = $183(l, e, s); break;

                case 25: s = $26(l, e, s); break;

                case 24: s = $25(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![23].includes(a)) fail(l, e);

        return s;
    }
    function $25(l, e, s = []) { e.p = -1; s = $_16(l, e, s); return s; }
    function $26(l, e, s = []) { e.p = -1; s = $_16(l, e, s); return s; }
    function $27(l, e, s = []) { e.p = -1; s = $_17(l, e, s); return s; }
    function $28(l, e, s = []) { e.p = -1; s = $_17(l, e, s); return s; }
    function $29(l, e, s = []) { e.p = -1; s = $_17(l, e, s); return s; }
    function $30(l, e, s = []) { e.p = -1; s = $_17(l, e, s); return s; }
    function $31(l, e, s = []) { e.p = -1; s = $_17(l, e, s); return s; }
    function $32(l, e, s = []) { e.p = -1; s = $_17(l, e, s); return s; }
    function $33(l, e, s = []) { e.p = -1; s = $_17(l, e, s); return s; }
    function $34(l, e, s = []) { e.p = -1; s = $_17(l, e, s); return s; }
    function $35(l, e, s = []) { e.p = -1; s = $_17(l, e, s); return s; }
    function $36(l, e, s = []) { e.p = -1; s = $_17(l, e, s); return s; }
    function $37(l, e, s = []) { e.p = -1; s = $_17(l, e, s); return s; }
    function $38(l, e, s = []) { e.p = -1; s = $_17(l, e, s); return s; }
    function $39(l, e, s = []) { e.p = -1; s = $_17(l, e, s); return s; }
    function $40(l, e, s = []) { e.p = -1; s = $_17(l, e, s); return s; }
    function $41(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 1;

            return (e.p = 28, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }
    function $44(l, e, s = []) {

        e.p = -1;


        if (_8.includes(l.tx)) { return $475(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $45(l, e, s = []) {

        e.p = -1;


        if (_1.includes(l.tx)) { return $476(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $46(l, e, s = []) {

        e.p = -1;


        if (_9.includes(l.tx)) {

            e.sp -= 1;

            return (e.p = 89, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }
    function $47(l, e, s = []) { e.p = -1; s = $_24(l, e, s); return s; }
    function $48(l, e, s = []) { e.p = -1; s = $_24(l, e, s); return s; }
    function $49(l, e, s = []) { e.p = -1; s = $_24(l, e, s); return s; }
    function $50(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "%=": s = $481(l, e, _s(s, l, e, e.eh, _0)); break;

            case "&=": s = $487(l, e, _s(s, l, e, e.eh, _0)); break;

            case "**=": s = $490(l, e, _s(s, l, e, e.eh, _0)); break;

            case "*=": s = $479(l, e, _s(s, l, e, e.eh, _0)); break;

            case "+=": s = $482(l, e, _s(s, l, e, e.eh, _0)); break;

            case "-=": s = $483(l, e, _s(s, l, e, e.eh, _0)); break;

            case "/=": s = $480(l, e, _s(s, l, e, e.eh, _0)); break;

            case "<<=": s = $484(l, e, _s(s, l, e, e.eh, _0)); break;

            case "=": s = $477(l, e, _s(s, l, e, e.eh, _0)); break;

            case ">>=": s = $485(l, e, _s(s, l, e, e.eh, _0)); break;

            case ">>>=": s = $486(l, e, _s(s, l, e, e.eh, _0)); break;

            case "^=": s = $488(l, e, _s(s, l, e, e.eh, _0)); break;

            case "|=": s = $489(l, e, _s(s, l, e, e.eh, _0)); break;
        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 109: s = $478(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![108].includes(a)) fail(l, e);

        return s;
    }
    function $51(l, e, s = []) {

        e.p = -1;


        switch (l.tx) {

            case "++": return $491(l, e, _s(s, l, e, e.eh, _0));

            case "--": return $492(l, e, _s(s, l, e, e.eh, _0));

            case "!=":

            case "!==":

            case "%":

            case "&":

            case "&&":

            case ")":

            case "*":

            case "**":

            case "+":

            case ",":

            case "-":

            case "/":

            case ":":

            case ";":

            case "<":

            case "<<":

            case "<=":

            case "==":

            case "===":

            case ">":

            case ">=":

            case ">>":

            case ">>>":

            case "?":

            case "??":

            case "]":

            case "^":

            case "in":

            case "instanceof":

            case "|":

            case "||":

            case "}":

                e.sp -= 1;

                return (e.p = 127, (s.splice(-1, 1, s[s.length - 1]), s));

        }

        return s;
    }
    function $52(l, e, s = []) {

        e.p = -1;


        switch (l.tx) {

            case "?": return $493(l, e, _s(s, l, e, e.eh, _0));

            case ")":

            case ",":

            case ":":

            case ";":

            case "]":

            case "}":

                e.sp -= 1;

                return (e.p = 110, (s.splice(-1, 1, s[s.length - 1]), s));

        }

        return s;
    }
    function $53(l, e, s = []) { e.p = -1; s = $_28(l, e, s); return s; }
    function $54(l, e, s = []) {

        e.p = -1;


        if (["||"].includes(l.tx)) { return $494(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $55(l, e, s = []) { e.p = -1; s = $_28(l, e, s); return s; }
    function $56(l, e, s = []) { e.p = -1; s = $_30(l, e, s); return s; }
    function $57(l, e, s = []) {

        e.p = -1;


        if (_12.includes(l.tx)) {

            e.sp -= 1;

            return (e.p = 112, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }
    function $58(l, e, s = []) {

        e.p = -1;


        if (["&&"].includes(l.tx)) { return $495(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $59(l, e, s = []) {

        e.p = -1;


        if (_13.includes(l.tx)) {

            e.sp -= 1;

            return (e.p = 113, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }
    function $60(l, e, s = []) {

        e.p = -1;


        if (["|"].includes(l.tx)) { return $496(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $61(l, e, s = []) { e.p = -1; s = $_30(l, e, s); return s; }
    function $62(l, e, s = []) {

        e.p = -1;


        if (_14.includes(l.tx)) {

            e.sp -= 1;

            return (e.p = 117, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }
    function $63(l, e, s = []) {

        e.p = -1;


        if (["^"].includes(l.tx)) { return $497(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $64(l, e, s = []) {

        e.p = -1;


        if (_15.includes(l.tx)) {

            e.sp -= 1;

            return (e.p = 118, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }
    function $65(l, e, s = []) {

        e.p = -1;


        if (["&"].includes(l.tx)) { return $498(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $66(l, e, s = []) {

        e.p = -1;


        if (_16.includes(l.tx)) {

            e.sp -= 1;

            return (e.p = 119, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }
    function $67(l, e, s = []) {

        e.p = -1;


        switch (l.tx) {

            case "!=": return $500(l, e, _s(s, l, e, e.eh, _0));

            case "!==": return $502(l, e, _s(s, l, e, e.eh, _0));

            case "==": return $499(l, e, _s(s, l, e, e.eh, _0));

            case "===": return $501(l, e, _s(s, l, e, e.eh, _0));
        }

        return s;
    }
    function $68(l, e, s = []) {

        e.p = -1;


        if (_17.includes(l.tx)) {

            e.sp -= 1;

            return (e.p = 120, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }
    function $69(l, e, s = []) {

        e.p = -1;


        switch (l.tx) {

            case "<": return $503(l, e, _s(s, l, e, e.eh, _0));

            case "<=": return $505(l, e, _s(s, l, e, e.eh, _0));

            case ">": return $504(l, e, _s(s, l, e, e.eh, _0));

            case ">=": return $506(l, e, _s(s, l, e, e.eh, _0));

            case "in": return $508(l, e, _s(s, l, e, e.eh, _0));

            case "instanceof": return $507(l, e, _s(s, l, e, e.eh, _0));
        }

        return s;
    }
    function $70(l, e, s = []) {

        e.p = -1;


        if (_18.includes(l.tx)) {

            e.sp -= 1;

            return (e.p = 121, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }
    function $71(l, e, s = []) {

        e.p = -1;


        switch (l.tx) {

            case "<<": return $509(l, e, _s(s, l, e, e.eh, _0));

            case ">>": return $510(l, e, _s(s, l, e, e.eh, _0));

            case ">>>": return $511(l, e, _s(s, l, e, e.eh, _0));
        }

        return s;
    }
    function $72(l, e, s = []) {

        e.p = -1;


        if (_19.includes(l.tx)) {

            e.sp -= 1;

            return (e.p = 122, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }
    function $73(l, e, s = []) {

        e.p = -1;


        switch (l.tx) {

            case "+": return $512(l, e, _s(s, l, e, e.eh, _0));

            case "-": return $513(l, e, _s(s, l, e, e.eh, _0));
        }

        return s;
    }
    function $74(l, e, s = []) {

        e.p = -1;


        if (_20.includes(l.tx)) {

            e.sp -= 1;

            return (e.p = 123, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }
    function $75(l, e, s = []) {

        e.p = -1;


        switch (l.tx) {

            case "%": return $516(l, e, _s(s, l, e, e.eh, _0));

            case "*": return $514(l, e, _s(s, l, e, e.eh, _0));

            case "/": return $515(l, e, _s(s, l, e, e.eh, _0));
        }

        return s;
    }
    function $76(l, e, s = []) {

        e.p = -1;


        if (_21.includes(l.tx)) {

            e.sp -= 1;

            return (e.p = 124, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }
    function $77(l, e, s = []) {

        e.p = -1;


        if (_21.includes(l.tx)) {

            e.sp -= 1;

            return (e.p = 125, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }
    function $78(l, e, s = []) {

        e.p = -1;


        if (["**"].includes(l.tx)) { return $517(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $79(l, e, s = []) { e.p = -1; s = $_52(l, e, s); return s; }
    function $89(l, e, s = []) { e.p = -1; s = $_52(l, e, s); return s; }
    function $92(l, e, s = []) { e.p = -1; s = $_55(l, e, s); return s; }
    function $93(l, e, s = []) { e.p = -1; s = $_55(l, e, s); return s; }
    function $94(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "(": s.push($arguments(l, e)); break;

            case ".": s = $537(l, e, _s(s, l, e, e.eh, _0)); break;

            case "[": s = $539(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $540(l, e, s); break;

                case 100: s = $538(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![97].includes(a)) fail(l, e);

        return s;
    }
    function $95(l, e, s = []) {

        s.push($optional_chain(l, e, s));

        e.sp++;

        return s;
    }
    function $96(l, e, s = []) { e.p = -1; s = $_55(l, e, s); return s; }
    function $97(l, e, s = []) {

        s.push($optional_chain(l, e, s));

        e.sp++;

        return s;
    }
    function $98(l, e, s = []) {

        e.p = -1;


        if (_24.includes(l.tx)) {

            e.sp -= 1;

            return (e.p = 91, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }
    function $99(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case ".": s = $546(l, e, _s(s, l, e, e.eh, _0)); break;

            case "[": s = $545(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $547(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![92].includes(a)) fail(l, e);

        return s;
    }
    function $100(l, e, s = []) { s.push($arguments(l, e, s)); e.sp++; return s; }
    function $101(l, e, s = []) {

        s.push($optional_chain(l, e, s));

        e.sp++;

        return s;
    }
    function $105(l, e, s = []) { e.p = -1; s = $_61(l, e, s); return s; }
    function $106(l, e, s = []) { e.p = -1; s = $_61(l, e, s); return s; }
    function $107(l, e, s = []) { e.p = -1; s = $_61(l, e, s); return s; }
    function $108(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 1;

            var sym = s.slice(-1);

            s.splice(-1, 1, { type: "ThisLiteral", pos });

            return (e.p = 106, s);
        }

        return s;
    }
    function $109(l, e, s = []) { e.p = -1; s = $_63(l, e, s); return s; }
    function $110(l, e, s = []) {

        e.p = -1;


        if (_27.includes(l.tx)) {

            e.sp -= 1;

            var sym = s.slice(-1);

            s.splice(-1, 1, sym[0].type = "IdentifierBinding", sym[0]);

            return (e.p = 79, s);
        }

        return s;
    }
    function $111(l, e, s = []) { e.p = -1; s = $_63(l, e, s); return s; }
    function $112(l, e, s = []) { e.p = -1; s = $_63(l, e, s); return s; }
    function $113(l, e, s = []) { e.p = -1; s = $_63(l, e, s); return s; }
    function $114(l, e, s = []) { e.p = -1; s = $_63(l, e, s); return s; }
    function $115(l, e, s = []) { e.p = -1; s = $_63(l, e, s); return s; }
    function $116(l, e, s = []) { e.p = -1; s = $_63(l, e, s); return s; }
    function $117(l, e, s = []) { e.p = -1; s = $_63(l, e, s); return s; }
    function $118(l, e, s = []) { e.p = -1; s = $_63(l, e, s); return s; }
    function $119(l, e, s = []) {

        e.p = -1;


        if (_27.includes(l.tx)) {

            e.sp -= 1;

            return (e.p = 130, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }
    function $120(l, e, s = []) {

        e.p = -1;


        if (_28.includes(l.tx)) {

            e.sp -= 1;

            var sym = s.slice(-1);

            s.splice(-1, 1, sym[0].type = "IdentifierReference", sym[0]);

            return (e.p = 178, s);
        }

        return s;
    }
    function $121(l, e, s = []) {

        e.p = -1;


        if ([":", ";"].includes(l.tx)) {

            e.sp -= 1;

            var sym = s.slice(-1);

            s.splice(-1, 1, sym[0].type = "IdentifierLabel", sym[0]);

            return (e.p = 177, s);
        }

        return s;
    }
    function $125(l, e, s = []) { e.p = -1; s = $_71(l, e, s); return s; }
    function $126(l, e, s = []) { e.p = -1; s = $_71(l, e, s); return s; }
    function $127(l, e, s = []) { e.p = -1; s = $_71(l, e, s); return s; }
    function $128(l, e, s = []) { e.p = -1; s = $_71(l, e, s); return s; }
    function $129(l, e, s = []) { e.p = -1; s = $_71(l, e, s); return s; }
    function $130(l, e, s = []) { e.p = -1; s = $_72(l, e, s); return s; }
    function $131(l, e, s = []) { e.p = -1; s = $_72(l, e, s); return s; }
    function $132(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 1;

            var sym = s.slice(-1);

            s.splice(-1, 1, { type: "NullLiteral", pos });

            return (e.p = 175, s);
        }

        return s;
    }
    function $135(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 1;

            var sym = s.slice(-1);

            s.splice(
                -1,
                1,
                {

                    type: "NumericLiteral",

                    computed_value: parseFloat(),

                    pos,

                    NEGATIVE: !!null
                }
            );

            return (e.p = 173, s);
        }

        return s;
    }
    function $143(l, e, s = []) { e.p = -1; s = $_84(l, e, s); return s; }
    function $144(l, e, s = []) { e.p = -1; s = $_84(l, e, s); return s; }
    function $147(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_87(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $120(l, e, s); break;

                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $606(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![159].includes(a)) fail(l, e);

        return s;
    }
    function $152(l, e, s = []) { e.p = -1; s = $_90(l, e, s); return s; }
    function $153(l, e, s = []) { e.p = -1; s = $_90(l, e, s); return s; }
    function $156(l, e, s = []) { e.p = -1; s = $_93(l, e, s); return s; }
    function $157(l, e, s = []) { e.p = -1; s = $_93(l, e, s); return s; }
    function $158(l, e, s = []) { e.p = -1; s = $_93(l, e, s); return s; }
    function $160(l, e, s = []) {

        e.p = -1;


        if (_11.includes(l.tx)) { return $586(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $161(l, e, s = []) {

        e.p = -1;


        if (_11.includes(l.tx)) {

            e.sp -= 1;

            return (e.p = 116, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }
    function $163(l, e, s = []) {

        e.p = -1;


        if (_27.includes(l.tx)) { return $588(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $164(l, e, s = []) {

        e.p = -1;


        if (_27.includes(l.tx)) {

            e.sp -= 1;

            return (e.p = 79, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }
    function $165(l, e, s = []) {

        e.p = -1;


        if (_34.includes(l.tx)) { return $589(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $167(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 1;

            var sym = s.slice(-1);

            s.splice(-1, 1, { type: "EmptyStatement", pos });

            return (e.p = 30, s);
        }

        return s;
    }
    function $169(l, e, s = []) { e.p = -1; s = $_103(l, e, s); return s; }
    function $170(l, e, s = []) { e.p = -1; s = $_103(l, e, s); return s; }
    function $182(l, e, s = []) { e.p = -1; s = $_114(l, e, s); return s; }
    function $183(l, e, s = []) { e.p = -1; s = $_114(l, e, s); return s; }
    function $184(l, e, s = []) { e.p = -1; s = $_114(l, e, s); return s; }
    function $185(l, e, s = []) {

        e.p = -1;


        if (l.END || _5.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 1;

            return (e.p = 26, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }
    function $186(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_100(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $211(l, e, s); break;

                case 179: s = $222(l, e, s); break;

                case 134: s = $213(l, e, s); break;

                case 133: s = $212(l, e, s); break;

                case 132: s = $223(l, e, s); break;

                case 65: s = $226(l, e, s); break;

                case 64:

                    s = $609(l, e, s);

                    if (e.p < 0) s = $225(l, e, s);

                    break;


                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![61].includes(a)) fail(l, e);

        return s;
    }
    function $187(l, e, s = []) {

        e.p = -1;


        if (_36.includes(l.tx) || _37.includes(l.ty)) {

            e.sp -= 1;

            var sym = s.slice(-1);

            s.splice(-1, 1, "let");

            return (e.p = 62, s);
        }

        return s;
    }
    function $188(l, e, s = []) {

        e.p = -1;


        if (_36.includes(l.tx) || _37.includes(l.ty)) {

            e.sp -= 1;

            var sym = s.slice(-1);

            s.splice(-1, 1, "const");

            return (e.p = 62, s);
        }

        return s;
    }
    function $module_body(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_118(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180:

                    s = $120(l, e, s);

                    if (e.p < 0) s = $121(l, e, s);

                    break;


                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 177: s = $165(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $44(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 82: s = $182(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                case 66: s = $185(l, e, s); break;

                case 62: s = $186(l, e, s); break;

                case 61: s = $184(l, e, s); break;

                case 57: s = $30(l, e, s); break;

                case 56: s = $40(l, e, s); break;

                case 52: s = $39(l, e, s); break;

                case 50: s = $29(l, e, s); break;

                case 44: s = $170(l, e, s); break;

                case 43: s = $37(l, e, s); break;

                case 42: s = $38(l, e, s); break;

                case 41: s = $36(l, e, s); break;

                case 40: s = $35(l, e, s); break;

                case 39: s = $34(l, e, s); break;

                case 36: s = $169(l, e, s); break;

                case 33: s = $32(l, e, s); break;

                case 31: s = $28(l, e, s); break;

                case 30: s = $31(l, e, s); break;

                case 29: s = $41(l, e, s); break;

                case 28: s = $27(l, e, s); break;

                case 27: s = $33(l, e, s); break;

                case 26: s = $183(l, e, s); break;

                case 25: s = $26(l, e, s); break;

                case 24: s = $25(l, e, s); break;

                case 23: s = $194(l, e, s); break;

                case 16: s = $193(l, e, s); break;

                case 6: s = $192(l, e, s); break;

                case 5: s = $191(l, e, s); break;

                case 4: s = $190(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![4].includes(a)) fail(l, e);

        return s;
    }
    function $190(l, e, s = []) { s.push($module_item(l, e, s)); e.sp++; return s; }
    function $191(l, e, s = []) {

        e.p = -1;


        if (l.END || _38.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 1;

            var sym = s.slice(-1);

            s.splice(-1, 1, [sym[0]]);

            return (e.p = 4, s);
        }

        return s;
    }
    function $192(l, e, s = []) { e.p = -1; s = $_120(l, e, s); return s; }
    function $193(l, e, s = []) { e.p = -1; s = $_120(l, e, s); return s; }
    function $194(l, e, s = []) { e.p = -1; s = $_120(l, e, s); return s; }
    function $case_clauses_HC_listbody5_106(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_122(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 48: s = $198(l, e, s); break;

                case 46: s = $197(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![46].includes(a)) fail(l, e);

        return s;
    }
    function $197(l, e, s = []) { s.push($case_clause(l, e, s)); e.sp++; return s; }
    function $198(l, e, s = []) {

        e.p = -1;


        if (_39.includes(l.tx)) {

            e.sp -= 1;

            var sym = s.slice(-1);

            s.splice(-1, 1, [sym[0]]);

            return (e.p = 46, s);
        }

        return s;
    }
    function $case_clauses(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_122(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 48: s = $202(l, e, s); break;

                case 47: s = $201(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![47].includes(a)) fail(l, e);

        return s;
    }
    function $201(l, e, s = []) { s.push($case_clause(l, e, s)); e.sp++; return s; }
    function $202(l, e, s = []) {

        e.p = -1;


        if (_40.includes(l.tx)) {

            e.sp -= 1;

            var sym = s.slice(-1);

            s.splice(-1, 1, [sym[0]]);

            return (e.p = 47, s);
        }

        return s;
    }
    function $module_body_HC_listbody1_100(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_118(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180:

                    s = $120(l, e, s);

                    if (e.p < 0) s = $121(l, e, s);

                    break;


                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 177: s = $165(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $44(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 82: s = $182(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                case 66: s = $185(l, e, s); break;

                case 62: s = $186(l, e, s); break;

                case 61: s = $184(l, e, s); break;

                case 57: s = $30(l, e, s); break;

                case 56: s = $40(l, e, s); break;

                case 52: s = $39(l, e, s); break;

                case 50: s = $29(l, e, s); break;

                case 44: s = $170(l, e, s); break;

                case 43: s = $37(l, e, s); break;

                case 42: s = $38(l, e, s); break;

                case 41: s = $36(l, e, s); break;

                case 40: s = $35(l, e, s); break;

                case 39: s = $34(l, e, s); break;

                case 36: s = $169(l, e, s); break;

                case 33: s = $32(l, e, s); break;

                case 31: s = $28(l, e, s); break;

                case 30: s = $31(l, e, s); break;

                case 29: s = $41(l, e, s); break;

                case 28: s = $27(l, e, s); break;

                case 27: s = $33(l, e, s); break;

                case 26: s = $183(l, e, s); break;

                case 25: s = $26(l, e, s); break;

                case 24: s = $25(l, e, s); break;

                case 23: s = $194(l, e, s); break;

                case 16: s = $193(l, e, s); break;

                case 6: s = $192(l, e, s); break;

                case 5: s = $205(l, e, s); break;

                case 3: s = $204(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![3].includes(a)) fail(l, e);

        return s;
    }
    function $204(l, e, s = []) { s.push($module_item(l, e, s)); e.sp++; return s; }
    function $205(l, e, s = []) {

        e.p = -1;


        if (_38.includes(l.tx) || _41.includes(l.ty)) {

            e.sp -= 1;

            var sym = s.slice(-1);

            s.splice(-1, 1, [sym[0]]);

            return (e.p = 3, s);
        }

        return s;
    }
    function $variable_declaration_list_HC_listbody3_107(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_100(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $211(l, e, s); break;

                case 179: s = $209(l, e, s); break;

                case 134: s = $213(l, e, s); break;

                case 133: s = $212(l, e, s); break;

                case 132: s = $210(l, e, s); break;

                case 60: s = $208(l, e, s); break;

                case 58: s = $207(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![58].includes(a)) fail(l, e);

        return s;
    }
    function $207(l, e, s = []) {

        e.p = -1;


        if (_1.includes(l.tx)) { return $630(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $208(l, e, s = []) {

        e.p = -1;


        if (_1.includes(l.tx)) {

            e.sp -= 1;

            var sym = s.slice(-1);

            s.splice(-1, 1, [sym[0]]);

            return (e.p = 58, s);
        }

        return s;
    }
    function $209(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "=": s.push($initializer(l, e)); break;

            case ",":

            case ";":

                e.sp -= 1;

                return (e.p = 60, (s.splice(-1, 1, s[s.length - 1]), s));

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 152: s = $631(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![60].includes(a)) fail(l, e);

        return s;
    }
    function $210(l, e, s = []) { s.push($initializer(l, e, s)); e.sp++; return s; }
    function $211(l, e, s = []) {

        e.p = -1;


        if (["(", ")", ",", ";", "=", "]", "extends", "in", "of", "{", "}"].includes(l.tx)) {

            e.sp -= 1;

            var sym = s.slice(-1);

            s.splice(-1, 1, sym[0].type = "IdentifierBinding", sym[0]);

            return (e.p = 179, s);
        }

        return s;
    }
    function $212(l, e, s = []) { e.p = -1; s = $_130(l, e, s); return s; }
    function $213(l, e, s = []) { e.p = -1; s = $_130(l, e, s); return s; }
    function $variable_declaration_list(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_100(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $211(l, e, s); break;

                case 179: s = $209(l, e, s); break;

                case 134: s = $213(l, e, s); break;

                case 133: s = $212(l, e, s); break;

                case 132: s = $210(l, e, s); break;

                case 60: s = $218(l, e, s); break;

                case 59: s = $217(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![59].includes(a)) fail(l, e);

        return s;
    }
    function $217(l, e, s = []) {

        e.p = -1;


        if (_1.includes(l.tx)) { return $643(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $218(l, e, s = []) {

        e.p = -1;


        if (_43.includes(l.tx)) {

            e.sp -= 1;

            var sym = s.slice(-1);

            s.splice(-1, 1, [sym[0]]);

            return (e.p = 59, s);
        }

        return s;
    }
    function $binding_list_HC_listbody1_108(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_100(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $211(l, e, s); break;

                case 179: s = $222(l, e, s); break;

                case 134: s = $213(l, e, s); break;

                case 133: s = $212(l, e, s); break;

                case 132: s = $223(l, e, s); break;

                case 65: s = $221(l, e, s); break;

                case 63: s = $220(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![63].includes(a)) fail(l, e);

        return s;
    }
    function $220(l, e, s = []) {

        e.p = -1;


        if (_1.includes(l.tx)) { return $644(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $221(l, e, s = []) {

        e.p = -1;


        if (_1.includes(l.tx)) {

            e.sp -= 1;

            var sym = s.slice(-1);

            s.splice(-1, 1, [sym[0]]);

            return (e.p = 63, s);
        }

        return s;
    }
    function $222(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "=": s.push($initializer(l, e)); break;

            case ",":

            case ";":

                e.sp -= 1;

                return (e.p = 65, (s.splice(-1, 1, s[s.length - 1]), s));

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 152: s = $645(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![65].includes(a)) fail(l, e);

        return s;
    }
    function $223(l, e, s = []) { s.push($initializer(l, e, s)); e.sp++; return s; }
    function $binding_list(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_100(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $211(l, e, s); break;

                case 179: s = $222(l, e, s); break;

                case 134: s = $213(l, e, s); break;

                case 133: s = $212(l, e, s); break;

                case 132: s = $223(l, e, s); break;

                case 65: s = $226(l, e, s); break;

                case 64: s = $225(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![64].includes(a)) fail(l, e);

        return s;
    }
    function $225(l, e, s = []) {

        e.p = -1;


        if (_1.includes(l.tx)) { return $647(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $226(l, e, s = []) {

        e.p = -1;


        if (_43.includes(l.tx)) {

            e.sp -= 1;

            var sym = s.slice(-1);

            s.splice(-1, 1, [sym[0]]);

            return (e.p = 64, s);
        }

        return s;
    }
    function $statement_list(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_15(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180:

                    s = $120(l, e, s);

                    if (e.p < 0) s = $121(l, e, s);

                    break;


                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 177: s = $165(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $44(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 82: s = $182(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                case 66: s = $185(l, e, s); break;

                case 62: s = $186(l, e, s); break;

                case 61: s = $184(l, e, s); break;

                case 57: s = $30(l, e, s); break;

                case 56: s = $40(l, e, s); break;

                case 52: s = $39(l, e, s); break;

                case 50: s = $29(l, e, s); break;

                case 44: s = $170(l, e, s); break;

                case 43: s = $37(l, e, s); break;

                case 42: s = $38(l, e, s); break;

                case 41: s = $36(l, e, s); break;

                case 40: s = $35(l, e, s); break;

                case 39: s = $34(l, e, s); break;

                case 36: s = $169(l, e, s); break;

                case 33: s = $32(l, e, s); break;

                case 31: s = $28(l, e, s); break;

                case 30: s = $31(l, e, s); break;

                case 29: s = $41(l, e, s); break;

                case 28: s = $27(l, e, s); break;

                case 27: s = $33(l, e, s); break;

                case 26: s = $183(l, e, s); break;

                case 25: s = $26(l, e, s); break;

                case 24: s = $25(l, e, s); break;

                case 23: s = $228(l, e, s); break;

                case 22: s = $229(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![22].includes(a)) fail(l, e);

        return s;
    }
    function $228(l, e, s = []) {

        e.p = -1;


        if (_44.includes(l.tx) || _41.includes(l.ty)) {

            e.sp -= 1;

            var sym = s.slice(-1);

            s.splice(-1, 1, [sym[0]]);

            return (e.p = 22, s);
        }

        return s;
    }
    function $229(l, e, s = []) {

        s.push($statement_list_item(l, e, s));

        e.sp++;

        return s;
    }
    function $formal_parameter_list_HC_listbody3_109(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_100(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $211(l, e, s); break;

                case 179: s = $236(l, e, s); break;

                case 141: s = $234(l, e, s); break;

                case 140: s = $233(l, e, s); break;

                case 134: s = $213(l, e, s); break;

                case 133: s = $212(l, e, s); break;

                case 132: s = $235(l, e, s); break;

                case 73: s = $232(l, e, s); break;

                case 70: s = $231(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![70].includes(a)) fail(l, e);

        return s;
    }
    function $231(l, e, s = []) {

        e.p = -1;


        if (_1.includes(l.tx)) { return $650(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $232(l, e, s = []) {

        e.p = -1;


        if (_1.includes(l.tx)) {

            e.sp -= 1;

            var sym = s.slice(-1);

            s.splice(-1, 1, [sym[0]]);

            return (e.p = 70, s);
        }

        return s;
    }
    function $233(l, e, s = []) {

        e.p = -1;


        if (_45.includes(l.tx)) {

            e.sp -= 1;

            return (e.p = 73, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }
    function $234(l, e, s = []) {

        e.p = -1;


        if (_46.includes(l.tx)) {

            e.sp -= 1;

            return (e.p = 140, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }
    function $235(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "=": s.push($initializer(l, e)); break;

            case ")":

            case ",":

            case "]":

            case "}":

                e.sp -= 1;

                var sym = s.slice(-1);

                s.splice(
                    -1,
                    1,
                    null ? { type: "BindingExpression", nodes: [sym[0]], pos } : sym[0]
                );

                return (e.p = 140, s);

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 152: s = $651(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![140].includes(a)) fail(l, e);

        return s;
    }
    function $236(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "=": s.push($initializer(l, e)); break;

            case ")":

            case ",":

            case "]":

            case "}":

                e.sp -= 1;

                var sym = s.slice(-1);

                s.splice(
                    -1,
                    1,
                    null ? { type: "BindingExpression", nodes: [sym[0]], pos } : sym[0]
                );

                return (e.p = 141, s);

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 152: s = $652(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![141].includes(a)) fail(l, e);

        return s;
    }
    function $formal_parameter_list(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_100(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $211(l, e, s); break;

                case 179: s = $236(l, e, s); break;

                case 141: s = $234(l, e, s); break;

                case 140: s = $233(l, e, s); break;

                case 134: s = $213(l, e, s); break;

                case 133: s = $212(l, e, s); break;

                case 132: s = $235(l, e, s); break;

                case 73: s = $239(l, e, s); break;

                case 71: s = $238(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![71].includes(a)) fail(l, e);

        return s;
    }
    function $238(l, e, s = []) {

        e.p = -1;


        if (_1.includes(l.tx)) { return $653(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $239(l, e, s = []) {

        e.p = -1;


        if (_45.includes(l.tx)) {

            e.sp -= 1;

            var sym = s.slice(-1);

            s.splice(-1, 1, [sym[0]]);

            return (e.p = 71, s);
        }

        return s;
    }
    function $module_item(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_118(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180:

                    s = $120(l, e, s);

                    if (e.p < 0) s = $121(l, e, s);

                    break;


                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 177: s = $165(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $44(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 82: s = $182(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                case 66: s = $185(l, e, s); break;

                case 62: s = $186(l, e, s); break;

                case 61: s = $184(l, e, s); break;

                case 57: s = $30(l, e, s); break;

                case 56: s = $40(l, e, s); break;

                case 52: s = $39(l, e, s); break;

                case 50: s = $29(l, e, s); break;

                case 44: s = $170(l, e, s); break;

                case 43: s = $37(l, e, s); break;

                case 42: s = $38(l, e, s); break;

                case 41: s = $36(l, e, s); break;

                case 40: s = $35(l, e, s); break;

                case 39: s = $34(l, e, s); break;

                case 36: s = $169(l, e, s); break;

                case 33: s = $32(l, e, s); break;

                case 31: s = $28(l, e, s); break;

                case 30: s = $31(l, e, s); break;

                case 29: s = $41(l, e, s); break;

                case 28: s = $27(l, e, s); break;

                case 27: s = $33(l, e, s); break;

                case 26: s = $183(l, e, s); break;

                case 25: s = $26(l, e, s); break;

                case 24: s = $25(l, e, s); break;

                case 23: s = $194(l, e, s); break;

                case 16: s = $193(l, e, s); break;

                case 6: s = $192(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![5].includes(a)) fail(l, e);

        return s;
    }
    function $arrow_function(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "(":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($parenthesized(cp, e));

                if (e.p !== 131) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push(
                    $cover_parenthesized_expression_and_arrow_parameter_list(l, e)
                );

                break;


            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($arrow_function(l, e));

                break;


            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;
                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $120(l, e, s); break;

                case 178: s = $110(l, e, s); break;

                case 131: s = $119(l, e, s); break;

                case 130: s = $164(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![78].includes(a)) fail(l, e);

        return s;
    }
    function $iteration_statement(l, e, s = []) {

        e.p = -1;


        switch (l.tx) {

            case "do": s.push($iteration_statement(l, e)); break;

            case "for": s.push($iteration_statement(l, e)); break;

            case "while": s.push($iteration_statement(l, e)); break;
        }

        return s;
    }
    function $method_definition(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "*": s.push($method_definition(l, e)); break;

            case "-": s.push($numeric_literal(l, e)); break;

            case "[": s.push($computed_property_name(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($method_definition(l, e));

                break;


            case "await": s = $262(l, e, _s(s, l, e, e.eh, _0)); break;

            case "break": s = $263(l, e, _s(s, l, e, e.eh, _0)); break;

            case "case": s = $264(l, e, _s(s, l, e, e.eh, _0)); break;

            case "catch": s = $265(l, e, _s(s, l, e, e.eh, _0)); break;

            case "class": s = $266(l, e, _s(s, l, e, e.eh, _0)); break;

            case "const": s = $267(l, e, _s(s, l, e, e.eh, _0)); break;

            case "continue": s = $268(l, e, _s(s, l, e, e.eh, _0)); break;

            case "debugger": s = $269(l, e, _s(s, l, e, e.eh, _0)); break;

            case "default": s = $270(l, e, _s(s, l, e, e.eh, _0)); break;

            case "delete": s = $271(l, e, _s(s, l, e, e.eh, _0)); break;

            case "do": s = $272(l, e, _s(s, l, e, e.eh, _0)); break;

            case "else": s = $273(l, e, _s(s, l, e, e.eh, _0)); break;

            case "export": s = $274(l, e, _s(s, l, e, e.eh, _0)); break;

            case "extends": s = $275(l, e, _s(s, l, e, e.eh, _0)); break;

            case "false": s = $261(l, e, _s(s, l, e, e.eh, _0)); break;

            case "finally": s = $276(l, e, _s(s, l, e, e.eh, _0)); break;

            case "for": s = $277(l, e, _s(s, l, e, e.eh, _0)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function": s = $278(l, e, _s(s, l, e, e.eh, _0)); break;

            case "get":

                var cp = l.copy(), _sym = null;

                _sym = $12(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($method_definition(l, e));

                break;


            case "if": s = $279(l, e, _s(s, l, e, e.eh, _0)); break;

            case "implements": s = $296(l, e, _s(s, l, e, e.eh, _0)); break;

            case "import": s = $280(l, e, _s(s, l, e, e.eh, _0)); break;

            case "in": s = $281(l, e, _s(s, l, e, e.eh, _0)); break;

            case "instanceof": s = $282(l, e, _s(s, l, e, e.eh, _0)); break;

            case "interface": s = $299(l, e, _s(s, l, e, e.eh, _0)); break;

            case "new": s = $283(l, e, _s(s, l, e, e.eh, _0)); break;

            case "null": s = $259(l, e, _s(s, l, e, e.eh, _0)); break;

            case "package": s = $297(l, e, _s(s, l, e, e.eh, _0)); break;

            case "private": s = $300(l, e, _s(s, l, e, e.eh, _0)); break;

            case "protected": s = $298(l, e, _s(s, l, e, e.eh, _0)); break;

            case "public": s = $301(l, e, _s(s, l, e, e.eh, _0)); break;

            case "return": s = $284(l, e, _s(s, l, e, e.eh, _0)); break;

            case "set":

                var cp = l.copy(), _sym = null;

                _sym = $13(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($method_definition(l, e));

                break;


            case "super": s = $285(l, e, _s(s, l, e, e.eh, _0)); break;

            case "switch": s = $286(l, e, _s(s, l, e, e.eh, _0)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $287(l, e, _s(s, l, e, e.eh, _0)); break;

            case "throw": s = $288(l, e, _s(s, l, e, e.eh, _0)); break;

            case "true": s = $260(l, e, _s(s, l, e, e.eh, _0)); break;

            case "try": s = $289(l, e, _s(s, l, e, e.eh, _0)); break;

            case "typeof": s = $290(l, e, _s(s, l, e, e.eh, _0)); break;

            case "var": s = $291(l, e, _s(s, l, e, e.eh, _0)); break;

            case "void": s = $292(l, e, _s(s, l, e, e.eh, _0)); break;

            case "while": s = $293(l, e, _s(s, l, e, e.eh, _0)); break;

            case "with": s = $294(l, e, _s(s, l, e, e.eh, _0)); break;

            case "yield": s = $295(l, e, _s(s, l, e, e.eh, _0)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1: s = $135(l, e, _s(s, l, e, e.eh, _0)); break;
                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 186: s = $257(l, e, s); break;

                case 185: s = $254(l, e, s); break;

                case 184: s = $258(l, e, s); break;

                case 183: s = $255(l, e, s); break;

                case 182: s = $256(l, e, s); break;

                case 181: s = $251(l, e, s); break;

                case 173: s = $253(l, e, s); break;

                case 169: s = $252(l, e, s); break;

                case 150: s = $250(l, e, s); break;

                case 149: s = $249(l, e, s); break;

                case 148: s = $248(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![87].includes(a)) fail(l, e);

        return s;
    }
    function $248(l, e, s = []) {

        e.p = -1;


        if (_33.includes(l.tx)) { return $658(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $249(l, e, s = []) { e.p = -1; s = $_155(l, e, s); return s; }
    function $250(l, e, s = []) { e.p = -1; s = $_155(l, e, s); return s; }
    function $251(l, e, s = []) { e.p = -1; s = $_156(l, e, s); return s; }
    function $252(l, e, s = []) { e.p = -1; s = $_156(l, e, s); return s; }
    function $253(l, e, s = []) { e.p = -1; s = $_156(l, e, s); return s; }
    function $254(l, e, s = []) { e.p = -1; s = $_157(l, e, s); return s; }
    function $255(l, e, s = []) { e.p = -1; s = $_157(l, e, s); return s; }
    function $256(l, e, s = []) { e.p = -1; s = $_157(l, e, s); return s; }
    function $257(l, e, s = []) { e.p = -1; s = $_158(l, e, s); return s; }
    function $258(l, e, s = []) { e.p = -1; s = $_158(l, e, s); return s; }
    function $259(l, e, s = []) { e.p = -1; s = $_158(l, e, s); return s; }
    function $260(l, e, s = []) { e.p = -1; s = $_158(l, e, s); return s; }
    function $261(l, e, s = []) { e.p = -1; s = $_158(l, e, s); return s; }
    function $262(l, e, s = []) { e.p = -1; s = $_159(l, e, s); return s; }
    function $263(l, e, s = []) { e.p = -1; s = $_159(l, e, s); return s; }
    function $264(l, e, s = []) { e.p = -1; s = $_159(l, e, s); return s; }
    function $265(l, e, s = []) { e.p = -1; s = $_159(l, e, s); return s; }
    function $266(l, e, s = []) { e.p = -1; s = $_159(l, e, s); return s; }
    function $267(l, e, s = []) { e.p = -1; s = $_159(l, e, s); return s; }
    function $268(l, e, s = []) { e.p = -1; s = $_159(l, e, s); return s; }
    function $269(l, e, s = []) { e.p = -1; s = $_159(l, e, s); return s; }
    function $270(l, e, s = []) { e.p = -1; s = $_159(l, e, s); return s; }
    function $271(l, e, s = []) { e.p = -1; s = $_159(l, e, s); return s; }
    function $272(l, e, s = []) { e.p = -1; s = $_159(l, e, s); return s; }
    function $273(l, e, s = []) { e.p = -1; s = $_159(l, e, s); return s; }
    function $274(l, e, s = []) { e.p = -1; s = $_159(l, e, s); return s; }
    function $275(l, e, s = []) { e.p = -1; s = $_159(l, e, s); return s; }
    function $276(l, e, s = []) { e.p = -1; s = $_159(l, e, s); return s; }
    function $277(l, e, s = []) { e.p = -1; s = $_159(l, e, s); return s; }
    function $278(l, e, s = []) { e.p = -1; s = $_159(l, e, s); return s; }
    function $279(l, e, s = []) { e.p = -1; s = $_159(l, e, s); return s; }
    function $280(l, e, s = []) { e.p = -1; s = $_159(l, e, s); return s; }
    function $281(l, e, s = []) { e.p = -1; s = $_159(l, e, s); return s; }
    function $282(l, e, s = []) { e.p = -1; s = $_159(l, e, s); return s; }
    function $283(l, e, s = []) { e.p = -1; s = $_159(l, e, s); return s; }
    function $284(l, e, s = []) { e.p = -1; s = $_159(l, e, s); return s; }
    function $285(l, e, s = []) { e.p = -1; s = $_159(l, e, s); return s; }
    function $286(l, e, s = []) { e.p = -1; s = $_159(l, e, s); return s; }
    function $287(l, e, s = []) { e.p = -1; s = $_159(l, e, s); return s; }
    function $288(l, e, s = []) { e.p = -1; s = $_159(l, e, s); return s; }
    function $289(l, e, s = []) { e.p = -1; s = $_159(l, e, s); return s; }
    function $290(l, e, s = []) { e.p = -1; s = $_159(l, e, s); return s; }
    function $291(l, e, s = []) { e.p = -1; s = $_159(l, e, s); return s; }
    function $292(l, e, s = []) { e.p = -1; s = $_159(l, e, s); return s; }
    function $293(l, e, s = []) { e.p = -1; s = $_159(l, e, s); return s; }
    function $294(l, e, s = []) { e.p = -1; s = $_159(l, e, s); return s; }
    function $295(l, e, s = []) { e.p = -1; s = $_159(l, e, s); return s; }
    function $296(l, e, s = []) { e.p = -1; s = $_160(l, e, s); return s; }
    function $297(l, e, s = []) { e.p = -1; s = $_160(l, e, s); return s; }
    function $298(l, e, s = []) { e.p = -1; s = $_160(l, e, s); return s; }
    function $299(l, e, s = []) { e.p = -1; s = $_160(l, e, s); return s; }
    function $300(l, e, s = []) { e.p = -1; s = $_160(l, e, s); return s; }
    function $301(l, e, s = []) { e.p = -1; s = $_160(l, e, s); return s; }
    function $new_expression(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(": s.push($parenthesized(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_expression(l, e));

                break;


            case "class": s.push($class_expression(l, e)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function": s.push($function_expression(l, e)); break;

            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "import": s.push($import_meta(l, e)); break;

            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($new_expression(cp, e));

                if (e.p !== 91) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($new_target(l, e));

                break;


            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super": s.push($super_property(l, e)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "{": s.push($object_literal(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $120(l, e, s); break;

                case 178: s = $109(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131: s = $118(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![91].includes(a)) fail(l, e);

        return s;
    }
    function $class_body(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "*": s.push($method_definition(l, e)); break;

            case "-": s.push($numeric_literal(l, e)); break;

            case ";": s = $307(l, e, _s(s, l, e, e.eh, _0)); break;

            case "[": s.push($computed_property_name(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($method_definition(l, e));

                break;


            case "await": s = $262(l, e, _s(s, l, e, e.eh, _0)); break;

            case "break": s = $263(l, e, _s(s, l, e, e.eh, _0)); break;

            case "case": s = $264(l, e, _s(s, l, e, e.eh, _0)); break;

            case "catch": s = $265(l, e, _s(s, l, e, e.eh, _0)); break;

            case "class": s = $266(l, e, _s(s, l, e, e.eh, _0)); break;

            case "const": s = $267(l, e, _s(s, l, e, e.eh, _0)); break;

            case "continue": s = $268(l, e, _s(s, l, e, e.eh, _0)); break;

            case "debugger": s = $269(l, e, _s(s, l, e, e.eh, _0)); break;

            case "default": s = $270(l, e, _s(s, l, e, e.eh, _0)); break;

            case "delete": s = $271(l, e, _s(s, l, e, e.eh, _0)); break;

            case "do": s = $272(l, e, _s(s, l, e, e.eh, _0)); break;

            case "else": s = $273(l, e, _s(s, l, e, e.eh, _0)); break;

            case "export": s = $274(l, e, _s(s, l, e, e.eh, _0)); break;

            case "extends": s = $275(l, e, _s(s, l, e, e.eh, _0)); break;

            case "false": s = $261(l, e, _s(s, l, e, e.eh, _0)); break;

            case "finally": s = $276(l, e, _s(s, l, e, e.eh, _0)); break;

            case "for": s = $277(l, e, _s(s, l, e, e.eh, _0)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function": s = $278(l, e, _s(s, l, e, e.eh, _0)); break;

            case "get":

                var cp = l.copy(), _sym = null;

                _sym = $12(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($method_definition(l, e));

                break;


            case "if": s = $279(l, e, _s(s, l, e, e.eh, _0)); break;

            case "implements": s = $296(l, e, _s(s, l, e, e.eh, _0)); break;

            case "import": s = $280(l, e, _s(s, l, e, e.eh, _0)); break;

            case "in": s = $281(l, e, _s(s, l, e, e.eh, _0)); break;

            case "instanceof": s = $282(l, e, _s(s, l, e, e.eh, _0)); break;

            case "interface": s = $299(l, e, _s(s, l, e, e.eh, _0)); break;

            case "new": s = $283(l, e, _s(s, l, e, e.eh, _0)); break;

            case "null": s = $259(l, e, _s(s, l, e, e.eh, _0)); break;

            case "package": s = $297(l, e, _s(s, l, e, e.eh, _0)); break;

            case "private": s = $300(l, e, _s(s, l, e, e.eh, _0)); break;

            case "protected": s = $298(l, e, _s(s, l, e, e.eh, _0)); break;

            case "public": s = $301(l, e, _s(s, l, e, e.eh, _0)); break;

            case "return": s = $284(l, e, _s(s, l, e, e.eh, _0)); break;

            case "set":

                var cp = l.copy(), _sym = null;

                _sym = $13(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($method_definition(l, e));

                break;


            case "static": s.push($class_element(l, e)); break;

            case "super": s = $285(l, e, _s(s, l, e, e.eh, _0)); break;

            case "switch": s = $286(l, e, _s(s, l, e, e.eh, _0)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $287(l, e, _s(s, l, e, e.eh, _0)); break;

            case "throw": s = $288(l, e, _s(s, l, e, e.eh, _0)); break;

            case "true": s = $260(l, e, _s(s, l, e, e.eh, _0)); break;

            case "try": s = $289(l, e, _s(s, l, e, e.eh, _0)); break;

            case "typeof": s = $290(l, e, _s(s, l, e, e.eh, _0)); break;

            case "var": s = $291(l, e, _s(s, l, e, e.eh, _0)); break;

            case "void": s = $292(l, e, _s(s, l, e, e.eh, _0)); break;

            case "while": s = $293(l, e, _s(s, l, e, e.eh, _0)); break;

            case "with": s = $294(l, e, _s(s, l, e, e.eh, _0)); break;

            case "yield": s = $295(l, e, _s(s, l, e, e.eh, _0)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1: s = $135(l, e, _s(s, l, e, e.eh, _0)); break;
                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 186: s = $257(l, e, s); break;

                case 185: s = $254(l, e, s); break;

                case 184: s = $258(l, e, s); break;

                case 183: s = $255(l, e, s); break;

                case 182: s = $256(l, e, s); break;

                case 181: s = $251(l, e, s); break;

                case 173: s = $253(l, e, s); break;

                case 169: s = $252(l, e, s); break;

                case 150: s = $250(l, e, s); break;

                case 149: s = $249(l, e, s); break;

                case 148: s = $248(l, e, s); break;

                case 87: s = $308(l, e, s); break;

                case 86: s = $305(l, e, s); break;

                case 85: s = $306(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![85].includes(a)) fail(l, e);

        return s;
    }
    function $305(l, e, s = []) {

        e.p = -1;


        if (_48.includes(l.tx) || _41.includes(l.ty)) {

            e.sp -= 1;

            var sym = s.slice(-1);

            s.splice(-1, 1, [sym[0]]);

            return (e.p = 85, s);
        }

        return s;
    }
    function $306(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "*": s.push($method_definition(l, e)); break;

            case "-": s.push($numeric_literal(l, e)); break;

            case ";": s = $663(l, e, _s(s, l, e, e.eh, _0)); break;

            case "[": s.push($computed_property_name(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($method_definition(l, e));

                break;


            case "await": s = $262(l, e, _s(s, l, e, e.eh, _0)); break;

            case "break": s = $263(l, e, _s(s, l, e, e.eh, _0)); break;

            case "case": s = $264(l, e, _s(s, l, e, e.eh, _0)); break;

            case "catch": s = $265(l, e, _s(s, l, e, e.eh, _0)); break;

            case "class": s = $266(l, e, _s(s, l, e, e.eh, _0)); break;

            case "const": s = $267(l, e, _s(s, l, e, e.eh, _0)); break;

            case "continue": s = $268(l, e, _s(s, l, e, e.eh, _0)); break;

            case "debugger": s = $269(l, e, _s(s, l, e, e.eh, _0)); break;

            case "default": s = $270(l, e, _s(s, l, e, e.eh, _0)); break;

            case "delete": s = $271(l, e, _s(s, l, e, e.eh, _0)); break;

            case "do": s = $272(l, e, _s(s, l, e, e.eh, _0)); break;

            case "else": s = $273(l, e, _s(s, l, e, e.eh, _0)); break;

            case "export": s = $274(l, e, _s(s, l, e, e.eh, _0)); break;

            case "extends": s = $275(l, e, _s(s, l, e, e.eh, _0)); break;

            case "false": s = $261(l, e, _s(s, l, e, e.eh, _0)); break;

            case "finally": s = $276(l, e, _s(s, l, e, e.eh, _0)); break;

            case "for": s = $277(l, e, _s(s, l, e, e.eh, _0)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function": s = $278(l, e, _s(s, l, e, e.eh, _0)); break;

            case "get":

                var cp = l.copy(), _sym = null;

                _sym = $12(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($method_definition(l, e));

                break;


            case "if": s = $279(l, e, _s(s, l, e, e.eh, _0)); break;

            case "implements": s = $296(l, e, _s(s, l, e, e.eh, _0)); break;

            case "import": s = $280(l, e, _s(s, l, e, e.eh, _0)); break;

            case "in": s = $281(l, e, _s(s, l, e, e.eh, _0)); break;

            case "instanceof": s = $282(l, e, _s(s, l, e, e.eh, _0)); break;

            case "interface": s = $299(l, e, _s(s, l, e, e.eh, _0)); break;

            case "new": s = $283(l, e, _s(s, l, e, e.eh, _0)); break;

            case "null": s = $259(l, e, _s(s, l, e, e.eh, _0)); break;

            case "package": s = $297(l, e, _s(s, l, e, e.eh, _0)); break;

            case "private": s = $300(l, e, _s(s, l, e, e.eh, _0)); break;

            case "protected": s = $298(l, e, _s(s, l, e, e.eh, _0)); break;

            case "public": s = $301(l, e, _s(s, l, e, e.eh, _0)); break;

            case "return": s = $284(l, e, _s(s, l, e, e.eh, _0)); break;

            case "set":

                var cp = l.copy(), _sym = null;

                _sym = $13(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($method_definition(l, e));

                break;


            case "static": s.push($class_element(l, e)); break;

            case "super": s = $285(l, e, _s(s, l, e, e.eh, _0)); break;

            case "switch": s = $286(l, e, _s(s, l, e, e.eh, _0)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $287(l, e, _s(s, l, e, e.eh, _0)); break;

            case "throw": s = $288(l, e, _s(s, l, e, e.eh, _0)); break;

            case "true": s = $260(l, e, _s(s, l, e, e.eh, _0)); break;

            case "try": s = $289(l, e, _s(s, l, e, e.eh, _0)); break;

            case "typeof": s = $290(l, e, _s(s, l, e, e.eh, _0)); break;

            case "var": s = $291(l, e, _s(s, l, e, e.eh, _0)); break;

            case "void": s = $292(l, e, _s(s, l, e, e.eh, _0)); break;

            case "while": s = $293(l, e, _s(s, l, e, e.eh, _0)); break;

            case "with": s = $294(l, e, _s(s, l, e, e.eh, _0)); break;

            case "yield": s = $295(l, e, _s(s, l, e, e.eh, _0)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1: s = $135(l, e, _s(s, l, e, e.eh, _0)); break;
                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 186: s = $257(l, e, s); break;

                case 185: s = $254(l, e, s); break;

                case 184: s = $258(l, e, s); break;

                case 183: s = $255(l, e, s); break;

                case 182: s = $256(l, e, s); break;

                case 181: s = $251(l, e, s); break;

                case 173: s = $253(l, e, s); break;

                case 169: s = $252(l, e, s); break;

                case 150: s = $250(l, e, s); break;

                case 149: s = $249(l, e, s); break;

                case 148: s = $248(l, e, s); break;

                case 87: s = $308(l, e, s); break;

                case 86: s = $662(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![85].includes(a)) fail(l, e);

        return s;
    }
    function $307(l, e, s = []) {

        e.p = -1;


        if (_48.includes(l.tx) || _41.includes(l.ty)) {

            e.sp -= 1;

            var sym = s.slice(-1);

            s.splice(-1, 1, []);

            return (e.p = 85, s);
        }

        return s;
    }
    function $308(l, e, s = []) {

        e.p = -1;


        if (_48.includes(l.tx) || _41.includes(l.ty)) {

            e.sp -= 1;

            return (e.p = 86, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }
    function $left_hand_side_expression(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(": s.push($parenthesized(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_expression(l, e));

                break;


            case "class": s.push($class_expression(l, e)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function": s.push($function_expression(l, e)); break;

            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "import":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($import_meta(cp, e));

                if (e.p !== 95) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($import_call(l, e));

                break;


            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($new_expression(cp, e));

                if (e.p !== 91) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($new_target(l, e));

                break;


            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($super_property(cp, e));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($super_call(l, e));

                break;


            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "{": s.push($object_literal(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $120(l, e, s); break;

                case 178: s = $109(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131: s = $118(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 83: s = $115(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![90].includes(a)) fail(l, e);

        return s;
    }
    function $member_expression(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_59(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $120(l, e, s); break;

                case 178: s = $109(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131: s = $118(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92: s = $99(l, e, s); break;

                case 83: s = $115(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![92].includes(a)) fail(l, e);

        return s;
    }
    function $call_expression(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_168(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $120(l, e, s); break;

                case 178: s = $109(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131: s = $118(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97: s = $94(l, e, s); break;

                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $100(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![97].includes(a)) fail(l, e);

        return s;
    }
    function $expression(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_87(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $120(l, e, s); break;

                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89: s = $45(l, e, s); break;

                case 83: s = $115(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![89].includes(a)) fail(l, e);

        return s;
    }
    function $concise_body(l, e, s = []) { e.p = -1; return s; }
    function $optional_expression(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_168(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $120(l, e, s); break;

                case 178: s = $109(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131: s = $118(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104: s = $97(l, e, s); break;

                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $95(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $101(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![104].includes(a)) fail(l, e);

        return s;
    }
    function $optional_chain(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        if (["?."].includes(l.tx)) { s.push($optional_chain(l, e)); }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 105: s = $318(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![105].includes(a)) fail(l, e);

        return s;
    }
    function $318(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "(": s.push($arguments(l, e)); break;

            case ".": s = $667(l, e, _s(s, l, e, e.eh, _0)); break;

            case "[": s = $666(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $668(l, e, s); break;

                case 100: s = $665(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![105].includes(a)) fail(l, e);

        return s;
    }
    function $primary_expression(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(": s.push($parenthesized(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_expression(l, e));

                break;


            case "class": s.push($class_expression(l, e)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function": s.push($function_expression(l, e)); break;

            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "{": s.push($object_literal(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $120(l, e, s); break;

                case 178: s = $109(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131: s = $118(l, e, s); break;

                case 83: s = $115(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![106].includes(a)) fail(l, e);

        return s;
    }
    function $statement(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_104(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180:

                    s = $120(l, e, s);

                    if (e.p < 0) s = $121(l, e, s);

                    break;


                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 177: s = $165(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $44(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                case 57: s = $30(l, e, s); break;

                case 56: s = $40(l, e, s); break;

                case 52: s = $39(l, e, s); break;

                case 50: s = $29(l, e, s); break;

                case 44: s = $170(l, e, s); break;

                case 43: s = $37(l, e, s); break;

                case 42: s = $38(l, e, s); break;

                case 41: s = $36(l, e, s); break;

                case 40: s = $35(l, e, s); break;

                case 39: s = $34(l, e, s); break;

                case 36: s = $169(l, e, s); break;

                case 33: s = $32(l, e, s); break;

                case 31: s = $28(l, e, s); break;

                case 30: s = $31(l, e, s); break;

                case 29: s = $41(l, e, s); break;

                case 28: s = $27(l, e, s); break;

                case 27: s = $33(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![24].includes(a)) fail(l, e);

        return s;
    }
    function $labeled_item(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "!": s.push($unary_expression(l, e)); break;

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($parenthesized(cp, e));

                if (e.p !== 131) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push(
                    $cover_parenthesized_expression_and_arrow_parameter_list(l, e)
                );

                break;


            case "++": s.push($update_expression(l, e)); break;

            case "+": s.push($unary_expression(l, e)); break;

            case "--": s.push($update_expression(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($unary_expression(cp, e));

                if (e.p !== 126) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case ";": s = $167(l, e, _s(s, l, e, e.eh, _0)); break;

            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($arrow_function(cp, e));

                if (e.p !== 78) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "await": s.push($await_expression(l, e)); break;

            case "break": s.push($break_statement(l, e)); break;

            case "class": s.push($class_expression(l, e)); break;

            case "continue": s.push($continue_statement(l, e)); break;

            case "debugger": s.push($debugger_statement(l, e)); break;

            case "delete": s.push($unary_expression(l, e)); break;

            case "do": s.push($iteration_statement(l, e)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "for": s.push($iteration_statement(l, e)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "if": s.push($if_statement(l, e)); break;

            case "import":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($import_meta(cp, e));

                if (e.p !== 95) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($import_call(l, e));

                break;


            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($new_expression(cp, e));

                if (e.p !== 91) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($new_target(l, e));

                break;


            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "return": s.push($return_statement(l, e)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($super_property(cp, e));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($super_call(l, e));

                break;


            case "switch": s.push($switch_statement(l, e)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "throw": s.push($throw_statement(l, e)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "try": s.push($try_statement(l, e)); break;

            case "typeof": s.push($unary_expression(l, e)); break;

            case "var": s.push($variable_statement(l, e)); break;

            case "void": s.push($unary_expression(l, e)); break;

            case "while": s.push($iteration_statement(l, e)); break;

            case "with": s.push($with_statement(l, e)); break;

            case "yield": s.push($yield_expression(l, e)); break;

            case "{":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($block(cp, e));

                if (e.p !== 29) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($object_literal(l, e));

                break;


            case "~": s.push($unary_expression(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180:

                    s = $120(l, e, s);

                    if (e.p < 0) s = $121(l, e, s);

                    break;


                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 177: s = $165(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $44(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                case 66: s = $323(l, e, s); break;

                case 57: s = $30(l, e, s); break;

                case 56: s = $40(l, e, s); break;

                case 52: s = $39(l, e, s); break;

                case 50: s = $29(l, e, s); break;

                case 44: s = $170(l, e, s); break;

                case 43: s = $37(l, e, s); break;

                case 42: s = $38(l, e, s); break;

                case 41: s = $36(l, e, s); break;

                case 40: s = $35(l, e, s); break;

                case 39: s = $34(l, e, s); break;

                case 36: s = $169(l, e, s); break;

                case 33: s = $32(l, e, s); break;

                case 31: s = $28(l, e, s); break;

                case 30: s = $31(l, e, s); break;

                case 29: s = $41(l, e, s); break;

                case 28: s = $27(l, e, s); break;

                case 27: s = $33(l, e, s); break;

                case 24: s = $322(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![51].includes(a)) fail(l, e);

        return s;
    }
    function $322(l, e, s = []) { e.p = -1; s = $_174(l, e, s); return s; }
    function $323(l, e, s = []) { e.p = -1; s = $_174(l, e, s); return s; }
    function $argument_list_HC_listbody2_112(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_175(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $120(l, e, s); break;

                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $327(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 102: s = $325(l, e, s); break;

                case 101: s = $326(l, e, s); break;

                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![102].includes(a)) fail(l, e);

        return s;
    }
    function $325(l, e, s = []) {

        e.p = -1;


        if (_1.includes(l.tx)) { return $673(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $326(l, e, s = []) {

        e.p = -1;


        if (_1.includes(l.tx)) {

            e.sp -= 1;

            var sym = s.slice(-1);

            s.splice(-1, 1, [sym[0]]);

            return (e.p = 102, s);
        }

        return s;
    }
    function $327(l, e, s = []) {

        e.p = -1;


        if (_45.includes(l.tx)) {

            e.sp -= 1;

            return (e.p = 101, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }
    function $argument_list(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_175(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $120(l, e, s); break;

                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $327(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 103: s = $330(l, e, s); break;

                case 101: s = $331(l, e, s); break;

                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![103].includes(a)) fail(l, e);

        return s;
    }
    function $330(l, e, s = []) {

        e.p = -1;


        if (_1.includes(l.tx)) { return $675(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $331(l, e, s = []) {

        e.p = -1;


        if (_45.includes(l.tx)) {

            e.sp -= 1;

            var sym = s.slice(-1);

            s.splice(-1, 1, [sym[0]]);

            return (e.p = 103, s);
        }

        return s;
    }
    function $logical_or_expression(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_181(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $120(l, e, s); break;

                case 178: s = $109(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131: s = $118(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112: s = $54(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90: s = $51(l, e, s); break;

                case 83: s = $115(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![112].includes(a)) fail(l, e);

        return s;
    }
    function $logical_and_expression(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_181(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $120(l, e, s); break;

                case 178: s = $109(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131: s = $118(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    break;


                case 113: s = $58(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90: s = $51(l, e, s); break;

                case 83: s = $115(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![113].includes(a)) fail(l, e);

        return s;
    }
    function $coalesce_expression(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_181(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $120(l, e, s); break;

                case 178: s = $109(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131: s = $118(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $61(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114: s = $56(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90: s = $51(l, e, s); break;

                case 83: s = $115(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![114].includes(a)) fail(l, e);

        return s;
    }
    function $coalesce_expression_head(l, e, s = []) {

        s.push($coalesce_expression_head_group_0230_113(l, e, s));

        e.sp++;

        return s;
    }
    function $coalesce_expression_head_group_0230_113(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_181(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $120(l, e, s); break;

                case 178: s = $109(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131: s = $118(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $61(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114: s = $56(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90: s = $51(l, e, s); break;

                case 83: s = $115(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![115].includes(a)) fail(l, e);

        return s;
    }
    function $assignment_expression(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_87(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $120(l, e, s); break;

                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![108].includes(a)) fail(l, e);

        return s;
    }
    function $bitwise_or_expression(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_181(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $120(l, e, s); break;

                case 178: s = $109(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131: s = $118(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117: s = $60(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90: s = $51(l, e, s); break;

                case 83: s = $115(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![117].includes(a)) fail(l, e);

        return s;
    }
    function $bitwise_xor_expression(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_181(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $120(l, e, s); break;

                case 178: s = $109(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131: s = $118(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118: s = $63(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90: s = $51(l, e, s); break;

                case 83: s = $115(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![118].includes(a)) fail(l, e);

        return s;
    }
    function $bitwise_and_expression(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_181(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $120(l, e, s); break;

                case 178: s = $109(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131: s = $118(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119: s = $65(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90: s = $51(l, e, s); break;

                case 83: s = $115(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![119].includes(a)) fail(l, e);

        return s;
    }
    function $additive_expression(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_181(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $120(l, e, s); break;

                case 178: s = $109(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131: s = $118(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123: s = $73(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90: s = $51(l, e, s); break;

                case 83: s = $115(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![123].includes(a)) fail(l, e);

        return s;
    }
    function $equality_expression(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_181(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $120(l, e, s); break;

                case 178: s = $109(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131: s = $118(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120: s = $67(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90: s = $51(l, e, s); break;

                case 83: s = $115(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![120].includes(a)) fail(l, e);

        return s;
    }
    function $multiplicative_expression(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_181(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $120(l, e, s); break;

                case 178: s = $109(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131: s = $118(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124: s = $75(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90: s = $51(l, e, s); break;

                case 83: s = $115(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![124].includes(a)) fail(l, e);

        return s;
    }
    function $shift_expression(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_181(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $120(l, e, s); break;

                case 178: s = $109(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131: s = $118(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122: s = $71(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90: s = $51(l, e, s); break;

                case 83: s = $115(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![122].includes(a)) fail(l, e);

        return s;
    }
    function $cover_parenthesized_expression_and_arrow_parameter_list(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        if (_33.includes(l.tx)) {

            var cp = l.copy(), _sym = null;

            _sym = s.slice();

            _sym.push($parenthesized(cp, e));

            if (e.p !== 131) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); return s; }

            s.push(
                $cover_parenthesized_expression_and_arrow_parameter_list(l, e)
            );
        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 131: s = $119(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![130].includes(a)) fail(l, e);

        return s;
    }
    function $binding_property_list(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_153(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 186: s = $257(l, e, s); break;

                case 185:

                    s = $6(l, e, s);

                    if (e.p < 0) s = $254(l, e, s);

                    break;


                case 184: s = $258(l, e, s); break;

                case 183: s = $255(l, e, s); break;

                case 182:

                    s = $7(l, e, s);

                    if (e.p < 0) s = $256(l, e, s);

                    break;


                case 181: s = $251(l, e, s); break;

                case 180: s = $211(l, e, s); break;

                case 179: s = $236(l, e, s); break;

                case 173: s = $253(l, e, s); break;

                case 169: s = $252(l, e, s); break;

                case 150: s = $250(l, e, s); break;

                case 149: s = $249(l, e, s); break;

                case 148: s = $350(l, e, s); break;

                case 141: s = $349(l, e, s); break;

                case 139: s = $347(l, e, s); break;

                case 136: s = $348(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![136].includes(a)) fail(l, e);

        return s;
    }
    function $347(l, e, s = []) {

        e.p = -1;


        if (_2.includes(l.tx)) {

            e.sp -= 1;

            var sym = s.slice(-1);

            s.splice(-1, 1, [sym[0]]);

            return (e.p = 136, s);
        }

        return s;
    }
    function $348(l, e, s = []) {

        e.p = -1;


        if (_1.includes(l.tx)) { return $676(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $349(l, e, s = []) {

        e.p = -1;


        if (_2.includes(l.tx)) {

            e.sp -= 1;

            return (e.p = 139, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }
    function $350(l, e, s = []) {

        e.p = -1;


        if (_34.includes(l.tx)) { return $677(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $array_binding_pattern(l, e, s = []) {

        e.p = -1;


        if (_49.includes(l.tx)) { s.push($array_binding_pattern(l, e)); }

        return s;
    }
    function $binding_element_list(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case ",": s = $358(l, e, _s(s, l, e, e.eh, _0)); break;

            case "[": s.push($array_binding_pattern(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async": s = $11(l, e, _s(s, l, e, e.eh, _0)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "{": s.push($object_binding_pattern(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;
                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $211(l, e, s); break;

                case 179: s = $236(l, e, s); break;

                case 155:

                    s = $355(l, e, s);

                    if (e.p < 0) s = $356(l, e, s);

                    break;


                case 141: s = $234(l, e, s); break;

                case 140: s = $357(l, e, s); break;

                case 138: s = $353(l, e, s); break;

                case 137: s = $354(l, e, s); break;

                case 134: s = $213(l, e, s); break;

                case 133: s = $212(l, e, s); break;

                case 132: s = $235(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![137].includes(a)) fail(l, e);

        return s;
    }
    function $353(l, e, s = []) {

        e.p = -1;


        if (_50.includes(l.tx)) {

            e.sp -= 1;

            return (e.p = 137, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }
    function $354(l, e, s = []) {

        e.p = -1;


        if (_1.includes(l.tx)) { return $678(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $355(l, e, s = []) {

        s.push($binding_element(l, e, s));

        e.sp++;

        return s;
    }
    function $356(l, e, s = []) {

        e.p = -1;


        if (_1.includes(l.tx)) { return $680(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $357(l, e, s = []) {

        e.p = -1;


        if (_50.includes(l.tx)) {

            e.sp -= 1;

            var sym = s.slice(-1);

            s.splice(-1, 1, [sym[0]]);

            return (e.p = 138, s);
        }

        return s;
    }
    function $358(l, e, s = []) {

        e.p = -1;


        if (_51.includes(l.tx) || _41.includes(l.ty)) {

            e.sp -= 1;

            var sym = s.slice(-1);

            s.splice(-1, 1, { type: "Elision", count: 0, pos });

            return (e.p = 155, s);
        }

        return s;
    }
    function $binding_property(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_153(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 186: s = $257(l, e, s); break;

                case 185:

                    s = $6(l, e, s);

                    if (e.p < 0) s = $254(l, e, s);

                    break;


                case 184: s = $258(l, e, s); break;

                case 183: s = $255(l, e, s); break;

                case 182:

                    s = $7(l, e, s);

                    if (e.p < 0) s = $256(l, e, s);

                    break;


                case 181: s = $251(l, e, s); break;

                case 180: s = $211(l, e, s); break;

                case 179: s = $236(l, e, s); break;

                case 173: s = $253(l, e, s); break;

                case 169: s = $252(l, e, s); break;

                case 150: s = $250(l, e, s); break;

                case 149: s = $249(l, e, s); break;

                case 148: s = $350(l, e, s); break;

                case 141: s = $349(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![139].includes(a)) fail(l, e);

        return s;
    }
    function $exponentiation_expression(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_181(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $120(l, e, s); break;

                case 178: s = $109(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131: s = $118(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90: s = $51(l, e, s); break;

                case 83: s = $115(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![125].includes(a)) fail(l, e);

        return s;
    }
    function $property_definition_list(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_194(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 186: s = $257(l, e, s); break;

                case 185:

                    s = $6(l, e, s);

                    if (e.p < 0) s = $254(l, e, s);

                    break;


                case 184: s = $258(l, e, s); break;

                case 183: s = $255(l, e, s); break;

                case 182:

                    s = $7(l, e, s);

                    if (e.p < 0) s = $256(l, e, s);

                    break;


                case 181: s = $251(l, e, s); break;

                case 180: s = $120(l, e, s); break;

                case 178:

                    s = $365(l, e, s);

                    if (e.p < 0) s = $366(l, e, s);

                    break;


                case 173: s = $253(l, e, s); break;

                case 169: s = $252(l, e, s); break;

                case 151: s = $364(l, e, s); break;

                case 150: s = $250(l, e, s); break;

                case 149: s = $249(l, e, s); break;

                case 148:

                    s = $369(l, e, s);

                    if (e.p < 0) s = $248(l, e, s);

                    break;


                case 147: s = $362(l, e, s); break;

                case 146: s = $363(l, e, s); break;

                case 87: s = $367(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![146].includes(a)) fail(l, e);

        return s;
    }
    function $362(l, e, s = []) {

        e.p = -1;


        if (_2.includes(l.tx)) {

            e.sp -= 1;

            var sym = s.slice(-1);

            s.splice(-1, 1, [sym[0]]);

            return (e.p = 146, s);
        }

        return s;
    }
    function $363(l, e, s = []) {

        e.p = -1;


        if (_1.includes(l.tx)) { return $681(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $364(l, e, s = []) { e.p = -1; s = $_197(l, e, s); return s; }
    function $365(l, e, s = []) {

        e.p = -1;


        if (_2.includes(l.tx)) {

            e.sp -= 1;

            var sym = s.slice(-1);

            s.splice(-1, 1, sym[0].type |= e.cls.PROPERTY_NAME, sym[0]);

            return (e.p = 147, s);
        }

        return s;
    }
    function $366(l, e, s = []) { s.push($initializer(l, e, s)); e.sp++; return s; }
    function $367(l, e, s = []) { e.p = -1; s = $_197(l, e, s); return s; }
    function $369(l, e, s = []) {

        e.p = -1;


        if (_34.includes(l.tx)) { return $683(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $property_definition(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_194(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 186: s = $257(l, e, s); break;

                case 185:

                    s = $6(l, e, s);

                    if (e.p < 0) s = $254(l, e, s);

                    break;


                case 184: s = $258(l, e, s); break;

                case 183: s = $255(l, e, s); break;

                case 182:

                    s = $7(l, e, s);

                    if (e.p < 0) s = $256(l, e, s);

                    break;


                case 181: s = $251(l, e, s); break;

                case 180: s = $120(l, e, s); break;

                case 178:

                    s = $365(l, e, s);

                    if (e.p < 0) s = $366(l, e, s);

                    break;


                case 173: s = $253(l, e, s); break;

                case 169: s = $252(l, e, s); break;

                case 151: s = $364(l, e, s); break;

                case 150: s = $250(l, e, s); break;

                case 149: s = $249(l, e, s); break;

                case 148:

                    s = $369(l, e, s);

                    if (e.p < 0) s = $248(l, e, s);

                    break;


                case 87: s = $367(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![147].includes(a)) fail(l, e);

        return s;
    }
    function $elision(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        if (_1.includes(l.tx)) { s = $358(l, e, _s(s, l, e, e.eh, _0)); }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 155: s = $356(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![155].includes(a)) fail(l, e);

        return s;
    }
    function $unary_expression(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_181(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $120(l, e, s); break;

                case 178: s = $109(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131: s = $118(l, e, s); break;

                case 127: s = $79(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90: s = $51(l, e, s); break;

                case 83: s = $115(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![126].includes(a)) fail(l, e);

        return s;
    }
    function $template_literal(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        if (_31.includes(l.tx)) {

            var cp = l.copy(), _sym = null;

            _sym = s.slice();

            _sym.push($no_substitute_template(cp, e));

            if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); return s; }

            s.push($template_head(l, e));
        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![157].includes(a)) fail(l, e);

        return s;
    }
    function $template_spans(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        if (_52.includes(l.tx)) {

            var cp = l.copy(), _sym = null;

            _sym = s.slice();

            _sym.push($template_tail(cp, e));

            if (e.p !== 164) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); return s; }

            s.push($template_middle(l, e));
        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 164: s = $375(l, e, s); break;

                case 163: s = $380(l, e, s); break;

                case 161:

                    s = $376(l, e, s);

                    if (e.p < 0) s = $377(l, e, s);

                    break;


                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![160].includes(a)) fail(l, e);

        return s;
    }
    function $375(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 1;

            var sym = s.slice(-1);

            s.splice(-1, 1, [sym[0]]);

            return (e.p = 160, s);
        }

        return s;
    }
    function $376(l, e, s = []) {

        s.push($template_tail(l, e, s));

        e.sp++;

        return s;
    }
    function $377(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_204(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 163: s = $686(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![161].includes(a)) fail(l, e);

        return s;
    }
    function $380(l, e, s = []) { s.push($expression(l, e, s)); e.sp++; return s; }
    function $template_middle_list(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_204(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 163: s = $380(l, e, s); break;

                case 161: s = $377(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![161].includes(a)) fail(l, e);

        return s;
    }
    function $template_characters_HC_listbody3_116(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_207(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 172: s = $394(l, e, s); break;

                case 167: s = $384(l, e, s); break;

                case 165: s = $383(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![165].includes(a)) fail(l, e);

        return s;
    }
    function $383(l, e, s = []) {

        s.push($template_string_data(l, e, s));

        e.sp++;

        return s;
    }
    function $384(l, e, s = []) {

        e.p = -1;


        if (_53.includes(l.tx) || _54.includes(l.ty)) {

            e.sp -= 1;

            var sym = s.slice(-1);

            s.splice(-1, 1, sym[0] + "");

            return (e.p = 165, s);
        }

        return s;
    }
    function $385(l, e, s = []) { e.p = -1; s = $_209(l, e, s); return s; }
    function $386(l, e, s = []) { e.p = -1; s = $_209(l, e, s); return s; }
    function $387(l, e, s = []) { e.p = -1; s = $_209(l, e, s); return s; }
    function $388(l, e, s = []) { e.p = -1; s = $_209(l, e, s); return s; }
    function $389(l, e, s = []) { e.p = -1; s = $_209(l, e, s); return s; }
    function $390(l, e, s = []) { e.p = -1; s = $_209(l, e, s); return s; }
    function $391(l, e, s = []) { e.p = -1; s = $_209(l, e, s); return s; }
    function $392(l, e, s = []) { e.p = -1; s = $_209(l, e, s); return s; }
    function $393(l, e, s = []) { e.p = -1; s = $_209(l, e, s); return s; }
    function $394(l, e, s = []) { e.p = -1; s = $_209(l, e, s); return s; }
    function $template_characters(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_207(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 172: s = $394(l, e, s); break;

                case 167: s = $398(l, e, s); break;

                case 166: s = $397(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![166].includes(a)) fail(l, e);

        return s;
    }
    function $397(l, e, s = []) {

        s.push($template_string_data(l, e, s));

        e.sp++;

        return s;
    }
    function $398(l, e, s = []) {

        e.p = -1;


        if (_53.includes(l.tx) || _54.includes(l.ty)) {

            e.sp -= 1;

            var sym = s.slice(-1);

            s.splice(-1, 1, sym[0] + "");

            return (e.p = 166, s);
        }

        return s;
    }
    function $literal(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "\"": s.push($string_literal(l, e)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            default:

                switch (l.ty) {

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![168].includes(a)) fail(l, e);

        return s;
    }
    function $relational_expression(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_181(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $120(l, e, s); break;

                case 178: s = $109(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131: s = $118(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121: s = $69(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90: s = $51(l, e, s); break;

                case 83: s = $115(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![121].includes(a)) fail(l, e);

        return s;
    }
    function $template_string_data(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_207(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 172: s = $394(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![167].includes(a)) fail(l, e);

        return s;
    }
    function $escaped_sequence(l, e, s = []) {

        e.p = -1;


        if (["'\'"].includes(l.tx)) { s.push($escaped_sequence(l, e)); }

        return s;
    }
    function $def$defaultproductions_HC_listbody1_100(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_213(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 210:

                    s = $431(l, e, s);

                    if (e.p < 0) s = $432(l, e, s);

                    break;


                case 209: s = $412(l, e, s); break;

                case 208:

                    s = $425(l, e, s);

                    if (e.p < 0) s = $426(l, e, s);

                    break;


                case 207: s = $411(l, e, s); break;

                case 199: s = $406(l, e, s); break;

                case 198: s = $423(l, e, s); break;

                case 197: s = $422(l, e, s); break;

                case 196: s = $420(l, e, s); break;

                case 195: s = $410(l, e, s); break;

                case 194: s = $409(l, e, s); break;

                case 193: s = $408(l, e, s); break;

                case 192: s = $407(l, e, s); break;

                case 190: s = $405(l, e, s); break;

                case 188: s = $404(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![188].includes(a)) fail(l, e);

        return s;
    }
    function $404(l, e, s = []) {

        s.push($def$defaultproduction(l, e, s));

        e.sp++;

        return s;
    }
    function $405(l, e, s = []) {

        e.p = -1;


        if (_55.includes(l.tx) || _56.includes(l.ty)) {

            e.sp -= 1;

            var sym = s.slice(-1);

            s.splice(-1, 1, [sym[0]]);

            return (e.p = 188, s);
        }

        return s;
    }
    function $406(l, e, s = []) { e.p = -1; s = $_215(l, e, s); return s; }
    function $407(l, e, s = []) { e.p = -1; s = $_215(l, e, s); return s; }
    function $408(l, e, s = []) { e.p = -1; s = $_215(l, e, s); return s; }
    function $409(l, e, s = []) { e.p = -1; s = $_215(l, e, s); return s; }
    function $410(l, e, s = []) { e.p = -1; s = $_215(l, e, s); return s; }
    function $411(l, e, s = []) { e.p = -1; s = $_215(l, e, s); return s; }
    function $412(l, e, s = []) { e.p = -1; s = $_215(l, e, s); return s; }
    function $413(l, e, s = []) {

        e.p = -1;


        if (_55.includes(l.tx) || _56.includes(l.ty)) {

            e.sp -= 1;

            return (e.p = 199, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }
    function $414(l, e, s = []) { e.p = -1; s = $_217(l, e, s); return s; }
    function $415(l, e, s = []) { e.p = -1; s = $_218(l, e, s); return s; }
    function $416(l, e, s = []) {

        e.p = -1;


        if (_55.includes(l.tx) || _56.includes(l.ty)) {

            e.sp -= 1;

            var sym = s.slice(-1);

            s.splice(
                -1,
                1,
                {

                    val: parseFloat(sym[0]),

                    type: "hex",

                    original_val: sym[0]
                }
            );

            return (e.p = 192, s);
        }

        return s;
    }
    function $417(l, e, s = []) {

        e.p = -1;


        if (_55.includes(l.tx) || _56.includes(l.ty)) {

            e.sp -= 1;

            var sym = s.slice(-1);

            s.splice(
                -1,
                1,
                {

                    val: parseFloat(sym[0]),

                    type: "bin",

                    original_val: sym[0]
                }
            );

            return (e.p = 193, s);
        }

        return s;
    }
    function $418(l, e, s = []) {

        e.p = -1;


        if (_55.includes(l.tx) || _56.includes(l.ty)) {

            e.sp -= 1;

            var sym = s.slice(-1);

            s.splice(
                -1,
                1,
                {

                    val: parseFloat(sym[0]),

                    type: "oct",

                    original_val: sym[0]
                }
            );

            return (e.p = 194, s);
        }

        return s;
    }
    function $419(l, e, s = []) {

        e.p = -1;


        if (_55.includes(l.tx) || _56.includes(l.ty)) {

            e.sp -= 1;

            var sym = s.slice(-1);

            s.splice(
                -1,
                1,
                {

                    val: parseFloat(sym[0]),

                    type: "sci",

                    original_val: sym[0]
                }
            );

            return (e.p = 195, s);
        }

        return s;
    }
    function $420(l, e, s = []) {

        e.p = -1;


        if (_55.includes(l.tx) || _56.includes(l.ty)) {

            e.sp -= 1;

            return (e.p = 195, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }
    function $421(l, e, s = []) {

        e.p = -1;


        if (_55.includes(l.tx) || _56.includes(l.ty)) {

            e.sp -= 1;

            var sym = s.slice(-1);

            s.splice(
                -1,
                1,
                {

                    val: parseFloat(sym[0]),

                    type: "flt",

                    original_val: sym[0]
                }
            );

            return (e.p = 196, s);
        }

        return s;
    }
    function $422(l, e, s = []) {

        e.p = -1;


        if (_55.includes(l.tx) || _56.includes(l.ty)) {

            e.sp -= 1;

            return (e.p = 196, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }
    function $423(l, e, s = []) {

        e.p = -1;


        if (_55.includes(l.tx) || _56.includes(l.ty)) {

            e.sp -= 1;

            var sym = s.slice(-1);

            s.splice(
                -1,
                1,
                {

                    val: parseFloat(sym[0]),

                    type: "int",

                    original_val: sym[0]
                }
            );

            return (e.p = 197, s);
        }

        return s;
    }
    function $424(l, e, s = []) {

        e.p = -1;


        if (_55.includes(l.tx) || _56.includes(l.ty)) {

            e.sp -= 1;

            return (e.p = 198, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }
    function $425(l, e, s = []) {

        e.p = -1;


        if (["!=", "!==", "$", "%", "%=", "&", "&&", "&=", "(", ")", "*", "**", "**=", "*=", "+", "++", "+=", ",", "-", "--", "-=", ".", "/", "/=", ":", ";", "<", "<<", "<<=", "<=", "=", "==", "===", ">", ">=", ">>", ">>=", ">>>", ">>>=", "?", "?.", "??", "[", "]", "^", "^=", "_", "`", "in", "instanceof", "of", "{", "|", "|=", "||", "}"].includes(l.tx) || _58.includes(l.ty)) {

            e.sp -= 1;

            return (e.p = 207, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }
    function $426(l, e, s = []) {

        e.p = -1;


        switch (l.tx) {

            case "$": return $705(l, e, _s(s, l, e, e.eh, _0));

            case "_": return $704(l, e, _s(s, l, e, e.eh, _0));

            case "keyword": return $703(l, e, _s(s, l, e, e.eh, _0));

            default:

                switch (l.ty) {

                    case 1025: return $708(l, e, _s(s, l, e, e.eh, _0));

                    case 4097: return $707(l, e, _s(s, l, e, e.eh, _0));

                    case 2: return $702(l, e, _s(s, l, e, e.eh, _0));

                    case 1: return $706(l, e, _s(s, l, e, e.eh, _0));

                    case 2049: return $709(l, e, _s(s, l, e, e.eh, _0));
                }

        }

        return s;
    }
    function $427(l, e, s = []) { e.p = -1; s = $_217(l, e, s); return s; }
    function $428(l, e, s = []) { e.p = -1; s = $_218(l, e, s); return s; }
    function $429(l, e, s = []) { e.p = -1; s = $_217(l, e, s); return s; }
    function $430(l, e, s = []) { e.p = -1; s = $_218(l, e, s); return s; }
    function $431(l, e, s = []) {

        e.p = -1;


        if (_55.includes(l.tx) || _58.includes(l.ty)) {

            e.sp -= 1;

            return (e.p = 209, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }
    function $432(l, e, s = []) {

        e.p = -1;


        switch (l.tx) {

            case "$": return $715(l, e, _s(s, l, e, e.eh, _0));

            case "-": return $714(l, e, _s(s, l, e, e.eh, _0));

            case "_": return $713(l, e, _s(s, l, e, e.eh, _0));

            case "keyword": return $712(l, e, _s(s, l, e, e.eh, _0));

            default:

                switch (l.ty) {

                    case 1025: return $718(l, e, _s(s, l, e, e.eh, _0));

                    case 4097: return $717(l, e, _s(s, l, e, e.eh, _0));

                    case 2: return $711(l, e, _s(s, l, e, e.eh, _0));

                    case 1: return $716(l, e, _s(s, l, e, e.eh, _0));

                    case 2049: return $719(l, e, _s(s, l, e, e.eh, _0));
                }

        }

        return s;
    }
    function $def$defaultproductions(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_213(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 210:

                    s = $431(l, e, s);

                    if (e.p < 0) s = $432(l, e, s);

                    break;


                case 209: s = $412(l, e, s); break;

                case 208:

                    s = $425(l, e, s);

                    if (e.p < 0) s = $426(l, e, s);

                    break;


                case 207: s = $411(l, e, s); break;

                case 199: s = $406(l, e, s); break;

                case 198: s = $423(l, e, s); break;

                case 197: s = $422(l, e, s); break;

                case 196: s = $420(l, e, s); break;

                case 195: s = $410(l, e, s); break;

                case 194: s = $409(l, e, s); break;

                case 193: s = $408(l, e, s); break;

                case 192: s = $407(l, e, s); break;

                case 190: s = $435(l, e, s); break;

                case 189: s = $434(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![189].includes(a)) fail(l, e);

        return s;
    }
    function $434(l, e, s = []) {

        s.push($def$defaultproduction(l, e, s));

        e.sp++;

        return s;
    }
    function $435(l, e, s = []) {

        e.p = -1;


        if (_55.includes(l.tx) || _56.includes(l.ty)) {

            e.sp -= 1;

            var sym = s.slice(-1);

            s.splice(-1, 1, [sym[0]]);

            return (e.p = 189, s);
        }

        return s;
    }
    function $def$string_group_034_101(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_233(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 206: s = $437(l, e, s); break;

                case 205:

                    s = $439(l, e, s);

                    if (e.p < 0) s = $440(l, e, s);

                    break;


                case 204: s = $441(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![200].includes(a)) fail(l, e);

        return s;
    }
    function $437(l, e, s = []) { e.p = -1; s = $_234(l, e, s); return s; }
    function $438(l, e, s = []) { e.p = -1; s = $_234(l, e, s); return s; }
    function $439(l, e, s = []) {

        e.p = -1;


        if (_60.includes(l.tx) || _61.includes(l.ty)) {

            e.sp -= 1;

            return (e.p = 206, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }
    function $440(l, e, s = []) {

        s.push($def$string_value_group_149_104(l, e, s));

        e.sp++;

        return s;
    }
    function $441(l, e, s = []) {

        e.p = -1;


        if (_60.includes(l.tx) || _61.includes(l.ty)) {

            e.sp -= 1;

            var sym = s.slice(-1);

            s.splice(-1, 1, sym[0] + "");

            return (e.p = 205, s);
        }

        return s;
    }
    function $442(l, e, s = []) { e.p = -1; s = $_237(l, e, s); return s; }
    function $443(l, e, s = []) {

        e.p = -1;


        switch (l.tx) {

            case "true":

                return $721(l, e, _s(s, l, e, e.eh, _0));

                e.sp -= 1;

                return (e.p = 204, (s.splice(-1, 1, s[s.length - 1]), s));


            case "\"":

            case "'":

            case "-":

            case "/":

            case "'\'":

            case "_":

                e.sp -= 1;

                return (e.p = 204, (s.splice(-1, 1, s[s.length - 1]), s));


            default:

                switch (l.ty) {

                    case 32:

                    case 2:

                    case 1:

                    case 16:

                    case 128:

                    case 8:

                        e.sp -= 1;

                        return (e.p = 204, (s.splice(-1, 1, s[s.length - 1]), s));

                }

        }

        return s;
    }
    function $444(l, e, s = []) { e.p = -1; s = $_237(l, e, s); return s; }
    function $445(l, e, s = []) { e.p = -1; s = $_237(l, e, s); return s; }
    function $446(l, e, s = []) { e.p = -1; s = $_237(l, e, s); return s; }
    function $447(l, e, s = []) { e.p = -1; s = $_237(l, e, s); return s; }
    function $448(l, e, s = []) { e.p = -1; s = $_237(l, e, s); return s; }
    function $449(l, e, s = []) { e.p = -1; s = $_237(l, e, s); return s; }
    function $450(l, e, s = []) { e.p = -1; s = $_237(l, e, s); return s; }
    function $451(l, e, s = []) { e.p = -1; s = $_237(l, e, s); return s; }
    function $def$string_HC_listbody1_102(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_233(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 206: s = $437(l, e, s); break;

                case 205:

                    s = $439(l, e, s);

                    if (e.p < 0) s = $440(l, e, s);

                    break;


                case 204: s = $441(l, e, s); break;

                case 201: s = $453(l, e, s); break;

                case 200: s = $454(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![201].includes(a)) fail(l, e);

        return s;
    }
    function $453(l, e, s = []) {

        s.push($def$string_group_034_101(l, e, s));

        e.sp++;

        return s;
    }
    function $454(l, e, s = []) {

        e.p = -1;


        if (_62.includes(l.tx) || _61.includes(l.ty)) {

            e.sp -= 1;

            var sym = s.slice(-1);

            s.splice(-1, 1, sym[0] + "");

            return (e.p = 201, s);
        }

        return s;
    }
    function $def$string_value_group_149_104(l, e, s = []) {

        e.p = -1;


        switch (l.tx) {

            case "-": return $444(l, e, _s(s, l, e, e.eh, _0));

            case "/": return $442(l, e, _s(s, l, e, e.eh, _0));

            case "'\'": return $443(l, e, _s(s, l, e, e.eh, _0));

            case "_": return $445(l, e, _s(s, l, e, e.eh, _0));

            case "true": return $446(l, e, _s(s, l, e, e.eh, _0));

            default:

                switch (l.ty) {

                    case 32: return $448(l, e, _s(s, l, e, e.eh, _0));

                    case 2: return $450(l, e, _s(s, l, e, e.eh, _0));

                    case 1: return $449(l, e, _s(s, l, e, e.eh, _0));

                    case 16: return $447(l, e, _s(s, l, e, e.eh, _0));

                    case 128: return $451(l, e, _s(s, l, e, e.eh, _0));
                }

        }

        return s;
    }
    function $def$string_HC_listbody1_103(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_233(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 206: s = $437(l, e, s); break;

                case 205:

                    s = $439(l, e, s);

                    if (e.p < 0) s = $440(l, e, s);

                    break;


                case 204: s = $441(l, e, s); break;

                case 202: s = $457(l, e, s); break;

                case 200: s = $458(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![202].includes(a)) fail(l, e);

        return s;
    }
    function $457(l, e, s = []) {

        s.push($def$string_group_034_101(l, e, s));

        e.sp++;

        return s;
    }
    function $458(l, e, s = []) {

        e.p = -1;


        if (_63.includes(l.tx) || _61.includes(l.ty)) {

            e.sp -= 1;

            var sym = s.slice(-1);

            s.splice(-1, 1, sym[0] + "");

            return (e.p = 202, s);
        }

        return s;
    }
    function $def$string_value_HC_listbody2_105(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "-": s = $444(l, e, _s(s, l, e, e.eh, _0)); break;

            case "/": s = $442(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'\'": s = $443(l, e, _s(s, l, e, e.eh, _0)); break;

            case "_": s = $445(l, e, _s(s, l, e, e.eh, _0)); break;

            case "true": s = $446(l, e, _s(s, l, e, e.eh, _0)); break;

            default:

                switch (l.ty) {

                    case 32: s = $448(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 2: s = $450(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1: s = $449(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 16: s = $447(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 128: s = $451(l, e, _s(s, l, e, e.eh, _0)); break;
                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 205: s = $440(l, e, s); break;

                case 204: s = $441(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![205].includes(a)) fail(l, e);

        return s;
    }
    function $460(l, e, s = []) {

        s.push($import_specifier(l, e, s));

        e.sp++;

        return s;
    }
    function $def$defaultproduction(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_213(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 210:

                    s = $431(l, e, s);

                    if (e.p < 0) s = $432(l, e, s);

                    break;


                case 209: s = $412(l, e, s); break;

                case 208:

                    s = $425(l, e, s);

                    if (e.p < 0) s = $426(l, e, s);

                    break;


                case 207: s = $411(l, e, s); break;

                case 199: s = $406(l, e, s); break;

                case 198: s = $423(l, e, s); break;

                case 197: s = $422(l, e, s); break;

                case 196: s = $420(l, e, s); break;

                case 195: s = $410(l, e, s); break;

                case 194: s = $409(l, e, s); break;

                case 193: s = $408(l, e, s); break;

                case 192: s = $407(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![190].includes(a)) fail(l, e);

        return s;
    }
    function $462(l, e, s = []) {

        s.push($imported_binding(l, e, s));

        e.sp++;

        return s;
    }
    function $def$js_id_symbols(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "$": s = $429(l, e, _s(s, l, e, e.eh, _0)); break;

            case "_": s = $427(l, e, _s(s, l, e, e.eh, _0)); break;

            default:

                switch (l.ty) {

                    case 2: s = $414(l, e, _s(s, l, e, e.eh, _0)); break;
                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 208: s = $426(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![208].includes(a)) fail(l, e);

        return s;
    }
    function $def$identifier_symbols(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "$": s = $430(l, e, _s(s, l, e, e.eh, _0)); break;

            case "_": s = $428(l, e, _s(s, l, e, e.eh, _0)); break;

            default:

                switch (l.ty) {

                    case 2: s = $415(l, e, _s(s, l, e, e.eh, _0)); break;
                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 210: s = $432(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![210].includes(a)) fail(l, e);

        return s;
    }
    function $465(l, e, s = []) {

        s.push($export_specifier(l, e, s));

        e.sp++;

        return s;
    }
    function $466(l, e, s = []) { s.push($identifier(l, e, s)); e.sp++; return s; }
    function $467(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 2;

            var sym = s.slice(-2);

            s.splice(-2, 2, { type: "ObjectLiteral", nodes: [], pos });

            return (e.p = 145, s);
        }

        return s;
    }
    function $468(l, e, s = []) {

        e.p = -1;


        switch (l.tx) {

            case ",": return $729(l, e, _s(s, l, e, e.eh, _0));

            case "}": return $730(l, e, _s(s, l, e, e.eh, _0));
        }

        return s;
    }
    function $469(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_247(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 12: s = $731(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![16].includes(a)) fail(l, e);

        return s;
    }
    function $470(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case ";": s = $734(l, e, _s(s, l, e, e.eh, _0)); break;

            case "from": s.push($from_clause(l, e)); break;
        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 12: s = $733(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![16].includes(a)) fail(l, e);

        return s;
    }
    function $471(l, e, s = []) { e.p = -1; s = $_249(l, e, s); return s; }
    function $472(l, e, s = []) { e.p = -1; s = $_249(l, e, s); return s; }
    function $473(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "!": s.push($unary_expression(l, e)); break;

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($parenthesized(cp, e));

                if (e.p !== 131) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push(
                    $cover_parenthesized_expression_and_arrow_parameter_list(l, e)
                );

                break;


            case "++": s.push($update_expression(l, e)); break;

            case "+": s.push($unary_expression(l, e)); break;

            case "--": s.push($update_expression(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($unary_expression(cp, e));

                if (e.p !== 126) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($arrow_function(cp, e));

                if (e.p !== 78) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "await": s.push($await_expression(l, e)); break;

            case "class":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($class_expression(cp, e));

                if (e.p !== 83) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($class_declaration(l, e));

                break;


            case "delete": s.push($unary_expression(l, e)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "import":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($import_meta(cp, e));

                if (e.p !== 95) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($import_call(l, e));

                break;


            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($new_expression(cp, e));

                if (e.p !== 91) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($new_target(l, e));

                break;


            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($super_property(cp, e));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($super_call(l, e));

                break;


            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "typeof": s.push($unary_expression(l, e)); break;

            case "void": s.push($unary_expression(l, e)); break;

            case "yield": s.push($yield_expression(l, e)); break;

            case "{": s.push($object_literal(l, e)); break;

            case "~": s.push($unary_expression(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $120(l, e, s); break;

                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $774(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 82: s = $773(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                case 66: s = $185(l, e, s); break;

                case 26: s = $772(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![16].includes(a)) fail(l, e);

        return s;
    }
    function $475(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 2;

            var sym = s.slice(-2);

            s.splice(
                -2,
                2,
                { type: "ExpressionStatement", nodes: [sym[0]], pos }
            );

            return (e.p = 31, s);
        }

        return s;
    }
    function $476(l, e, s = []) {

        s.push($assignment_expression(l, e, s));

        e.sp++;

        return s;
    }
    function $477(l, e, s = []) {

        s.push($assignment_expression(l, e, s));

        e.sp++;

        s = $740(l, e, s);

        return s;
    }
    function $478(l, e, s = []) {

        s.push($assignment_expression(l, e, s));

        e.sp++;

        s = $739(l, e, s);

        return s;
    }
    function $479(l, e, s = []) { e.p = -1; s = $_253(l, e, s); return s; }
    function $480(l, e, s = []) { e.p = -1; s = $_253(l, e, s); return s; }
    function $481(l, e, s = []) { e.p = -1; s = $_253(l, e, s); return s; }
    function $482(l, e, s = []) { e.p = -1; s = $_253(l, e, s); return s; }
    function $483(l, e, s = []) { e.p = -1; s = $_253(l, e, s); return s; }
    function $484(l, e, s = []) { e.p = -1; s = $_253(l, e, s); return s; }
    function $485(l, e, s = []) { e.p = -1; s = $_253(l, e, s); return s; }
    function $486(l, e, s = []) { e.p = -1; s = $_253(l, e, s); return s; }
    function $487(l, e, s = []) { e.p = -1; s = $_253(l, e, s); return s; }
    function $488(l, e, s = []) { e.p = -1; s = $_253(l, e, s); return s; }
    function $489(l, e, s = []) { e.p = -1; s = $_253(l, e, s); return s; }
    function $490(l, e, s = []) { e.p = -1; s = $_253(l, e, s); return s; }
    function $491(l, e, s = []) { e.p = -1; s = $_254(l, e, s); return s; }
    function $492(l, e, s = []) { e.p = -1; s = $_254(l, e, s); return s; }
    function $493(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_87(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $120(l, e, s); break;

                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $741(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![110].includes(a)) fail(l, e);

        return s;
    }
    function $494(l, e, s = []) {

        s.push($logical_and_expression(l, e, s));

        e.sp++;

        return s;
    }
    function $495(l, e, s = []) {

        s.push($bitwise_or_expression(l, e, s));

        e.sp++;

        return s;
    }
    function $496(l, e, s = []) {

        s.push($bitwise_xor_expression(l, e, s));

        e.sp++;

        return s;
    }
    function $497(l, e, s = []) {

        s.push($bitwise_and_expression(l, e, s));

        e.sp++;

        return s;
    }
    function $498(l, e, s = []) {

        s.push($equality_expression(l, e, s));

        e.sp++;

        return s;
    }
    function $499(l, e, s = []) {

        s.push($relational_expression(l, e, s));

        e.sp++;

        return s;
    }
    function $500(l, e, s = []) {

        s.push($relational_expression(l, e, s));

        e.sp++;

        return s;
    }
    function $501(l, e, s = []) {

        s.push($relational_expression(l, e, s));

        e.sp++;

        return s;
    }
    function $502(l, e, s = []) {

        s.push($relational_expression(l, e, s));

        e.sp++;

        return s;
    }
    function $503(l, e, s = []) {

        s.push($shift_expression(l, e, s));

        e.sp++;

        return s;
    }
    function $504(l, e, s = []) {

        s.push($shift_expression(l, e, s));

        e.sp++;

        return s;
    }
    function $505(l, e, s = []) {

        s.push($shift_expression(l, e, s));

        e.sp++;

        return s;
    }
    function $506(l, e, s = []) {

        s.push($shift_expression(l, e, s));

        e.sp++;

        return s;
    }
    function $507(l, e, s = []) {

        s.push($shift_expression(l, e, s));

        e.sp++;

        return s;
    }
    function $508(l, e, s = []) {

        s.push($shift_expression(l, e, s));

        e.sp++;

        return s;
    }
    function $509(l, e, s = []) {

        s.push($additive_expression(l, e, s));

        e.sp++;

        return s;
    }
    function $510(l, e, s = []) {

        s.push($additive_expression(l, e, s));

        e.sp++;

        return s;
    }
    function $511(l, e, s = []) {

        s.push($additive_expression(l, e, s));

        e.sp++;

        return s;
    }
    function $512(l, e, s = []) {

        s.push($multiplicative_expression(l, e, s));

        e.sp++;

        return s;
    }
    function $513(l, e, s = []) {

        s.push($multiplicative_expression(l, e, s));

        e.sp++;

        return s;
    }
    function $514(l, e, s = []) {

        s.push($exponentiation_expression(l, e, s));

        e.sp++;

        return s;
    }
    function $515(l, e, s = []) {

        s.push($exponentiation_expression(l, e, s));

        e.sp++;

        return s;
    }
    function $516(l, e, s = []) {

        s.push($exponentiation_expression(l, e, s));

        e.sp++;

        return s;
    }
    function $517(l, e, s = []) {

        s.push($exponentiation_expression(l, e, s));

        e.sp++;

        s = $765(l, e, s);

        return s;
    }
    function $short_circuit_expression(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_181(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $120(l, e, s); break;

                case 178: s = $109(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131: s = $118(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90: s = $51(l, e, s); break;

                case 83: s = $115(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![111].includes(a)) fail(l, e);

        return s;
    }
    function $519(l, e, s = []) {

        e.p = -1;


        if (_22.includes(l.tx)) {

            e.sp -= 2;

            var sym = s.slice(-2);

            s.splice(
                -2,
                2,
                { type: "DeleteExpression", nodes: [sym[1]], pos }
            );

            return (e.p = 126, s);
        }

        return s;
    }
    function $520(l, e, s = []) {

        e.p = -1;


        if (_22.includes(l.tx)) {

            e.sp -= 2;

            var sym = s.slice(-2);

            s.splice(
                -2,
                2,
                { type: "VoidExpression", nodes: [sym[1]], pos }
            );

            return (e.p = 126, s);
        }

        return s;
    }
    function $521(l, e, s = []) {

        e.p = -1;


        if (_22.includes(l.tx)) {

            e.sp -= 2;

            var sym = s.slice(-2);

            s.splice(
                -2,
                2,
                { type: "TypeofExpression", nodes: [sym[1]], pos }
            );

            return (e.p = 126, s);
        }

        return s;
    }
    function $522(l, e, s = []) { e.p = -1; s = $_258(l, e, s); return s; }
    function $523(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 2;

            var sym = s.slice(-2);

            s.splice(
                -2,
                2,
                {

                    type: "NumericLiteral",

                    value: sym[0],

                    computed_value: parseFloat(sym[0]),

                    value_data: sym[0],

                    pos,

                    NEGATIVE: !!sym[0]
                }
            );

            return (e.p = 173, s);
        }

        return s;
    }
    function $524(l, e, s = []) {

        e.p = -1;


        if (_30.includes(l.tx)) { return $766(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $525(l, e, s = []) { e.p = -1; s = $_258(l, e, s); return s; }
    function $526(l, e, s = []) { e.p = -1; s = $_258(l, e, s); return s; }
    function $element_list(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_261(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $120(l, e, s); break;

                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 156: s = $531(l, e, s); break;

                case 155:

                    s = $528(l, e, s);

                    if (e.p < 0) s = $356(l, e, s);

                    break;


                case 154: s = $529(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $530(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![154].includes(a)) fail(l, e);

        return s;
    }
    function $528(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_262(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $120(l, e, s); break;

                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 156: s = $768(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $767(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![154].includes(a)) fail(l, e);

        return s;
    }
    function $529(l, e, s = []) {

        e.p = -1;


        if (_1.includes(l.tx)) { return $769(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $530(l, e, s = []) { e.p = -1; s = $_264(l, e, s); return s; }
    function $531(l, e, s = []) { e.p = -1; s = $_264(l, e, s); return s; }
    function $533(l, e, s = []) { e.p = -1; s = $_258(l, e, s); return s; }
    function $534(l, e, s = []) { e.p = -1; s = $_265(l, e, s); return s; }
    function $535(l, e, s = []) { e.p = -1; s = $_266(l, e, s); return s; }
    function $536(l, e, s = []) { e.p = -1; s = $_265(l, e, s); return s; }
    function $537(l, e, s = []) {

        s.push($identifier_name(l, e, s));

        e.sp++;

        return s;
    }
    function $538(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 2;

            var sym = s.slice(-2);

            s.splice(
                -2,
                2,
                {

                    type: "CallExpression",

                    nodes: [sym[0], sym[1]],

                    pos,

                    TEMPLATE: false
                }
            );

            return (e.p = 97, s);
        }

        return s;
    }
    function $539(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_87(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $120(l, e, s); break;

                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $808(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![97].includes(a)) fail(l, e);

        return s;
    }
    function $540(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 2;

            var sym = s.slice(-2);

            s.splice(
                -2,
                2,
                {

                    type: "CallExpression",

                    nodes: [sym[0], null],

                    pos,

                    TEMPLATE: true
                }
            );

            return (e.p = 97, s);
        }

        return s;
    }
    function $542(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 2;

            var sym = s.slice(-2);

            s.splice(
                -2,
                2,
                { type: "CallExpression", nodes: [sym[0], sym[1]], pos }
            );

            return (e.p = 81, s);
        }

        return s;
    }
    function $543(l, e, s = []) { e.p = -1; s = $_266(l, e, s); return s; }
    function $544(l, e, s = []) { e.p = -1; s = $_266(l, e, s); return s; }
    function $545(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_87(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $120(l, e, s); break;

                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $812(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![92].includes(a)) fail(l, e);

        return s;
    }
    function $546(l, e, s = []) {

        s.push($identifier_name(l, e, s));

        e.sp++;

        return s;
    }
    function $547(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 2;

            var sym = s.slice(-2);

            s.splice(
                -2,
                2,
                {

                    type: "CallExpression",

                    nodes: [sym[0], sym[1]],

                    pos,

                    TEMPLATE: true
                }
            );

            return (e.p = 92, s);
        }

        return s;
    }
    function $548(l, e, s = []) {

        e.p = -1;


        if (["target"].includes(l.tx)) { return $775(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $549(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "(": s.push($arguments(l, e)); break;

            case ".": s = $546(l, e, _s(s, l, e, e.eh, _0)); break;

            case "[": s = $545(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $547(l, e, s); break;

                case 100: s = $776(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![92].includes(a)) fail(l, e);

        return s;
    }
    function $550(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "(": s = $779(l, e, _s(s, l, e, e.eh, _0)); break;

            case "*": s = $777(l, e, _s(s, l, e, e.eh, _0)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async": s = $11(l, e, _s(s, l, e, e.eh, _0)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;
                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $211(l, e, s); break;

                case 179: s = $778(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![67].includes(a)) fail(l, e);

        return s;
    }
    function $551(l, e, s = []) {

        e.p = -1;


        if (_27.includes(l.tx)) { return $780(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $552(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "(": s = $783(l, e, _s(s, l, e, e.eh, _0)); break;

            case "*": s = $781(l, e, _s(s, l, e, e.eh, _0)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async": s = $11(l, e, _s(s, l, e, e.eh, _0)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;
                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $211(l, e, s); break;

                case 179: s = $782(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![66].includes(a)) fail(l, e);

        return s;
    }
    function $553(l, e, s = []) { e.p = -1; s = $_277(l, e, s); return s; }
    function $554(l, e, s = []) { e.p = -1; s = $_277(l, e, s); return s; }
    function $555(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 2;

            var sym = s.slice(-2);

            s.splice(
                -2,
                2,
                {

                    type: "BigIntLiteral",

                    value: sym[0],

                    pos,

                    NEGATIVE: !!null
                }
            );

            return (e.p = 174, s);
        }

        return s;
    }
    function $556(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "(": s = $785(l, e, _s(s, l, e, e.eh, _0)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async": s = $11(l, e, _s(s, l, e, e.eh, _0)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;
                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $211(l, e, s); break;

                case 179: s = $784(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![67].includes(a)) fail(l, e);

        return s;
    }
    function $557(l, e, s = []) {

        e.p = -1;


        if (_33.includes(l.tx)) { return $786(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $558(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case ")": s = $790(l, e, _s(s, l, e, e.eh, _0)); break;

            case "...": s.push($binding_rest_element(l, e)); break;

            case "[": s.push($array_binding_pattern(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async": s = $11(l, e, _s(s, l, e, e.eh, _0)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "{": s.push($object_binding_pattern(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;
                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $211(l, e, s); break;

                case 179: s = $236(l, e, s); break;

                case 142: s = $793(l, e, s); break;

                case 141: s = $234(l, e, s); break;

                case 140: s = $233(l, e, s); break;

                case 134: s = $213(l, e, s); break;

                case 133: s = $212(l, e, s); break;

                case 132: s = $235(l, e, s); break;

                case 73: s = $239(l, e, s); break;

                case 72: s = $791(l, e, s); break;

                case 71:

                    s = $792(l, e, s);

                    if (e.p < 0) s = $238(l, e, s);

                    break;


                case 69: s = $789(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![67].includes(a)) fail(l, e);

        return s;
    }
    function $559(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "(": s = $788(l, e, _s(s, l, e, e.eh, _0)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async": s = $11(l, e, _s(s, l, e, e.eh, _0)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;
                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $211(l, e, s); break;

                case 179: s = $787(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![66].includes(a)) fail(l, e);

        return s;
    }
    function $560(l, e, s = []) {

        e.p = -1;


        if (_33.includes(l.tx)) { return $794(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $561(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case ")": s = $799(l, e, _s(s, l, e, e.eh, _0)); break;

            case "...": s.push($binding_rest_element(l, e)); break;

            case "[": s.push($array_binding_pattern(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async": s = $11(l, e, _s(s, l, e, e.eh, _0)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "{": s.push($object_binding_pattern(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;
                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $211(l, e, s); break;

                case 179: s = $236(l, e, s); break;

                case 142: s = $793(l, e, s); break;

                case 141: s = $234(l, e, s); break;

                case 140: s = $233(l, e, s); break;

                case 134: s = $213(l, e, s); break;

                case 133: s = $212(l, e, s); break;

                case 132: s = $235(l, e, s); break;

                case 73: s = $239(l, e, s); break;

                case 72: s = $791(l, e, s); break;

                case 71:

                    s = $792(l, e, s);

                    if (e.p < 0) s = $238(l, e, s);

                    break;


                case 69: s = $798(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![66].includes(a)) fail(l, e);

        return s;
    }
    function $562(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "extends": s.push($class_heritage(l, e)); break;

            case "{": s = $796(l, e, _s(s, l, e, e.eh, _0)); break;
        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 84: s = $795(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![83].includes(a)) fail(l, e);

        return s;
    }
    function $563(l, e, s = []) {

        e.p = -1;


        if (_35.includes(l.tx)) { return $797(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $564(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "*": s.push($method_definition(l, e)); break;

            case "-": s.push($numeric_literal(l, e)); break;

            case ";": s = $307(l, e, _s(s, l, e, e.eh, _0)); break;

            case "[": s.push($computed_property_name(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($method_definition(l, e));

                break;


            case "await": s = $262(l, e, _s(s, l, e, e.eh, _0)); break;

            case "break": s = $263(l, e, _s(s, l, e, e.eh, _0)); break;

            case "case": s = $264(l, e, _s(s, l, e, e.eh, _0)); break;

            case "catch": s = $265(l, e, _s(s, l, e, e.eh, _0)); break;

            case "class": s = $266(l, e, _s(s, l, e, e.eh, _0)); break;

            case "const": s = $267(l, e, _s(s, l, e, e.eh, _0)); break;

            case "continue": s = $268(l, e, _s(s, l, e, e.eh, _0)); break;

            case "debugger": s = $269(l, e, _s(s, l, e, e.eh, _0)); break;

            case "default": s = $270(l, e, _s(s, l, e, e.eh, _0)); break;

            case "delete": s = $271(l, e, _s(s, l, e, e.eh, _0)); break;

            case "do": s = $272(l, e, _s(s, l, e, e.eh, _0)); break;

            case "else": s = $273(l, e, _s(s, l, e, e.eh, _0)); break;

            case "export": s = $274(l, e, _s(s, l, e, e.eh, _0)); break;

            case "extends": s = $275(l, e, _s(s, l, e, e.eh, _0)); break;

            case "false": s = $261(l, e, _s(s, l, e, e.eh, _0)); break;

            case "finally": s = $276(l, e, _s(s, l, e, e.eh, _0)); break;

            case "for": s = $277(l, e, _s(s, l, e, e.eh, _0)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function": s = $278(l, e, _s(s, l, e, e.eh, _0)); break;

            case "get":

                var cp = l.copy(), _sym = null;

                _sym = $12(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($method_definition(l, e));

                break;


            case "if": s = $279(l, e, _s(s, l, e, e.eh, _0)); break;

            case "implements": s = $296(l, e, _s(s, l, e, e.eh, _0)); break;

            case "import": s = $280(l, e, _s(s, l, e, e.eh, _0)); break;

            case "in": s = $281(l, e, _s(s, l, e, e.eh, _0)); break;

            case "instanceof": s = $282(l, e, _s(s, l, e, e.eh, _0)); break;

            case "interface": s = $299(l, e, _s(s, l, e, e.eh, _0)); break;

            case "new": s = $283(l, e, _s(s, l, e, e.eh, _0)); break;

            case "null": s = $259(l, e, _s(s, l, e, e.eh, _0)); break;

            case "package": s = $297(l, e, _s(s, l, e, e.eh, _0)); break;

            case "private": s = $300(l, e, _s(s, l, e, e.eh, _0)); break;

            case "protected": s = $298(l, e, _s(s, l, e, e.eh, _0)); break;

            case "public": s = $301(l, e, _s(s, l, e, e.eh, _0)); break;

            case "return": s = $284(l, e, _s(s, l, e, e.eh, _0)); break;

            case "set":

                var cp = l.copy(), _sym = null;

                _sym = $13(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($method_definition(l, e));

                break;


            case "static": s.push($class_element(l, e)); break;

            case "super": s = $285(l, e, _s(s, l, e, e.eh, _0)); break;

            case "switch": s = $286(l, e, _s(s, l, e, e.eh, _0)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $287(l, e, _s(s, l, e, e.eh, _0)); break;

            case "throw": s = $288(l, e, _s(s, l, e, e.eh, _0)); break;

            case "true": s = $260(l, e, _s(s, l, e, e.eh, _0)); break;

            case "try": s = $289(l, e, _s(s, l, e, e.eh, _0)); break;

            case "typeof": s = $290(l, e, _s(s, l, e, e.eh, _0)); break;

            case "var": s = $291(l, e, _s(s, l, e, e.eh, _0)); break;

            case "void": s = $292(l, e, _s(s, l, e, e.eh, _0)); break;

            case "while": s = $293(l, e, _s(s, l, e, e.eh, _0)); break;

            case "with": s = $294(l, e, _s(s, l, e, e.eh, _0)); break;

            case "yield": s = $295(l, e, _s(s, l, e, e.eh, _0)); break;

            case "}": s = $807(l, e, _s(s, l, e, e.eh, _0)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1: s = $135(l, e, _s(s, l, e, e.eh, _0)); break;
                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 186: s = $257(l, e, s); break;

                case 185: s = $254(l, e, s); break;

                case 184: s = $258(l, e, s); break;

                case 183: s = $255(l, e, s); break;

                case 182: s = $256(l, e, s); break;

                case 181: s = $251(l, e, s); break;

                case 173: s = $253(l, e, s); break;

                case 169: s = $252(l, e, s); break;

                case 150: s = $250(l, e, s); break;

                case 149: s = $249(l, e, s); break;

                case 148: s = $248(l, e, s); break;

                case 87: s = $308(l, e, s); break;

                case 86: s = $305(l, e, s); break;

                case 85:

                    s = $806(l, e, s);

                    if (e.p < 0) s = $306(l, e, s);

                    break;


                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![83].includes(a)) fail(l, e);

        return s;
    }
    function $566(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "extends": s.push($class_heritage(l, e)); break;

            case "{": s = $802(l, e, _s(s, l, e, e.eh, _0)); break;
        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 84: s = $801(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![82].includes(a)) fail(l, e);

        return s;
    }
    function $567(l, e, s = []) {

        e.p = -1;


        if (_35.includes(l.tx)) { return $803(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $568(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "*": s.push($method_definition(l, e)); break;

            case "-": s.push($numeric_literal(l, e)); break;

            case ";": s = $307(l, e, _s(s, l, e, e.eh, _0)); break;

            case "[": s.push($computed_property_name(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($method_definition(l, e));

                break;


            case "await": s = $262(l, e, _s(s, l, e, e.eh, _0)); break;

            case "break": s = $263(l, e, _s(s, l, e, e.eh, _0)); break;

            case "case": s = $264(l, e, _s(s, l, e, e.eh, _0)); break;

            case "catch": s = $265(l, e, _s(s, l, e, e.eh, _0)); break;

            case "class": s = $266(l, e, _s(s, l, e, e.eh, _0)); break;

            case "const": s = $267(l, e, _s(s, l, e, e.eh, _0)); break;

            case "continue": s = $268(l, e, _s(s, l, e, e.eh, _0)); break;

            case "debugger": s = $269(l, e, _s(s, l, e, e.eh, _0)); break;

            case "default": s = $270(l, e, _s(s, l, e, e.eh, _0)); break;

            case "delete": s = $271(l, e, _s(s, l, e, e.eh, _0)); break;

            case "do": s = $272(l, e, _s(s, l, e, e.eh, _0)); break;

            case "else": s = $273(l, e, _s(s, l, e, e.eh, _0)); break;

            case "export": s = $274(l, e, _s(s, l, e, e.eh, _0)); break;

            case "extends": s = $275(l, e, _s(s, l, e, e.eh, _0)); break;

            case "false": s = $261(l, e, _s(s, l, e, e.eh, _0)); break;

            case "finally": s = $276(l, e, _s(s, l, e, e.eh, _0)); break;

            case "for": s = $277(l, e, _s(s, l, e, e.eh, _0)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function": s = $278(l, e, _s(s, l, e, e.eh, _0)); break;

            case "get":

                var cp = l.copy(), _sym = null;

                _sym = $12(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($method_definition(l, e));

                break;


            case "if": s = $279(l, e, _s(s, l, e, e.eh, _0)); break;

            case "implements": s = $296(l, e, _s(s, l, e, e.eh, _0)); break;

            case "import": s = $280(l, e, _s(s, l, e, e.eh, _0)); break;

            case "in": s = $281(l, e, _s(s, l, e, e.eh, _0)); break;

            case "instanceof": s = $282(l, e, _s(s, l, e, e.eh, _0)); break;

            case "interface": s = $299(l, e, _s(s, l, e, e.eh, _0)); break;

            case "new": s = $283(l, e, _s(s, l, e, e.eh, _0)); break;

            case "null": s = $259(l, e, _s(s, l, e, e.eh, _0)); break;

            case "package": s = $297(l, e, _s(s, l, e, e.eh, _0)); break;

            case "private": s = $300(l, e, _s(s, l, e, e.eh, _0)); break;

            case "protected": s = $298(l, e, _s(s, l, e, e.eh, _0)); break;

            case "public": s = $301(l, e, _s(s, l, e, e.eh, _0)); break;

            case "return": s = $284(l, e, _s(s, l, e, e.eh, _0)); break;

            case "set":

                var cp = l.copy(), _sym = null;

                _sym = $13(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($method_definition(l, e));

                break;


            case "static": s.push($class_element(l, e)); break;

            case "super": s = $285(l, e, _s(s, l, e, e.eh, _0)); break;

            case "switch": s = $286(l, e, _s(s, l, e, e.eh, _0)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $287(l, e, _s(s, l, e, e.eh, _0)); break;

            case "throw": s = $288(l, e, _s(s, l, e, e.eh, _0)); break;

            case "true": s = $260(l, e, _s(s, l, e, e.eh, _0)); break;

            case "try": s = $289(l, e, _s(s, l, e, e.eh, _0)); break;

            case "typeof": s = $290(l, e, _s(s, l, e, e.eh, _0)); break;

            case "var": s = $291(l, e, _s(s, l, e, e.eh, _0)); break;

            case "void": s = $292(l, e, _s(s, l, e, e.eh, _0)); break;

            case "while": s = $293(l, e, _s(s, l, e, e.eh, _0)); break;

            case "with": s = $294(l, e, _s(s, l, e, e.eh, _0)); break;

            case "yield": s = $295(l, e, _s(s, l, e, e.eh, _0)); break;

            case "}": s = $811(l, e, _s(s, l, e, e.eh, _0)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1: s = $135(l, e, _s(s, l, e, e.eh, _0)); break;
                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 186: s = $257(l, e, s); break;

                case 185: s = $254(l, e, s); break;

                case 184: s = $258(l, e, s); break;

                case 183: s = $255(l, e, s); break;

                case 182: s = $256(l, e, s); break;

                case 181: s = $251(l, e, s); break;

                case 173: s = $253(l, e, s); break;

                case 169: s = $252(l, e, s); break;

                case 150: s = $250(l, e, s); break;

                case 149: s = $249(l, e, s); break;

                case 148: s = $248(l, e, s); break;

                case 87: s = $308(l, e, s); break;

                case 86: s = $305(l, e, s); break;

                case 85:

                    s = $810(l, e, s);

                    if (e.p < 0) s = $306(l, e, s);

                    break;


                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![82].includes(a)) fail(l, e);

        return s;
    }
    function $569(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "$": s = $429(l, e, _s(s, l, e, e.eh, _0)); break;

            case "_": s = $427(l, e, _s(s, l, e, e.eh, _0)); break;

            case "!=":

            case "!==":

            case "%":

            case "%=":

            case "&":

            case "&&":

            case "&=":

            case "(":

            case ")":

            case "*":

            case "**":

            case "**=":

            case "*=":

            case "+":

            case "++":

            case "+=":

            case ",":

            case "-":

            case "--":

            case "-=":

            case ".":

            case "/":

            case "/=":

            case ":":

            case ";":

            case "<":

            case "<<":

            case "<<=":

            case "<=":

            case "=":

            case "==":

            case "===":

            case ">":

            case ">=":

            case ">>":

            case ">>=":

            case ">>>":

            case ">>>=":

            case "?":

            case "?.":

            case "??":

            case "[":

            case "]":

            case "^":

            case "^=":

            case "`":

            case "in":

            case "instanceof":

            case "of":

            case "{":

            case "|":

            case "|=":

            case "||":

            case "}":

                e.sp -= 2;

                var sym = s.slice(-2);

                s.splice(-2, 2, { type: "RegexLiteral", value: sym[0], pos });

                return (e.p = 143, s);


            default:

                switch (l.ty) {

                    case 2: s = $414(l, e, _s(s, l, e, e.eh, _0)); break;
                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 208:

                    s = $425(l, e, s);

                    if (e.p < 0) s = $426(l, e, s);

                    break;


                case 207: s = $805(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![143].includes(a)) fail(l, e);

        return s;
    }
    function $570(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 2;

            var sym = s.slice(-2);

            s.splice(
                -2,
                2,
                {

                    type: "Template",

                    nodes: [{

                        quote_type: "",

                        type: "StringLiteral",

                        value: sym[0],

                        pos
                    }],

                    NO_SUBSTITUTE: true,

                    pos
                }
            );

            return (e.p = 158, s);
        }

        return s;
    }
    function $572(l, e, s = []) {

        e.p = -1;


        if (_24.includes(l.tx)) {

            e.sp -= 2;

            var sym = s.slice(-2);

            s.splice(
                -2,
                2,
                { type: "NewExpression", nodes: [sym[1]], pos }
            );

            return (e.p = 91, s);
        }

        return s;
    }
    function $573(l, e, s = []) {

        e.p = -1;


        if (_52.includes(l.tx)) { return $809(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $574(l, e, s = []) {

        e.p = -1;


        if (l.END || _67.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 2;

            var sym = s.slice(-2);

            s.splice(
                -2,
                2,
                { type: "BlockStatement", nodes: null || [], pos }
            );

            return (e.p = 29, s);
        }

        return s;
    }
    function $575(l, e, s = []) {

        s.push($identifier_name(l, e, s));

        e.sp++;

        return s;
    }
    function $576(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_87(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $120(l, e, s); break;

                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $835(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![93].includes(a)) fail(l, e);

        return s;
    }
    function $577(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 2;

            var sym = s.slice(-2);

            s.splice(-2, 2, { type: "SuperCall", nodes: [sym[1]], pos });

            return (e.p = 98, s);
        }

        return s;
    }
    function $578(l, e, s = []) {

        e.p = -1;


        if (["meta"].includes(l.tx)) { return $817(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $579(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_87(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $120(l, e, s); break;

                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $833(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![99].includes(a)) fail(l, e);

        return s;
    }
    function $586(l, e, s = []) {

        s.push($bitwise_or_expression(l, e, s));

        e.sp++;

        return s;
    }
    function $587(l, e, s = []) {

        e.p = -1;


        if (_22.includes(l.tx)) {

            e.sp -= 2;

            var sym = s.slice(-2);

            s.splice(
                -2,
                2,
                { type: "AwaitExpression", nodes: [sym[1]], pos }
            );

            return (e.p = 107, s);
        }

        return s;
    }
    function $588(l, e, s = []) { s.push($concise_body(l, e, s)); e.sp++; return s; }
    function $589(l, e, s = []) { s.push($labeled_item(l, e, s)); e.sp++; return s; }
    function $590(l, e, s = []) {

        e.p = -1;


        if (_8.includes(l.tx)) { return $823(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $591(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_87(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $120(l, e, s); break;

                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $855(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![33].includes(a)) fail(l, e);

        return s;
    }
    function $592(l, e, s = []) {

        e.p = -1;


        if (_9.includes(l.tx)) {

            e.sp -= 2;

            var sym = s.slice(-2);

            s.splice(-2, 2, { type: "YieldExpression", nodes: [], pos });

            return (e.p = 77, s);
        }

        return s;
    }
    function $593(l, e, s = []) {

        s.push($assignment_expression(l, e, s));

        e.sp++;

        return s;
    }
    function $594(l, e, s = []) {

        e.p = -1;


        if (_9.includes(l.tx)) {

            e.sp -= 2;

            var sym = s.slice(-2);

            s.splice(
                -2,
                2,
                {

                    type: "YieldExpression",

                    nodes: [sym[1]],

                    pos,

                    GENERATOR: !!null
                }
            );

            return (e.p = 77, s);
        }

        return s;
    }
    function $595(l, e, s = []) {

        e.p = -1;


        if (_65.includes(l.tx) || _41.includes(l.ty)) {

            e.sp -= 1;

            return (e.p = 76, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }
    function $596(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_87(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $120(l, e, s); break;

                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $836(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![36].includes(a)) fail(l, e);

        return s;
    }
    function $597(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "!": s.push($unary_expression(l, e)); break;

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($parenthesized(cp, e));

                if (e.p !== 131) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push(
                    $cover_parenthesized_expression_and_arrow_parameter_list(l, e)
                );

                break;


            case "++": s.push($update_expression(l, e)); break;

            case "+": s.push($unary_expression(l, e)); break;

            case "--": s.push($update_expression(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($unary_expression(cp, e));

                if (e.p !== 126) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case ";": s = $881(l, e, _s(s, l, e, e.eh, _0)); break;

            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($arrow_function(l, e));

                break;


            case "await": s.push($await_expression(l, e)); break;

            case "class": s.push($class_expression(l, e)); break;

            case "const": s = $188(l, e, _s(s, l, e, e.eh, _0)); break;

            case "delete": s.push($unary_expression(l, e)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function": s.push($function_expression(l, e)); break;

            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "import":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($import_meta(cp, e));

                if (e.p !== 95) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($import_call(l, e));

                break;


            case "let": s = $187(l, e, _s(s, l, e, e.eh, _0)); break;

            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($new_expression(cp, e));

                if (e.p !== 91) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($new_target(l, e));

                break;


            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($super_property(cp, e));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($super_call(l, e));

                break;


            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "typeof": s.push($unary_expression(l, e)); break;

            case "var":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($iteration_statement_group_168_104(cp, e));

                if (e.p !== 34) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($iteration_statement_group_073_105(l, e));

                break;


            case "void": s.push($unary_expression(l, e)); break;

            case "yield": s.push($yield_expression(l, e)); break;

            case "{": s.push($object_literal(l, e)); break;

            case "~": s.push($unary_expression(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $120(l, e, s); break;

                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    if (e.p < 0) s = $885(l, e, s);

                    break;


                case 89:

                    s = $882(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                case 62:

                    s = $186(l, e, s);

                    if (e.p < 0) s = $886(l, e, s);

                    break;


                case 61: s = $879(l, e, s); break;

                case 37: s = $887(l, e, s); break;

                case 35: s = $880(l, e, s); break;

                case 34: s = $878(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![36].includes(a)) fail(l, e);

        return s;
    }
    function $598(l, e, s = []) {

        e.p = -1;


        if (_33.includes(l.tx)) { return $829(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $599(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_87(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $120(l, e, s); break;

                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $837(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![44].includes(a)) fail(l, e);

        return s;
    }
    function $600(l, e, s = []) {

        e.p = -1;


        if (_8.includes(l.tx)) { return $830(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $601(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _69.includes(l.ty)) {

            e.sp -= 2;

            var sym = s.slice(-2);

            s.splice(
                -2,
                2,
                { type: "ContinueStatement", nodes: null ? [null] : [], pos }
            );

            return (e.p = 39, s);
        }

        return s;
    }
    function $602(l, e, s = []) {

        e.p = -1;


        if (_8.includes(l.tx)) { return $831(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $603(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 2;

            var sym = s.slice(-2);

            s.splice(-2, 2, { type: "BreakStatement", nodes: [null], pos });

            return (e.p = 40, s);
        }

        return s;
    }
    function $604(l, e, s = []) {

        e.p = -1;


        if (_68.includes(l.tx)) { return $832(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $605(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_87(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $120(l, e, s); break;

                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $838(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![43].includes(a)) fail(l, e);

        return s;
    }
    function $606(l, e, s = []) {

        s.push($template_spans(l, e, s));

        e.sp++;

        return s;
    }
    function $607(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "catch": s.push($catch(l, e)); break;

            case "finally": s.push($finally(l, e)); break;
        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 54: s = $840(l, e, s); break;

                case 53: s = $839(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![52].includes(a)) fail(l, e);

        return s;
    }
    function $608(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 2;

            var sym = s.slice(-2);

            s.splice(-2, 2, { type: "DebuggerStatement", pos });

            return (e.p = 56, s);
        }

        return s;
    }
    function $609(l, e, s = []) {

        e.p = -1;


        if (_8.includes(l.tx)) { return $843(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $610(l, e, s = []) {

        e.p = -1;


        if (["while"].includes(l.tx)) { return $844(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $611(l, e, s = []) {

        e.p = -1;


        if (_8.includes(l.tx)) { return $846(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $612(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 2;

            var sym = s.slice(-2);

            s.splice(-2, 2, { type: "ReturnStatement", nodes: [], pos });

            return (e.p = 41, s);
        }

        return s;
    }
    function $613(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_247(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 12: s = $847(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![6].includes(a)) fail(l, e);

        return s;
    }
    function $614(l, e, s = []) {

        e.p = -1;


        if (_8.includes(l.tx)) { return $848(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $615(l, e, s = []) {

        e.p = -1;


        switch (l.tx) {

            case ",": return $849(l, e, _s(s, l, e, e.eh, _0));

            case "from":

                e.sp -= 1;

                var sym = s.slice(-1);

                s.splice(-1, 1, { type: "ImportClause", nodes: [sym[0]], pos });

                return (e.p = 7, s);

        }

        return s;
    }
    function $616(l, e, s = []) { e.p = -1; s = $_323(l, e, s); return s; }
    function $617(l, e, s = []) { e.p = -1; s = $_323(l, e, s); return s; }
    function $618(l, e, s = []) {

        e.p = -1;


        if ([",", "from"].includes(l.tx)) {

            e.sp -= 1;

            var sym = s.slice(-1);

            s.splice(-1, 1, sym[0].type = "IdentifierDefault", sym[0]);

            return (e.p = 8, s);
        }

        return s;
    }
    function $621(l, e, s = []) {

        e.p = -1;


        if (_8.includes(l.tx)) {

            e.sp -= 1;

            return (e.p = 14, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }
    function $622(l, e, s = []) {

        e.p = -1;


        if (_8.includes(l.tx)) { return $854(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $623(l, e, s = []) {

        e.p = -1;


        if (_70.includes(l.tx)) { return $856(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $624(l, e, s = []) {

        e.p = -1;


        switch (l.tx) {

            case ",": return $858(l, e, _s(s, l, e, e.eh, _0));

            case "]": return $857(l, e, _s(s, l, e, e.eh, _0));
        }

        return s;
    }
    function $625(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 2;

            var sym = s.slice(-2);

            s.splice(-2, 2, { type: "ArrayLiteral", nodes: [], pos });

            return (e.p = 153, s);
        }

        return s;
    }
    function $627(l, e, s = []) {

        e.p = -1;


        if (_40.includes(l.tx)) {

            e.sp -= 2;

            var sym = s.slice(-2);

            s.splice(-2, 2, ([...sym[0], sym[1]]));

            return (e.p = 47, s);
        }

        return s;
    }
    function $628(l, e, s = []) {

        e.p = -1;


        if (_34.includes(l.tx)) { return $859(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $630(l, e, s = []) {

        s.push($variable_declaration(l, e, s));

        e.sp++;

        return s;
    }
    function $631(l, e, s = []) { e.p = -1; s = $_336(l, e, s); return s; }
    function $633(l, e, s = []) { e.p = -1; s = $_336(l, e, s); return s; }
    function $634(l, e, s = []) {

        e.p = -1;


        if (_42.includes(l.tx)) {

            e.sp -= 2;

            var sym = s.slice(-2);

            s.splice(-2, 2, { type: "ObjectBinding", nodes: [], pos });

            return (e.p = 133, s);
        }

        return s;
    }
    function $635(l, e, s = []) {

        e.p = -1;


        if (_52.includes(l.tx)) { return $861(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $636(l, e, s = []) {

        e.p = -1;


        switch (l.tx) {

            case ",": return $863(l, e, _s(s, l, e, e.eh, _0));

            case "}": return $862(l, e, _s(s, l, e, e.eh, _0));
        }

        return s;
    }
    function $638(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "...": s.push($binding_rest_element(l, e)); break;

            case "]": s = $866(l, e, _s(s, l, e, e.eh, _0)); break;
        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 142: s = $865(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![134].includes(a)) fail(l, e);

        return s;
    }
    function $639(l, e, s = []) {

        e.p = -1;


        switch (l.tx) {

            case ",": return $868(l, e, _s(s, l, e, e.eh, _0));

            case "]": return $867(l, e, _s(s, l, e, e.eh, _0));
        }

        return s;
    }
    function $640(l, e, s = []) {

        e.p = -1;


        if (_70.includes(l.tx)) { return $869(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $641(l, e, s = []) {

        e.p = -1;


        if (_42.includes(l.tx)) {

            e.sp -= 2;

            var sym = s.slice(-2);

            s.splice(-2, 2, { type: "ArrayBinding", nodes: [], pos });

            return (e.p = 134, s);
        }

        return s;
    }
    function $643(l, e, s = []) {

        s.push($variable_declaration(l, e, s));

        e.sp++;

        return s;
    }
    function $644(l, e, s = []) {

        s.push($lexical_binding(l, e, s));

        e.sp++;

        return s;
    }
    function $645(l, e, s = []) { e.p = -1; s = $_344(l, e, s); return s; }
    function $646(l, e, s = []) { e.p = -1; s = $_344(l, e, s); return s; }
    function $647(l, e, s = []) {

        s.push($lexical_binding(l, e, s));

        e.sp++;

        return s;
    }
    function $array_literal(l, e, s = []) {

        e.p = -1;


        if (_49.includes(l.tx)) { s.push($array_literal(l, e)); }

        return s;
    }
    function $650(l, e, s = []) {

        s.push($formal_parameter(l, e, s));

        e.sp++;

        return s;
    }
    function $651(l, e, s = []) {

        e.p = -1;


        if (_46.includes(l.tx)) {

            e.sp -= 2;

            var sym = s.slice(-2);

            s.splice(
                -2,
                2,
                sym[1] ? {

                    type: "BindingExpression",

                    nodes: [sym[0], sym[1]],

                    pos
                } : sym[0]
            );

            return (e.p = 140, s);
        }

        return s;
    }
    function $652(l, e, s = []) {

        e.p = -1;


        if (_46.includes(l.tx)) {

            e.sp -= 2;

            var sym = s.slice(-2);

            s.splice(
                -2,
                2,
                sym[1] ? {

                    type: "BindingExpression",

                    nodes: [sym[0], sym[1]],

                    pos
                } : sym[0]
            );

            return (e.p = 141, s);
        }

        return s;
    }
    function $653(l, e, s = []) {

        s.push($formal_parameter(l, e, s));

        e.sp++;

        return s;
    }
    function $654(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_153(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 186: s = $257(l, e, s); break;

                case 185: s = $254(l, e, s); break;

                case 184: s = $258(l, e, s); break;

                case 183: s = $255(l, e, s); break;

                case 182: s = $256(l, e, s); break;

                case 181: s = $251(l, e, s); break;

                case 173: s = $253(l, e, s); break;

                case 169: s = $252(l, e, s); break;

                case 150: s = $250(l, e, s); break;

                case 149: s = $249(l, e, s); break;

                case 148: s = $888(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![87].includes(a)) fail(l, e);

        return s;
    }
    function $655(l, e, s = []) {

        e.p = -1;


        if (_33.includes(l.tx)) { return $889(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $656(l, e, s = []) {

        e.p = -1;


        if (_33.includes(l.tx)) { return $890(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $657(l, e, s = []) {

        e.p = -1;


        if (_33.includes(l.tx)) { return $891(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $658(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case ")": s = $894(l, e, _s(s, l, e, e.eh, _0)); break;

            case "...": s.push($binding_rest_element(l, e)); break;

            case "[": s.push($array_binding_pattern(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async": s = $11(l, e, _s(s, l, e, e.eh, _0)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "{": s.push($object_binding_pattern(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;
                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $211(l, e, s); break;

                case 179: s = $236(l, e, s); break;

                case 142: s = $793(l, e, s); break;

                case 141: s = $234(l, e, s); break;

                case 140: s = $233(l, e, s); break;

                case 134: s = $213(l, e, s); break;

                case 133: s = $212(l, e, s); break;

                case 132: s = $235(l, e, s); break;

                case 73: s = $239(l, e, s); break;

                case 72: s = $791(l, e, s); break;

                case 71:

                    s = $792(l, e, s);

                    if (e.p < 0) s = $238(l, e, s);

                    break;


                case 69: s = $895(l, e, s); break;

                case 68: s = $893(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![87].includes(a)) fail(l, e);

        return s;
    }
    function $659(l, e, s = []) {

        e.p = -1;


        if (_33.includes(l.tx)) { return $892(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $660(l, e, s = []) {

        e.p = -1;


        if (_70.includes(l.tx)) { return $896(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $661(l, e, s = []) {

        e.p = -1;


        if (_44.includes(l.tx) || _41.includes(l.ty)) {

            e.sp -= 2;

            var sym = s.slice(-2);

            s.splice(-2, 2, [...sym[0], sym[1]]);

            return (e.p = 22, s);
        }

        return s;
    }
    function $662(l, e, s = []) {

        e.p = -1;


        if (_48.includes(l.tx) || _41.includes(l.ty)) {

            e.sp -= 2;

            var sym = s.slice(-2);

            s.splice(-2, 2, sym[0].concat(sym[1]));

            return (e.p = 85, s);
        }

        return s;
    }
    function $663(l, e, s = []) {

        e.p = -1;


        if (_48.includes(l.tx) || _41.includes(l.ty)) {

            e.sp -= 2;

            var sym = s.slice(-2);

            s.splice(-2, 2, sym[0]);

            return (e.p = 85, s);
        }

        return s;
    }
    function $665(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 2;

            var sym = s.slice(-2);

            s.splice(
                -2,
                2,
                {

                    type: "CallExpression",

                    nodes: [sym[0], sym[1]],

                    pos,

                    TEMPLATE: false
                }
            );

            return (e.p = 105, s);
        }

        return s;
    }
    function $666(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_87(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $120(l, e, s); break;

                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $898(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![105].includes(a)) fail(l, e);

        return s;
    }
    function $667(l, e, s = []) {

        s.push($identifier_name(l, e, s));

        e.sp++;

        return s;
    }
    function $668(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 2;

            var sym = s.slice(-2);

            s.splice(
                -2,
                2,
                {

                    type: "CallExpression",

                    nodes: [sym[0], sym[1]],

                    pos,

                    TEMPLATE: true
                }
            );

            return (e.p = 105, s);
        }

        return s;
    }
    function $669(l, e, s = []) { e.p = -1; s = $_361(l, e, s); return s; }
    function $670(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_87(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $120(l, e, s); break;

                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $900(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![105].includes(a)) fail(l, e);

        return s;
    }
    function $671(l, e, s = []) { e.p = -1; s = $_361(l, e, s); return s; }
    function $672(l, e, s = []) { e.p = -1; s = $_361(l, e, s); return s; }
    function $673(l, e, s = []) {

        s.push($argument_list_group_1179_111(l, e, s));

        e.sp++;

        return s;
    }
    function $674(l, e, s = []) {

        e.p = -1;


        if (_45.includes(l.tx)) {

            e.sp -= 2;

            var sym = s.slice(-2);

            s.splice(-2, 2, { type: "Spread", nodes: [sym[1]], pos });

            return (e.p = 101, s);
        }

        return s;
    }
    function $675(l, e, s = []) {

        s.push($argument_list_group_1179_111(l, e, s));

        e.sp++;

        return s;
    }
    function $676(l, e, s = []) {

        s.push($binding_property(l, e, s));

        e.sp++;

        return s;
    }
    function $677(l, e, s = []) {

        s.push($binding_element(l, e, s));

        e.sp++;

        return s;
    }
    function $678(l, e, s = []) {

        s.push($binding_elision_element(l, e, s));

        e.sp++;

        return s;
    }
    function $680(l, e, s = []) {

        e.p = -1;


        if (_51.includes(l.tx) || _41.includes(l.ty)) {

            e.sp -= 2;

            var sym = s.slice(-2);

            s.splice(
                -2,
                2,
                { type: "Elision", count: sym[0].count + 1, pos }
            );

            return (e.p = 155, s);
        }

        return s;
    }
    function $681(l, e, s = []) {

        s.push($property_definition(l, e, s));

        e.sp++;

        return s;
    }
    function $683(l, e, s = []) {

        s.push($assignment_expression(l, e, s));

        e.sp++;

        return s;
    }
    function $685(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 2;

            var sym = s.slice(-2);

            s.splice(-2, 2, sym[0].push(sym[1]), sym[0]);

            return (e.p = 160, s);
        }

        return s;
    }
    function $686(l, e, s = []) { s.push($expression(l, e, s)); e.sp++; return s; }
    function $687(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 2;

            var sym = s.slice(-2);

            s.splice(-2, 2, { type: "TemplateTail", value: sym[0], pos });

            return (e.p = 164, s);
        }

        return s;
    }
    function $702(l, e, s = []) { e.p = -1; s = $_375(l, e, s); return s; }
    function $703(l, e, s = []) { e.p = -1; s = $_375(l, e, s); return s; }
    function $704(l, e, s = []) { e.p = -1; s = $_375(l, e, s); return s; }
    function $705(l, e, s = []) { e.p = -1; s = $_375(l, e, s); return s; }
    function $706(l, e, s = []) { e.p = -1; s = $_375(l, e, s); return s; }
    function $707(l, e, s = []) { e.p = -1; s = $_375(l, e, s); return s; }
    function $708(l, e, s = []) { e.p = -1; s = $_375(l, e, s); return s; }
    function $709(l, e, s = []) { e.p = -1; s = $_375(l, e, s); return s; }
    function $711(l, e, s = []) { e.p = -1; s = $_377(l, e, s); return s; }
    function $712(l, e, s = []) { e.p = -1; s = $_377(l, e, s); return s; }
    function $713(l, e, s = []) { e.p = -1; s = $_377(l, e, s); return s; }
    function $714(l, e, s = []) { e.p = -1; s = $_377(l, e, s); return s; }
    function $715(l, e, s = []) { e.p = -1; s = $_377(l, e, s); return s; }
    function $716(l, e, s = []) { e.p = -1; s = $_377(l, e, s); return s; }
    function $717(l, e, s = []) { e.p = -1; s = $_377(l, e, s); return s; }
    function $718(l, e, s = []) { e.p = -1; s = $_377(l, e, s); return s; }
    function $719(l, e, s = []) { e.p = -1; s = $_377(l, e, s); return s; }
    function $720(l, e, s = []) {

        e.p = -1;


        if (_60.includes(l.tx) || _61.includes(l.ty)) {

            e.sp -= 2;

            var sym = s.slice(-2);

            s.splice(-2, 2, sym[0] + sym[1]);

            return (e.p = 205, s);
        }

        return s;
    }
    function $721(l, e, s = []) {

        e.p = -1;


        if (_60.includes(l.tx) || _61.includes(l.ty)) {

            e.sp -= 2;

            return (e.p = 204, (s.splice(-2, 2, s[s.length - 1]), s));
        }

        return s;
    }
    function $729(l, e, s = []) {

        e.p = -1;


        if (_52.includes(l.tx)) { return $908(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $730(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 3;

            var sym = s.slice(-3);

            s.splice(-3, 3, { type: "ObjectLiteral", nodes: sym[1], pos });

            return (e.p = 145, s);
        }

        return s;
    }
    function $731(l, e, s = []) {

        e.p = -1;


        if (_8.includes(l.tx)) { return $909(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $733(l, e, s = []) {

        e.p = -1;


        if (_8.includes(l.tx)) { return $911(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $734(l, e, s = []) {

        e.p = -1;


        if (l.END || _38.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 3;

            var sym = s.slice(-3);

            s.splice(
                -3,
                3,
                {

                    type: "ExportDeclaration",

                    nodes: [sym[1], null],

                    DEFAULT: false,

                    pos
                }
            );

            return (e.p = 16, s);
        }

        return s;
    }
    function $738(l, e, s = []) {

        e.p = -1;


        if (_9.includes(l.tx)) {

            e.sp -= 3;

            var sym = s.slice(-3);

            s.splice(
                -3,
                3,
                (sym[0].type == "ExpressionList" ? (sym[0].nodes.push(sym[2]), sym[0]) : { type: "ExpressionList", nodes: [sym[0], sym[2]], pos })
            );

            return (e.p = 89, s);
        }

        return s;
    }
    function $739(l, e, s = []) {

        e.p = -1;


        if (_9.includes(l.tx)) {

            e.sp -= 3;

            var sym = s.slice(-3);

            s.splice(
                -3,
                3,
                {

                    type: "AssignmentExpression",

                    symbol: sym[1],

                    nodes: [sym[0], sym[2]],

                    pos
                }
            );

            return (e.p = 108, s);
        }

        return s;
    }
    function $740(l, e, s = []) {

        e.p = -1;


        if (_9.includes(l.tx)) {

            e.sp -= 3;

            var sym = s.slice(-3);

            s.splice(
                -3,
                3,
                {

                    type: "AssignmentExpression",

                    symbol: "=",

                    nodes: [sym[0], sym[2]],

                    pos
                }
            );

            return (e.p = 108, s);
        }

        return s;
    }
    function $741(l, e, s = []) {

        e.p = -1;


        if (_34.includes(l.tx)) { return $915(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $742(l, e, s = []) {

        e.p = -1;


        if (_12.includes(l.tx)) {

            e.sp -= 3;

            var sym = s.slice(-3);

            s.splice(
                -3,
                3,
                {

                    type: "LogicalExpression",

                    symbol: sym[1],

                    nodes: [sym[0], sym[2]],

                    pos
                }
            );

            return (e.p = 112, s);
        }

        return s;
    }
    function $743(l, e, s = []) {

        e.p = -1;


        if (_13.includes(l.tx)) {

            e.sp -= 3;

            var sym = s.slice(-3);

            s.splice(
                -3,
                3,
                {

                    type: "LogicalExpression",

                    symbol: sym[1],

                    nodes: [sym[0], sym[2]],

                    pos
                }
            );

            return (e.p = 113, s);
        }

        return s;
    }
    function $744(l, e, s = []) {

        e.p = -1;


        if (_14.includes(l.tx)) {

            e.sp -= 3;

            var sym = s.slice(-3);

            s.splice(
                -3,
                3,
                {

                    type: "BitwiseExpression",

                    symbol: sym[1],

                    nodes: [sym[0], sym[2]],

                    pos
                }
            );

            return (e.p = 117, s);
        }

        return s;
    }
    function $745(l, e, s = []) {

        e.p = -1;


        if (_15.includes(l.tx)) {

            e.sp -= 3;

            var sym = s.slice(-3);

            s.splice(
                -3,
                3,
                {

                    type: "BitwiseExpression",

                    symbol: sym[1],

                    nodes: [sym[0], sym[2]],

                    pos
                }
            );

            return (e.p = 118, s);
        }

        return s;
    }
    function $746(l, e, s = []) {

        e.p = -1;


        if (_16.includes(l.tx)) {

            e.sp -= 3;

            var sym = s.slice(-3);

            s.splice(
                -3,
                3,
                {

                    type: "BitwiseExpression",

                    symbol: sym[1],

                    nodes: [sym[0], sym[2]],

                    pos
                }
            );

            return (e.p = 119, s);
        }

        return s;
    }
    function $747(l, e, s = []) { e.p = -1; s = $_404(l, e, s); return s; }
    function $748(l, e, s = []) { e.p = -1; s = $_404(l, e, s); return s; }
    function $749(l, e, s = []) { e.p = -1; s = $_404(l, e, s); return s; }
    function $750(l, e, s = []) { e.p = -1; s = $_404(l, e, s); return s; }
    function $751(l, e, s = []) { e.p = -1; s = $_405(l, e, s); return s; }
    function $752(l, e, s = []) { e.p = -1; s = $_405(l, e, s); return s; }
    function $753(l, e, s = []) { e.p = -1; s = $_405(l, e, s); return s; }
    function $754(l, e, s = []) {

        e.p = -1;


        if (_18.includes(l.tx)) {

            e.sp -= 3;

            var sym = s.slice(-3);

            s.splice(
                -3,
                3,
                {

                    type: "InstanceOfExpression",

                    nodes: [sym[0], sym[2]],

                    pos
                }
            );

            return (e.p = 121, s);
        }

        return s;
    }
    function $755(l, e, s = []) { e.p = -1; s = $_405(l, e, s); return s; }
    function $756(l, e, s = []) {

        e.p = -1;


        if (_18.includes(l.tx)) {

            e.sp -= 3;

            var sym = s.slice(-3);

            s.splice(
                -3,
                3,
                { type: "InExpression", nodes: [sym[0], sym[2]], pos }
            );

            return (e.p = 121, s);
        }

        return s;
    }
    function $757(l, e, s = []) { e.p = -1; s = $_408(l, e, s); return s; }
    function $758(l, e, s = []) { e.p = -1; s = $_408(l, e, s); return s; }
    function $759(l, e, s = []) { e.p = -1; s = $_409(l, e, s); return s; }
    function $760(l, e, s = []) { e.p = -1; s = $_409(l, e, s); return s; }
    function $761(l, e, s = []) { e.p = -1; s = $_408(l, e, s); return s; }
    function $762(l, e, s = []) { e.p = -1; s = $_410(l, e, s); return s; }
    function $763(l, e, s = []) { e.p = -1; s = $_410(l, e, s); return s; }
    function $764(l, e, s = []) { e.p = -1; s = $_410(l, e, s); return s; }
    function $765(l, e, s = []) {

        e.p = -1;


        if (_21.includes(l.tx)) {

            e.sp -= 3;

            var sym = s.slice(-3);

            s.splice(
                -3,
                3,
                {

                    type: "ExponentiationExpression",

                    nodes: [sym[0], sym[2]],

                    pos
                }
            );

            return (e.p = 125, s);
        }

        return s;
    }
    function $766(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 3;

            var sym = s.slice(-3);

            s.splice(
                -3,
                3,
                {

                    type: "BigIntLiteral",

                    value: sym[1],

                    pos,

                    NEGATIVE: !!sym[0]
                }
            );

            return (e.p = 174, s);
        }

        return s;
    }
    function $767(l, e, s = []) { e.p = -1; s = $_413(l, e, s); return s; }
    function $768(l, e, s = []) { e.p = -1; s = $_413(l, e, s); return s; }
    function $769(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_261(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $120(l, e, s); break;

                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 156: s = $918(l, e, s); break;

                case 155:

                    s = $916(l, e, s);

                    if (e.p < 0) s = $356(l, e, s);

                    break;


                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $917(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![154].includes(a)) fail(l, e);

        return s;
    }
    function $771(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 3;

            var sym = s.slice(-3);

            s.splice(
                -3,
                3,
                (
                    sym[2].type |= e.cls.PROPERTY_NAME,
                    {

                        type: "MemberExpression",

                        nodes: [sym[0], sym[2]],

                        pos,

                        COMPUTED: false
                    })
            );

            return (e.p = 97, s);
        }

        return s;
    }
    function $772(l, e, s = []) { e.p = -1; s = $_416(l, e, s); return s; }
    function $773(l, e, s = []) { e.p = -1; s = $_416(l, e, s); return s; }
    function $774(l, e, s = []) {

        e.p = -1;


        if (_8.includes(l.tx)) { return $919(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $775(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 3;

            var sym = s.slice(-3);

            s.splice(-3, 3, { type: "NewTarget", pos });

            return (e.p = 96, s);
        }

        return s;
    }
    function $776(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 3;

            var sym = s.slice(-3);

            s.splice(
                -3,
                3,
                {

                    type: "NewInstanceExpression",

                    nodes: [sym[1], sym[2]],

                    pos
                }
            );

            return (e.p = 92, s);
        }

        return s;
    }
    function $777(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "(": s = $922(l, e, _s(s, l, e, e.eh, _0)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async": s = $11(l, e, _s(s, l, e, e.eh, _0)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;
                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $211(l, e, s); break;

                case 179: s = $921(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![67].includes(a)) fail(l, e);

        return s;
    }
    function $778(l, e, s = []) {

        e.p = -1;


        if (_33.includes(l.tx)) { return $920(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $779(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case ")": s = $926(l, e, _s(s, l, e, e.eh, _0)); break;

            case "...": s.push($binding_rest_element(l, e)); break;

            case "[": s.push($array_binding_pattern(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async": s = $11(l, e, _s(s, l, e, e.eh, _0)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "{": s.push($object_binding_pattern(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;
                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $211(l, e, s); break;

                case 179: s = $236(l, e, s); break;

                case 142: s = $793(l, e, s); break;

                case 141: s = $234(l, e, s); break;

                case 140: s = $233(l, e, s); break;

                case 134: s = $213(l, e, s); break;

                case 133: s = $212(l, e, s); break;

                case 132: s = $235(l, e, s); break;

                case 73: s = $239(l, e, s); break;

                case 72: s = $791(l, e, s); break;

                case 71:

                    s = $792(l, e, s);

                    if (e.p < 0) s = $238(l, e, s);

                    break;


                case 69: s = $925(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![67].includes(a)) fail(l, e);

        return s;
    }
    function $780(l, e, s = []) { s.push($concise_body(l, e, s)); e.sp++; return s; }
    function $781(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "(": s = $924(l, e, _s(s, l, e, e.eh, _0)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async": s = $11(l, e, _s(s, l, e, e.eh, _0)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;
                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $211(l, e, s); break;

                case 179: s = $923(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![66].includes(a)) fail(l, e);

        return s;
    }
    function $782(l, e, s = []) {

        e.p = -1;


        if (_33.includes(l.tx)) { return $927(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $783(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case ")": s = $932(l, e, _s(s, l, e, e.eh, _0)); break;

            case "...": s.push($binding_rest_element(l, e)); break;

            case "[": s.push($array_binding_pattern(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async": s = $11(l, e, _s(s, l, e, e.eh, _0)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "{": s.push($object_binding_pattern(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;
                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $211(l, e, s); break;

                case 179: s = $236(l, e, s); break;

                case 142: s = $793(l, e, s); break;

                case 141: s = $234(l, e, s); break;

                case 140: s = $233(l, e, s); break;

                case 134: s = $213(l, e, s); break;

                case 133: s = $212(l, e, s); break;

                case 132: s = $235(l, e, s); break;

                case 73: s = $239(l, e, s); break;

                case 72: s = $791(l, e, s); break;

                case 71:

                    s = $792(l, e, s);

                    if (e.p < 0) s = $238(l, e, s);

                    break;


                case 69: s = $931(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![66].includes(a)) fail(l, e);

        return s;
    }
    function $784(l, e, s = []) {

        e.p = -1;


        if (_33.includes(l.tx)) { return $928(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $785(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case ")": s = $935(l, e, _s(s, l, e, e.eh, _0)); break;

            case "...": s.push($binding_rest_element(l, e)); break;

            case "[": s.push($array_binding_pattern(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async": s = $11(l, e, _s(s, l, e, e.eh, _0)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "{": s.push($object_binding_pattern(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;
                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $211(l, e, s); break;

                case 179: s = $236(l, e, s); break;

                case 142: s = $793(l, e, s); break;

                case 141: s = $234(l, e, s); break;

                case 140: s = $233(l, e, s); break;

                case 134: s = $213(l, e, s); break;

                case 133: s = $212(l, e, s); break;

                case 132: s = $235(l, e, s); break;

                case 73: s = $239(l, e, s); break;

                case 72: s = $791(l, e, s); break;

                case 71:

                    s = $792(l, e, s);

                    if (e.p < 0) s = $238(l, e, s);

                    break;


                case 69: s = $934(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![67].includes(a)) fail(l, e);

        return s;
    }
    function $786(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case ")": s = $930(l, e, _s(s, l, e, e.eh, _0)); break;

            case "...": s.push($binding_rest_element(l, e)); break;

            case "[": s.push($array_binding_pattern(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async": s = $11(l, e, _s(s, l, e, e.eh, _0)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "{": s.push($object_binding_pattern(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;
                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $211(l, e, s); break;

                case 179: s = $236(l, e, s); break;

                case 142: s = $793(l, e, s); break;

                case 141: s = $234(l, e, s); break;

                case 140: s = $233(l, e, s); break;

                case 134: s = $213(l, e, s); break;

                case 133: s = $212(l, e, s); break;

                case 132: s = $235(l, e, s); break;

                case 73: s = $239(l, e, s); break;

                case 72: s = $791(l, e, s); break;

                case 71:

                    s = $792(l, e, s);

                    if (e.p < 0) s = $238(l, e, s);

                    break;


                case 69: s = $929(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![67].includes(a)) fail(l, e);

        return s;
    }
    function $787(l, e, s = []) {

        e.p = -1;


        if (_33.includes(l.tx)) { return $933(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $788(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case ")": s = $940(l, e, _s(s, l, e, e.eh, _0)); break;

            case "...": s.push($binding_rest_element(l, e)); break;

            case "[": s.push($array_binding_pattern(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async": s = $11(l, e, _s(s, l, e, e.eh, _0)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "{": s.push($object_binding_pattern(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;
                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $211(l, e, s); break;

                case 179: s = $236(l, e, s); break;

                case 142: s = $793(l, e, s); break;

                case 141: s = $234(l, e, s); break;

                case 140: s = $233(l, e, s); break;

                case 134: s = $213(l, e, s); break;

                case 133: s = $212(l, e, s); break;

                case 132: s = $235(l, e, s); break;

                case 73: s = $239(l, e, s); break;

                case 72: s = $791(l, e, s); break;

                case 71:

                    s = $792(l, e, s);

                    if (e.p < 0) s = $238(l, e, s);

                    break;


                case 69: s = $939(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![66].includes(a)) fail(l, e);

        return s;
    }
    function $789(l, e, s = []) {

        e.p = -1;


        if (_68.includes(l.tx)) { return $936(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $790(l, e, s = []) {

        e.p = -1;


        if (_35.includes(l.tx)) { return $937(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $791(l, e, s = []) {

        e.p = -1;


        if (_68.includes(l.tx)) {

            e.sp -= 1;

            var sym = s.slice(-1);

            s.splice(
                -1,
                1,
                { type: "FormalParameters", nodes: [sym[0]], pos }
            );

            return (e.p = 69, s);
        }

        return s;
    }
    function $792(l, e, s = []) {

        e.p = -1;


        switch (l.tx) {

            case ",": return $938(l, e, _s(s, l, e, e.eh, _0));

            case ")":

                e.sp -= 1;

                var sym = s.slice(-1);

                s.splice(
                    -1,
                    1,
                    { type: "FormalParameters", nodes: sym[0], pos }
                );

                return (e.p = 69, s);

        }

        return s;
    }
    function $793(l, e, s = []) {

        e.p = -1;


        if (_68.includes(l.tx)) {

            e.sp -= 1;

            return (e.p = 72, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }
    function $794(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case ")": s = $943(l, e, _s(s, l, e, e.eh, _0)); break;

            case "...": s.push($binding_rest_element(l, e)); break;

            case "[": s.push($array_binding_pattern(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async": s = $11(l, e, _s(s, l, e, e.eh, _0)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "{": s.push($object_binding_pattern(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;
                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $211(l, e, s); break;

                case 179: s = $236(l, e, s); break;

                case 142: s = $793(l, e, s); break;

                case 141: s = $234(l, e, s); break;

                case 140: s = $233(l, e, s); break;

                case 134: s = $213(l, e, s); break;

                case 133: s = $212(l, e, s); break;

                case 132: s = $235(l, e, s); break;

                case 73: s = $239(l, e, s); break;

                case 72: s = $791(l, e, s); break;

                case 71:

                    s = $792(l, e, s);

                    if (e.p < 0) s = $238(l, e, s);

                    break;


                case 69: s = $942(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![66].includes(a)) fail(l, e);

        return s;
    }
    function $795(l, e, s = []) {

        e.p = -1;


        if (_35.includes(l.tx)) { return $941(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $796(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "*": s.push($method_definition(l, e)); break;

            case "-": s.push($numeric_literal(l, e)); break;

            case ";": s = $307(l, e, _s(s, l, e, e.eh, _0)); break;

            case "[": s.push($computed_property_name(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($method_definition(l, e));

                break;


            case "await": s = $262(l, e, _s(s, l, e, e.eh, _0)); break;

            case "break": s = $263(l, e, _s(s, l, e, e.eh, _0)); break;

            case "case": s = $264(l, e, _s(s, l, e, e.eh, _0)); break;

            case "catch": s = $265(l, e, _s(s, l, e, e.eh, _0)); break;

            case "class": s = $266(l, e, _s(s, l, e, e.eh, _0)); break;

            case "const": s = $267(l, e, _s(s, l, e, e.eh, _0)); break;

            case "continue": s = $268(l, e, _s(s, l, e, e.eh, _0)); break;

            case "debugger": s = $269(l, e, _s(s, l, e, e.eh, _0)); break;

            case "default": s = $270(l, e, _s(s, l, e, e.eh, _0)); break;

            case "delete": s = $271(l, e, _s(s, l, e, e.eh, _0)); break;

            case "do": s = $272(l, e, _s(s, l, e, e.eh, _0)); break;

            case "else": s = $273(l, e, _s(s, l, e, e.eh, _0)); break;

            case "export": s = $274(l, e, _s(s, l, e, e.eh, _0)); break;

            case "extends": s = $275(l, e, _s(s, l, e, e.eh, _0)); break;

            case "false": s = $261(l, e, _s(s, l, e, e.eh, _0)); break;

            case "finally": s = $276(l, e, _s(s, l, e, e.eh, _0)); break;

            case "for": s = $277(l, e, _s(s, l, e, e.eh, _0)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function": s = $278(l, e, _s(s, l, e, e.eh, _0)); break;

            case "get":

                var cp = l.copy(), _sym = null;

                _sym = $12(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($method_definition(l, e));

                break;


            case "if": s = $279(l, e, _s(s, l, e, e.eh, _0)); break;

            case "implements": s = $296(l, e, _s(s, l, e, e.eh, _0)); break;

            case "import": s = $280(l, e, _s(s, l, e, e.eh, _0)); break;

            case "in": s = $281(l, e, _s(s, l, e, e.eh, _0)); break;

            case "instanceof": s = $282(l, e, _s(s, l, e, e.eh, _0)); break;

            case "interface": s = $299(l, e, _s(s, l, e, e.eh, _0)); break;

            case "new": s = $283(l, e, _s(s, l, e, e.eh, _0)); break;

            case "null": s = $259(l, e, _s(s, l, e, e.eh, _0)); break;

            case "package": s = $297(l, e, _s(s, l, e, e.eh, _0)); break;

            case "private": s = $300(l, e, _s(s, l, e, e.eh, _0)); break;

            case "protected": s = $298(l, e, _s(s, l, e, e.eh, _0)); break;

            case "public": s = $301(l, e, _s(s, l, e, e.eh, _0)); break;

            case "return": s = $284(l, e, _s(s, l, e, e.eh, _0)); break;

            case "set":

                var cp = l.copy(), _sym = null;

                _sym = $13(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($method_definition(l, e));

                break;


            case "static": s.push($class_element(l, e)); break;

            case "super": s = $285(l, e, _s(s, l, e, e.eh, _0)); break;

            case "switch": s = $286(l, e, _s(s, l, e, e.eh, _0)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $287(l, e, _s(s, l, e, e.eh, _0)); break;

            case "throw": s = $288(l, e, _s(s, l, e, e.eh, _0)); break;

            case "true": s = $260(l, e, _s(s, l, e, e.eh, _0)); break;

            case "try": s = $289(l, e, _s(s, l, e, e.eh, _0)); break;

            case "typeof": s = $290(l, e, _s(s, l, e, e.eh, _0)); break;

            case "var": s = $291(l, e, _s(s, l, e, e.eh, _0)); break;

            case "void": s = $292(l, e, _s(s, l, e, e.eh, _0)); break;

            case "while": s = $293(l, e, _s(s, l, e, e.eh, _0)); break;

            case "with": s = $294(l, e, _s(s, l, e, e.eh, _0)); break;

            case "yield": s = $295(l, e, _s(s, l, e, e.eh, _0)); break;

            case "}": s = $954(l, e, _s(s, l, e, e.eh, _0)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1: s = $135(l, e, _s(s, l, e, e.eh, _0)); break;
                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 186: s = $257(l, e, s); break;

                case 185: s = $254(l, e, s); break;

                case 184: s = $258(l, e, s); break;

                case 183: s = $255(l, e, s); break;

                case 182: s = $256(l, e, s); break;

                case 181: s = $251(l, e, s); break;

                case 173: s = $253(l, e, s); break;

                case 169: s = $252(l, e, s); break;

                case 150: s = $250(l, e, s); break;

                case 149: s = $249(l, e, s); break;

                case 148: s = $248(l, e, s); break;

                case 87: s = $308(l, e, s); break;

                case 86: s = $305(l, e, s); break;

                case 85:

                    s = $953(l, e, s);

                    if (e.p < 0) s = $306(l, e, s);

                    break;


                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![83].includes(a)) fail(l, e);

        return s;
    }
    function $797(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "*": s.push($method_definition(l, e)); break;

            case "-": s.push($numeric_literal(l, e)); break;

            case ";": s = $307(l, e, _s(s, l, e, e.eh, _0)); break;

            case "[": s.push($computed_property_name(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($method_definition(l, e));

                break;


            case "await": s = $262(l, e, _s(s, l, e, e.eh, _0)); break;

            case "break": s = $263(l, e, _s(s, l, e, e.eh, _0)); break;

            case "case": s = $264(l, e, _s(s, l, e, e.eh, _0)); break;

            case "catch": s = $265(l, e, _s(s, l, e, e.eh, _0)); break;

            case "class": s = $266(l, e, _s(s, l, e, e.eh, _0)); break;

            case "const": s = $267(l, e, _s(s, l, e, e.eh, _0)); break;

            case "continue": s = $268(l, e, _s(s, l, e, e.eh, _0)); break;

            case "debugger": s = $269(l, e, _s(s, l, e, e.eh, _0)); break;

            case "default": s = $270(l, e, _s(s, l, e, e.eh, _0)); break;

            case "delete": s = $271(l, e, _s(s, l, e, e.eh, _0)); break;

            case "do": s = $272(l, e, _s(s, l, e, e.eh, _0)); break;

            case "else": s = $273(l, e, _s(s, l, e, e.eh, _0)); break;

            case "export": s = $274(l, e, _s(s, l, e, e.eh, _0)); break;

            case "extends": s = $275(l, e, _s(s, l, e, e.eh, _0)); break;

            case "false": s = $261(l, e, _s(s, l, e, e.eh, _0)); break;

            case "finally": s = $276(l, e, _s(s, l, e, e.eh, _0)); break;

            case "for": s = $277(l, e, _s(s, l, e, e.eh, _0)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function": s = $278(l, e, _s(s, l, e, e.eh, _0)); break;

            case "get":

                var cp = l.copy(), _sym = null;

                _sym = $12(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($method_definition(l, e));

                break;


            case "if": s = $279(l, e, _s(s, l, e, e.eh, _0)); break;

            case "implements": s = $296(l, e, _s(s, l, e, e.eh, _0)); break;

            case "import": s = $280(l, e, _s(s, l, e, e.eh, _0)); break;

            case "in": s = $281(l, e, _s(s, l, e, e.eh, _0)); break;

            case "instanceof": s = $282(l, e, _s(s, l, e, e.eh, _0)); break;

            case "interface": s = $299(l, e, _s(s, l, e, e.eh, _0)); break;

            case "new": s = $283(l, e, _s(s, l, e, e.eh, _0)); break;

            case "null": s = $259(l, e, _s(s, l, e, e.eh, _0)); break;

            case "package": s = $297(l, e, _s(s, l, e, e.eh, _0)); break;

            case "private": s = $300(l, e, _s(s, l, e, e.eh, _0)); break;

            case "protected": s = $298(l, e, _s(s, l, e, e.eh, _0)); break;

            case "public": s = $301(l, e, _s(s, l, e, e.eh, _0)); break;

            case "return": s = $284(l, e, _s(s, l, e, e.eh, _0)); break;

            case "set":

                var cp = l.copy(), _sym = null;

                _sym = $13(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($method_definition(l, e));

                break;


            case "static": s.push($class_element(l, e)); break;

            case "super": s = $285(l, e, _s(s, l, e, e.eh, _0)); break;

            case "switch": s = $286(l, e, _s(s, l, e, e.eh, _0)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $287(l, e, _s(s, l, e, e.eh, _0)); break;

            case "throw": s = $288(l, e, _s(s, l, e, e.eh, _0)); break;

            case "true": s = $260(l, e, _s(s, l, e, e.eh, _0)); break;

            case "try": s = $289(l, e, _s(s, l, e, e.eh, _0)); break;

            case "typeof": s = $290(l, e, _s(s, l, e, e.eh, _0)); break;

            case "var": s = $291(l, e, _s(s, l, e, e.eh, _0)); break;

            case "void": s = $292(l, e, _s(s, l, e, e.eh, _0)); break;

            case "while": s = $293(l, e, _s(s, l, e, e.eh, _0)); break;

            case "with": s = $294(l, e, _s(s, l, e, e.eh, _0)); break;

            case "yield": s = $295(l, e, _s(s, l, e, e.eh, _0)); break;

            case "}": s = $952(l, e, _s(s, l, e, e.eh, _0)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1: s = $135(l, e, _s(s, l, e, e.eh, _0)); break;
                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 186: s = $257(l, e, s); break;

                case 185: s = $254(l, e, s); break;

                case 184: s = $258(l, e, s); break;

                case 183: s = $255(l, e, s); break;

                case 182: s = $256(l, e, s); break;

                case 181: s = $251(l, e, s); break;

                case 173: s = $253(l, e, s); break;

                case 169: s = $252(l, e, s); break;

                case 150: s = $250(l, e, s); break;

                case 149: s = $249(l, e, s); break;

                case 148: s = $248(l, e, s); break;

                case 87: s = $308(l, e, s); break;

                case 86: s = $305(l, e, s); break;

                case 85:

                    s = $951(l, e, s);

                    if (e.p < 0) s = $306(l, e, s);

                    break;


                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![83].includes(a)) fail(l, e);

        return s;
    }
    function $798(l, e, s = []) {

        e.p = -1;


        if (_68.includes(l.tx)) { return $944(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $799(l, e, s = []) {

        e.p = -1;


        if (_35.includes(l.tx)) { return $945(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $800(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 3;

            var sym = s.slice(-3);

            s.splice(
                -3,
                3,
                (
                    sym[2].type |= e.cls.PROPERTY_NAME,
                    {

                        type: "MemberExpression",

                        nodes: [sym[0], sym[2]],

                        pos,

                        COMPUTED: false
                    })
            );

            return (e.p = 92, s);
        }

        return s;
    }
    function $801(l, e, s = []) {

        e.p = -1;


        if (_35.includes(l.tx)) { return $946(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $802(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "*": s.push($method_definition(l, e)); break;

            case "-": s.push($numeric_literal(l, e)); break;

            case ";": s = $307(l, e, _s(s, l, e, e.eh, _0)); break;

            case "[": s.push($computed_property_name(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($method_definition(l, e));

                break;


            case "await": s = $262(l, e, _s(s, l, e, e.eh, _0)); break;

            case "break": s = $263(l, e, _s(s, l, e, e.eh, _0)); break;

            case "case": s = $264(l, e, _s(s, l, e, e.eh, _0)); break;

            case "catch": s = $265(l, e, _s(s, l, e, e.eh, _0)); break;

            case "class": s = $266(l, e, _s(s, l, e, e.eh, _0)); break;

            case "const": s = $267(l, e, _s(s, l, e, e.eh, _0)); break;

            case "continue": s = $268(l, e, _s(s, l, e, e.eh, _0)); break;

            case "debugger": s = $269(l, e, _s(s, l, e, e.eh, _0)); break;

            case "default": s = $270(l, e, _s(s, l, e, e.eh, _0)); break;

            case "delete": s = $271(l, e, _s(s, l, e, e.eh, _0)); break;

            case "do": s = $272(l, e, _s(s, l, e, e.eh, _0)); break;

            case "else": s = $273(l, e, _s(s, l, e, e.eh, _0)); break;

            case "export": s = $274(l, e, _s(s, l, e, e.eh, _0)); break;

            case "extends": s = $275(l, e, _s(s, l, e, e.eh, _0)); break;

            case "false": s = $261(l, e, _s(s, l, e, e.eh, _0)); break;

            case "finally": s = $276(l, e, _s(s, l, e, e.eh, _0)); break;

            case "for": s = $277(l, e, _s(s, l, e, e.eh, _0)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function": s = $278(l, e, _s(s, l, e, e.eh, _0)); break;

            case "get":

                var cp = l.copy(), _sym = null;

                _sym = $12(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($method_definition(l, e));

                break;


            case "if": s = $279(l, e, _s(s, l, e, e.eh, _0)); break;

            case "implements": s = $296(l, e, _s(s, l, e, e.eh, _0)); break;

            case "import": s = $280(l, e, _s(s, l, e, e.eh, _0)); break;

            case "in": s = $281(l, e, _s(s, l, e, e.eh, _0)); break;

            case "instanceof": s = $282(l, e, _s(s, l, e, e.eh, _0)); break;

            case "interface": s = $299(l, e, _s(s, l, e, e.eh, _0)); break;

            case "new": s = $283(l, e, _s(s, l, e, e.eh, _0)); break;

            case "null": s = $259(l, e, _s(s, l, e, e.eh, _0)); break;

            case "package": s = $297(l, e, _s(s, l, e, e.eh, _0)); break;

            case "private": s = $300(l, e, _s(s, l, e, e.eh, _0)); break;

            case "protected": s = $298(l, e, _s(s, l, e, e.eh, _0)); break;

            case "public": s = $301(l, e, _s(s, l, e, e.eh, _0)); break;

            case "return": s = $284(l, e, _s(s, l, e, e.eh, _0)); break;

            case "set":

                var cp = l.copy(), _sym = null;

                _sym = $13(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($method_definition(l, e));

                break;


            case "static": s.push($class_element(l, e)); break;

            case "super": s = $285(l, e, _s(s, l, e, e.eh, _0)); break;

            case "switch": s = $286(l, e, _s(s, l, e, e.eh, _0)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $287(l, e, _s(s, l, e, e.eh, _0)); break;

            case "throw": s = $288(l, e, _s(s, l, e, e.eh, _0)); break;

            case "true": s = $260(l, e, _s(s, l, e, e.eh, _0)); break;

            case "try": s = $289(l, e, _s(s, l, e, e.eh, _0)); break;

            case "typeof": s = $290(l, e, _s(s, l, e, e.eh, _0)); break;

            case "var": s = $291(l, e, _s(s, l, e, e.eh, _0)); break;

            case "void": s = $292(l, e, _s(s, l, e, e.eh, _0)); break;

            case "while": s = $293(l, e, _s(s, l, e, e.eh, _0)); break;

            case "with": s = $294(l, e, _s(s, l, e, e.eh, _0)); break;

            case "yield": s = $295(l, e, _s(s, l, e, e.eh, _0)); break;

            case "}": s = $957(l, e, _s(s, l, e, e.eh, _0)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1: s = $135(l, e, _s(s, l, e, e.eh, _0)); break;
                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 186: s = $257(l, e, s); break;

                case 185: s = $254(l, e, s); break;

                case 184: s = $258(l, e, s); break;

                case 183: s = $255(l, e, s); break;

                case 182: s = $256(l, e, s); break;

                case 181: s = $251(l, e, s); break;

                case 173: s = $253(l, e, s); break;

                case 169: s = $252(l, e, s); break;

                case 150: s = $250(l, e, s); break;

                case 149: s = $249(l, e, s); break;

                case 148: s = $248(l, e, s); break;

                case 87: s = $308(l, e, s); break;

                case 86: s = $305(l, e, s); break;

                case 85:

                    s = $956(l, e, s);

                    if (e.p < 0) s = $306(l, e, s);

                    break;


                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![82].includes(a)) fail(l, e);

        return s;
    }
    function $803(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "*": s.push($method_definition(l, e)); break;

            case "-": s.push($numeric_literal(l, e)); break;

            case ";": s = $307(l, e, _s(s, l, e, e.eh, _0)); break;

            case "[": s.push($computed_property_name(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($method_definition(l, e));

                break;


            case "await": s = $262(l, e, _s(s, l, e, e.eh, _0)); break;

            case "break": s = $263(l, e, _s(s, l, e, e.eh, _0)); break;

            case "case": s = $264(l, e, _s(s, l, e, e.eh, _0)); break;

            case "catch": s = $265(l, e, _s(s, l, e, e.eh, _0)); break;

            case "class": s = $266(l, e, _s(s, l, e, e.eh, _0)); break;

            case "const": s = $267(l, e, _s(s, l, e, e.eh, _0)); break;

            case "continue": s = $268(l, e, _s(s, l, e, e.eh, _0)); break;

            case "debugger": s = $269(l, e, _s(s, l, e, e.eh, _0)); break;

            case "default": s = $270(l, e, _s(s, l, e, e.eh, _0)); break;

            case "delete": s = $271(l, e, _s(s, l, e, e.eh, _0)); break;

            case "do": s = $272(l, e, _s(s, l, e, e.eh, _0)); break;

            case "else": s = $273(l, e, _s(s, l, e, e.eh, _0)); break;

            case "export": s = $274(l, e, _s(s, l, e, e.eh, _0)); break;

            case "extends": s = $275(l, e, _s(s, l, e, e.eh, _0)); break;

            case "false": s = $261(l, e, _s(s, l, e, e.eh, _0)); break;

            case "finally": s = $276(l, e, _s(s, l, e, e.eh, _0)); break;

            case "for": s = $277(l, e, _s(s, l, e, e.eh, _0)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function": s = $278(l, e, _s(s, l, e, e.eh, _0)); break;

            case "get":

                var cp = l.copy(), _sym = null;

                _sym = $12(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($method_definition(l, e));

                break;


            case "if": s = $279(l, e, _s(s, l, e, e.eh, _0)); break;

            case "implements": s = $296(l, e, _s(s, l, e, e.eh, _0)); break;

            case "import": s = $280(l, e, _s(s, l, e, e.eh, _0)); break;

            case "in": s = $281(l, e, _s(s, l, e, e.eh, _0)); break;

            case "instanceof": s = $282(l, e, _s(s, l, e, e.eh, _0)); break;

            case "interface": s = $299(l, e, _s(s, l, e, e.eh, _0)); break;

            case "new": s = $283(l, e, _s(s, l, e, e.eh, _0)); break;

            case "null": s = $259(l, e, _s(s, l, e, e.eh, _0)); break;

            case "package": s = $297(l, e, _s(s, l, e, e.eh, _0)); break;

            case "private": s = $300(l, e, _s(s, l, e, e.eh, _0)); break;

            case "protected": s = $298(l, e, _s(s, l, e, e.eh, _0)); break;

            case "public": s = $301(l, e, _s(s, l, e, e.eh, _0)); break;

            case "return": s = $284(l, e, _s(s, l, e, e.eh, _0)); break;

            case "set":

                var cp = l.copy(), _sym = null;

                _sym = $13(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($method_definition(l, e));

                break;


            case "static": s.push($class_element(l, e)); break;

            case "super": s = $285(l, e, _s(s, l, e, e.eh, _0)); break;

            case "switch": s = $286(l, e, _s(s, l, e, e.eh, _0)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $287(l, e, _s(s, l, e, e.eh, _0)); break;

            case "throw": s = $288(l, e, _s(s, l, e, e.eh, _0)); break;

            case "true": s = $260(l, e, _s(s, l, e, e.eh, _0)); break;

            case "try": s = $289(l, e, _s(s, l, e, e.eh, _0)); break;

            case "typeof": s = $290(l, e, _s(s, l, e, e.eh, _0)); break;

            case "var": s = $291(l, e, _s(s, l, e, e.eh, _0)); break;

            case "void": s = $292(l, e, _s(s, l, e, e.eh, _0)); break;

            case "while": s = $293(l, e, _s(s, l, e, e.eh, _0)); break;

            case "with": s = $294(l, e, _s(s, l, e, e.eh, _0)); break;

            case "yield": s = $295(l, e, _s(s, l, e, e.eh, _0)); break;

            case "}": s = $965(l, e, _s(s, l, e, e.eh, _0)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1: s = $135(l, e, _s(s, l, e, e.eh, _0)); break;
                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 186: s = $257(l, e, s); break;

                case 185: s = $254(l, e, s); break;

                case 184: s = $258(l, e, s); break;

                case 183: s = $255(l, e, s); break;

                case 182: s = $256(l, e, s); break;

                case 181: s = $251(l, e, s); break;

                case 173: s = $253(l, e, s); break;

                case 169: s = $252(l, e, s); break;

                case 150: s = $250(l, e, s); break;

                case 149: s = $249(l, e, s); break;

                case 148: s = $248(l, e, s); break;

                case 87: s = $308(l, e, s); break;

                case 86: s = $305(l, e, s); break;

                case 85:

                    s = $964(l, e, s);

                    if (e.p < 0) s = $306(l, e, s);

                    break;


                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![82].includes(a)) fail(l, e);

        return s;
    }
    function $805(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 3;

            var sym = s.slice(-3);

            s.splice(
                -3,
                3,
                { type: "RegexLiteral", value: sym[0], flags: sym[2], pos }
            );

            return (e.p = 143, s);
        }

        return s;
    }
    function $806(l, e, s = []) {

        e.p = -1;


        if (_52.includes(l.tx)) { return $948(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $807(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 3;

            var sym = s.slice(-3);

            s.splice(-3, 3, { type: "Class", nodes: [null, null], pos });

            return (e.p = 83, s);
        }

        return s;
    }
    function $808(l, e, s = []) {

        e.p = -1;


        if (_70.includes(l.tx)) { return $949(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $809(l, e, s = []) {

        e.p = -1;


        if (l.END || _67.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 3;

            var sym = s.slice(-3);

            s.splice(
                -3,
                3,
                { type: "BlockStatement", nodes: sym[1] || [], pos }
            );

            return (e.p = 29, s);
        }

        return s;
    }
    function $810(l, e, s = []) {

        e.p = -1;


        if (_52.includes(l.tx)) { return $950(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $811(l, e, s = []) {

        e.p = -1;


        if (l.END || _5.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 3;

            var sym = s.slice(-3);

            s.splice(-3, 3, { type: "Class", nodes: [null, null], pos });

            return (e.p = 82, s);
        }

        return s;
    }
    function $812(l, e, s = []) {

        e.p = -1;


        if (_70.includes(l.tx)) { return $955(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $813(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 3;

            var sym = s.slice(-3);

            s.splice(
                -3,
                3,
                (
                    sym[2].type |= e.cls.PROPERTY_NAME,
                    {

                        type: "SuperExpression",

                        nodes: [sym[2]],

                        pos,

                        COMPUTED: false
                    })
            );

            return (e.p = 93, s);
        }

        return s;
    }
    function $814(l, e, s = []) {

        e.p = -1;


        switch (l.tx) {

            case ")": return $959(l, e, _s(s, l, e, e.eh, _0));

            case ",": return $958(l, e, _s(s, l, e, e.eh, _0));
        }

        return s;
    }
    function $815(l, e, s = []) {

        e.p = -1;


        if (_68.includes(l.tx)) { return $960(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $816(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 2;

            var sym = s.slice(-2);

            s.splice(-2, 2, { type: "Arguments", nodes: null || [], pos });

            return (e.p = 100, s);
        }

        return s;
    }
    function $817(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 3;

            var sym = s.slice(-3);

            s.splice(-3, 3, { type: "ImportMeta", pos });

            return (e.p = 95, s);
        }

        return s;
    }
    function $823(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 3;

            var sym = s.slice(-3);

            s.splice(
                -3,
                3,
                { type: "VariableStatement", nodes: sym[1], pos }
            );

            return (e.p = 57, s);
        }

        return s;
    }
    function $824(l, e, s = []) {

        e.p = -1;


        if ([")", ",", ":", ";", "?", "??", "]", "}"].includes(l.tx)) {

            e.sp -= 3;

            var sym = s.slice(-3);

            s.splice(
                -3,
                3,
                {

                    type: "CoalesceExpression",

                    nodes: [sym[0], sym[2]],

                    pos
                }
            );

            return (e.p = 114, s);
        }

        return s;
    }
    function $825(l, e, s = []) {

        e.p = -1;


        if (_9.includes(l.tx)) {

            e.sp -= 3;

            var sym = s.slice(-3);

            s.splice(
                -3,
                3,
                {

                    type: "ArrowFunction",

                    ASYNC: !!null,

                    nodes: [sym[0], sym[2]],

                    pos
                }
            );

            return (e.p = 78, s);
        }

        return s;
    }
    function $826(l, e, s = []) {

        e.p = -1;


        if (_9.includes(l.tx)) {

            e.sp -= 1;

            return (e.p = 80, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }
    function $828(l, e, s = []) {

        e.p = -1;


        if (_9.includes(l.tx)) {

            e.sp -= 3;

            var sym = s.slice(-3);

            s.splice(
                -3,
                3,
                {

                    type: "YieldExpression",

                    nodes: [sym[2]],

                    pos,

                    GENERATOR: !!sym[1]
                }
            );

            return (e.p = 77, s);
        }

        return s;
    }
    function $829(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(": s.push($parenthesized(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_expression(l, e));

                break;


            case "class": s.push($class_expression(l, e)); break;

            case "const": s = $188(l, e, _s(s, l, e, e.eh, _0)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function": s.push($function_expression(l, e)); break;

            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "import":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($import_meta(cp, e));

                if (e.p !== 95) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($import_call(l, e));

                break;


            case "let": s = $187(l, e, _s(s, l, e, e.eh, _0)); break;

            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($new_expression(cp, e));

                if (e.p !== 91) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($new_target(l, e));

                break;


            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($super_property(cp, e));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($super_call(l, e));

                break;


            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "var":

                s.push($iteration_statement_group_073_105(l, e));

                break;


            case "{": s.push($object_literal(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $120(l, e, s); break;

                case 178: s = $109(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131: s = $118(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90: s = $885(l, e, s); break;

                case 83: s = $115(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                case 62: s = $886(l, e, s); break;

                case 37: s = $887(l, e, s); break;

                case 35: s = $967(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![36].includes(a)) fail(l, e);

        return s;
    }
    function $830(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _69.includes(l.ty)) {

            e.sp -= 3;

            var sym = s.slice(-3);

            s.splice(
                -3,
                3,
                {

                    type: "ContinueStatement",

                    nodes: sym[1] ? [sym[1]] : [],

                    pos
                }
            );

            return (e.p = 39, s);
        }

        return s;
    }
    function $831(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 3;

            var sym = s.slice(-3);

            s.splice(
                -3,
                3,
                { type: "BreakStatement", nodes: [sym[1]], pos }
            );

            return (e.p = 40, s);
        }

        return s;
    }
    function $832(l, e, s = []) {

        e.p = -1;


        if (_28.includes(l.tx)) {

            e.sp -= 3;

            var sym = s.slice(-3);

            s.splice(
                -3,
                3,
                { type: "Parenthesized", nodes: [sym[1]], pos }
            );

            return (e.p = 131, s);
        }

        return s;
    }
    function $833(l, e, s = []) {

        e.p = -1;


        if (_68.includes(l.tx)) { return $966(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $834(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 3;

            var sym = s.slice(-3);

            s.splice(
                -3,
                3,
                sym[2].unshift(sym[0], sym[1]),
                { type: "Template", nodes: sym[2], pos }
            );

            return (e.p = 159, s);
        }

        return s;
    }
    function $835(l, e, s = []) {

        e.p = -1;


        if (_70.includes(l.tx)) { return $970(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $836(l, e, s = []) {

        e.p = -1;


        if (_68.includes(l.tx)) { return $971(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $837(l, e, s = []) {

        e.p = -1;


        if (_68.includes(l.tx)) { return $972(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $838(l, e, s = []) {

        e.p = -1;


        if (_68.includes(l.tx)) { return $973(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $839(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        if (l.END) {

            e.sp -= 3;

            var sym = s.slice(-3);

            s.splice(
                -3,
                3,
                {

                    type: "TryStatement",

                    nodes: [sym[1], sym[2], null],

                    pos
                }
            );

            return (e.p = 52, s);
        } else switch (l.tx) {

            case "finally": s.push($finally(l, e)); break;

            case "!":

            case "\"":

            case "$":

            case "'":

            case "(":

            case "+":

            case "++":

            case "-":

            case "--":

            case "/":

            case ";":

            case "[":

            case "_":

            case "`":

            case "as":

            case "async":

            case "await":

            case "break":

            case "case":

            case "class":

            case "const":

            case "continue":

            case "debugger":

            case "default":

            case "delete":

            case "do":

            case "else":

            case "export":

            case "false":

            case "for":

            case "from":

            case "function":

            case "get":

            case "if":

            case "import":

            case "let":

            case "new":

            case "null":

            case "return":

            case "set":

            case "super":

            case "switch":

            case "target":

            case "this":

            case "throw":

            case "true":

            case "try":

            case "typeof":

            case "var":

            case "void":

            case "while":

            case "with":

            case "yield":

            case "{":

            case "}":

            case "~":

                e.sp -= 3;

                var sym = s.slice(-3);

                s.splice(
                    -3,
                    3,
                    {

                        type: "TryStatement",

                        nodes: [sym[1], sym[2], null],

                        pos
                    }
                );

                return (e.p = 52, s);


            default:

                switch (l.ty) {

                    case 255:

                    case 2:

                    case 1:

                        e.sp -= 3;

                        var sym = s.slice(-3);

                        s.splice(
                            -3,
                            3,
                            {

                                type: "TryStatement",

                                nodes: [sym[1], sym[2], null],

                                pos
                            }
                        );

                        return (e.p = 52, s);

                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 54: s = $974(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![52].includes(a)) fail(l, e);

        return s;
    }
    function $840(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 3;

            var sym = s.slice(-3);

            s.splice(
                -3,
                3,
                {

                    type: "TryStatement",

                    nodes: [sym[1], null, sym[2]],

                    pos
                }
            );

            return (e.p = 52, s);
        }

        return s;
    }
    function $843(l, e, s = []) {

        e.p = -1;


        if (l.END || _5.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 3;

            var sym = s.slice(-3);

            s.splice(
                -3,
                3,
                {

                    type: "LexicalDeclaration",

                    symbol: sym[0],

                    nodes: sym[1],

                    pos
                }
            );

            return (e.p = 61, s);
        }

        return s;
    }
    function $844(l, e, s = []) {

        e.p = -1;


        if (_33.includes(l.tx)) { return $977(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $845(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 3;

            var sym = s.slice(-3);

            s.splice(
                -3,
                3,
                { type: "LabeledStatement", nodes: [sym[0], sym[2]], pos }
            );

            return (e.p = 50, s);
        }

        return s;
    }
    function $846(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 3;

            var sym = s.slice(-3);

            s.splice(
                -3,
                3,
                { type: "ReturnStatement", nodes: [sym[1]], pos }
            );

            return (e.p = 41, s);
        }

        return s;
    }
    function $847(l, e, s = []) {

        e.p = -1;


        if (_8.includes(l.tx)) { return $978(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $848(l, e, s = []) {

        e.p = -1;


        if (l.END || _38.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 3;

            var sym = s.slice(-3);

            s.splice(
                -3,
                3,
                { type: "ImportDeclaration", nodes: [null, sym[1]], pos }
            );

            return (e.p = 6, s);
        }

        return s;
    }
    function $849(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "*": s.push($name_space_import(l, e)); break;

            case "{": s.push($named_imports(l, e)); break;
        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 11: s = $980(l, e, s); break;

                case 9: s = $979(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![7].includes(a)) fail(l, e);

        return s;
    }
    function $854(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 3;

            var sym = s.slice(-3);

            s.splice(
                -3,
                3,
                { type: "ThrowStatement", nodes: [sym[1]], pos }
            );

            return (e.p = 42, s);
        }

        return s;
    }
    function $855(l, e, s = []) {

        e.p = -1;


        if (_68.includes(l.tx)) { return $985(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $856(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 3;

            var sym = s.slice(-3);

            s.splice(-3, 3, { type: "ArrayLiteral", nodes: [sym[1]], pos });

            return (e.p = 153, s);
        }

        return s;
    }
    function $857(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 3;

            var sym = s.slice(-3);

            s.splice(-3, 3, { type: "ArrayLiteral", nodes: sym[1], pos });

            return (e.p = 153, s);
        }

        return s;
    }
    function $858(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case ",": s = $358(l, e, _s(s, l, e, e.eh, _0)); break;

            case "]": s = $987(l, e, _s(s, l, e, e.eh, _0)); break;
        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 155:

                    s = $986(l, e, s);

                    if (e.p < 0) s = $356(l, e, s);

                    break;


                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![153].includes(a)) fail(l, e);

        return s;
    }
    function $859(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "!": s.push($unary_expression(l, e)); break;

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($parenthesized(cp, e));

                if (e.p !== 131) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push(
                    $cover_parenthesized_expression_and_arrow_parameter_list(l, e)
                );

                break;


            case "++": s.push($update_expression(l, e)); break;

            case "+": s.push($unary_expression(l, e)); break;

            case "--": s.push($update_expression(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($unary_expression(cp, e));

                if (e.p !== 126) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case ";": s = $167(l, e, _s(s, l, e, e.eh, _0)); break;

            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($arrow_function(cp, e));

                if (e.p !== 78) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "await": s.push($await_expression(l, e)); break;

            case "break": s.push($break_statement(l, e)); break;

            case "class":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($class_expression(cp, e));

                if (e.p !== 83) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($class_declaration(l, e));

                break;


            case "const": s = $188(l, e, _s(s, l, e, e.eh, _0)); break;

            case "continue": s.push($continue_statement(l, e)); break;

            case "debugger": s.push($debugger_statement(l, e)); break;

            case "delete": s.push($unary_expression(l, e)); break;

            case "do": s.push($iteration_statement(l, e)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "for": s.push($iteration_statement(l, e)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "if": s.push($if_statement(l, e)); break;

            case "import":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($import_meta(cp, e));

                if (e.p !== 95) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($import_call(l, e));

                break;


            case "let": s = $187(l, e, _s(s, l, e, e.eh, _0)); break;

            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($new_expression(cp, e));

                if (e.p !== 91) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($new_target(l, e));

                break;


            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "return": s.push($return_statement(l, e)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($super_property(cp, e));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($super_call(l, e));

                break;


            case "switch": s.push($switch_statement(l, e)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "throw": s.push($throw_statement(l, e)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "try": s.push($try_statement(l, e)); break;

            case "typeof": s.push($unary_expression(l, e)); break;

            case "var": s.push($variable_statement(l, e)); break;

            case "void": s.push($unary_expression(l, e)); break;

            case "while": s.push($iteration_statement(l, e)); break;

            case "with": s.push($with_statement(l, e)); break;

            case "yield": s.push($yield_expression(l, e)); break;

            case "{":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($block(cp, e));

                if (e.p !== 29) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($object_literal(l, e));

                break;


            case "~": s.push($unary_expression(l, e)); break;

            case "case":

            case "default":

            case "}":

                e.sp -= 3;

                var sym = s.slice(-3);

                s.splice(-3, 3, { type: "CaseClause", nodes: [sym[1]], pos });

                return (e.p = 48, s);


            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180:

                    s = $120(l, e, s);

                    if (e.p < 0) s = $121(l, e, s);

                    break;


                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 177: s = $165(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $44(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 82: s = $182(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                case 66: s = $185(l, e, s); break;

                case 62: s = $186(l, e, s); break;

                case 61: s = $184(l, e, s); break;

                case 57: s = $30(l, e, s); break;

                case 56: s = $40(l, e, s); break;

                case 52: s = $39(l, e, s); break;

                case 50: s = $29(l, e, s); break;

                case 44: s = $170(l, e, s); break;

                case 43: s = $37(l, e, s); break;

                case 42: s = $38(l, e, s); break;

                case 41: s = $36(l, e, s); break;

                case 40: s = $35(l, e, s); break;

                case 39: s = $34(l, e, s); break;

                case 36: s = $169(l, e, s); break;

                case 33: s = $32(l, e, s); break;

                case 31: s = $28(l, e, s); break;

                case 30: s = $31(l, e, s); break;

                case 29: s = $41(l, e, s); break;

                case 28: s = $27(l, e, s); break;

                case 27: s = $33(l, e, s); break;

                case 26: s = $183(l, e, s); break;

                case 25: s = $26(l, e, s); break;

                case 24: s = $25(l, e, s); break;

                case 23: s = $228(l, e, s); break;

                case 22:

                    s = $988(l, e, s);

                    if (e.p < 0) s = $229(l, e, s);

                    break;


                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![48].includes(a)) fail(l, e);

        return s;
    }
    function $861(l, e, s = []) {

        e.p = -1;


        if (_42.includes(l.tx)) {

            e.sp -= 3;

            var sym = s.slice(-3);

            s.splice(
                -3,
                3,
                { type: "ObjectBinding", nodes: [sym[1]], pos }
            );

            return (e.p = 133, s);
        }

        return s;
    }
    function $862(l, e, s = []) {

        e.p = -1;


        if (_42.includes(l.tx)) {

            e.sp -= 3;

            var sym = s.slice(-3);

            s.splice(
                -3,
                3,
                { type: "ObjectBinding", nodes: [...sym[1]], pos }
            );

            return (e.p = 133, s);
        }

        return s;
    }
    function $863(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "...": s.push($binding_rest_property(l, e)); break;

            case "}": s = $990(l, e, _s(s, l, e, e.eh, _0)); break;
        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 135: s = $989(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![133].includes(a)) fail(l, e);

        return s;
    }
    function $865(l, e, s = []) {

        e.p = -1;


        if (_70.includes(l.tx)) { return $991(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $866(l, e, s = []) { e.p = -1; s = $_504(l, e, s); return s; }
    function $867(l, e, s = []) {

        e.p = -1;


        if (_42.includes(l.tx)) {

            e.sp -= 3;

            var sym = s.slice(-3);

            s.splice(
                -3,
                3,
                { type: "ArrayBinding", nodes: [...sym[1]], pos }
            );

            return (e.p = 134, s);
        }

        return s;
    }
    function $868(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case ",": s = $358(l, e, _s(s, l, e, e.eh, _0)); break;

            case "...": s.push($binding_rest_element(l, e)); break;

            case "]": s = $994(l, e, _s(s, l, e, e.eh, _0)); break;
        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 155:

                    s = $992(l, e, s);

                    if (e.p < 0) s = $356(l, e, s);

                    break;


                case 142: s = $993(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![134].includes(a)) fail(l, e);

        return s;
    }
    function $869(l, e, s = []) { e.p = -1; s = $_504(l, e, s); return s; }
    function $870(l, e, s = []) { e.p = -1; s = $_507(l, e, s); return s; }
    function $871(l, e, s = []) { e.p = -1; s = $_507(l, e, s); return s; }
    function $875(l, e, s = []) {

        e.p = -1;


        if ([")", ",", ";", "]", "}"].includes(l.tx)) {

            e.sp -= 2;

            var sym = s.slice(-2);

            s.splice(-2, 2, sym[1]);

            return (e.p = 152, s);
        }

        return s;
    }
    function $878(l, e, s = []) {

        e.p = -1;


        if (_8.includes(l.tx)) { return $995(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $879(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "!": s.push($unary_expression(l, e)); break;

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($parenthesized(cp, e));

                if (e.p !== 131) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push(
                    $cover_parenthesized_expression_and_arrow_parameter_list(l, e)
                );

                break;


            case "++": s.push($update_expression(l, e)); break;

            case "+": s.push($unary_expression(l, e)); break;

            case "--": s.push($update_expression(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($unary_expression(cp, e));

                if (e.p !== 126) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case ";": s = $1016(l, e, _s(s, l, e, e.eh, _0)); break;

            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($arrow_function(l, e));

                break;


            case "await": s.push($await_expression(l, e)); break;

            case "class": s.push($class_expression(l, e)); break;

            case "delete": s.push($unary_expression(l, e)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function": s.push($function_expression(l, e)); break;

            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "import":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($import_meta(cp, e));

                if (e.p !== 95) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($import_call(l, e));

                break;


            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($new_expression(cp, e));

                if (e.p !== 91) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($new_target(l, e));

                break;


            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($super_property(cp, e));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($super_call(l, e));

                break;


            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "typeof": s.push($unary_expression(l, e)); break;

            case "void": s.push($unary_expression(l, e)); break;

            case "yield": s.push($yield_expression(l, e)); break;

            case "{": s.push($object_literal(l, e)); break;

            case "~": s.push($unary_expression(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $120(l, e, s); break;

                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $1015(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![36].includes(a)) fail(l, e);

        return s;
    }
    function $880(l, e, s = []) {

        e.p = -1;


        switch (l.tx) {

            case "in": return $996(l, e, _s(s, l, e, e.eh, _0));

            case "of": return $997(l, e, _s(s, l, e, e.eh, _0));
        }

        return s;
    }
    function $881(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "!": s.push($unary_expression(l, e)); break;

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($parenthesized(cp, e));

                if (e.p !== 131) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push(
                    $cover_parenthesized_expression_and_arrow_parameter_list(l, e)
                );

                break;


            case "++": s.push($update_expression(l, e)); break;

            case "+": s.push($unary_expression(l, e)); break;

            case "--": s.push($update_expression(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($unary_expression(cp, e));

                if (e.p !== 126) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case ";": s = $1014(l, e, _s(s, l, e, e.eh, _0)); break;

            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($arrow_function(l, e));

                break;


            case "await": s.push($await_expression(l, e)); break;

            case "class": s.push($class_expression(l, e)); break;

            case "delete": s.push($unary_expression(l, e)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function": s.push($function_expression(l, e)); break;

            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "import":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($import_meta(cp, e));

                if (e.p !== 95) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($import_call(l, e));

                break;


            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($new_expression(cp, e));

                if (e.p !== 91) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($new_target(l, e));

                break;


            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($super_property(cp, e));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($super_call(l, e));

                break;


            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "typeof": s.push($unary_expression(l, e)); break;

            case "void": s.push($unary_expression(l, e)); break;

            case "yield": s.push($yield_expression(l, e)); break;

            case "{": s.push($object_literal(l, e)); break;

            case "~": s.push($unary_expression(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $120(l, e, s); break;

                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $1013(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![36].includes(a)) fail(l, e);

        return s;
    }
    function $882(l, e, s = []) {

        e.p = -1;


        if (_8.includes(l.tx)) {

            e.sp -= 1;

            return (e.p = 34, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }
    function $885(l, e, s = []) { e.p = -1; s = $_519(l, e, s); return s; }
    function $886(l, e, s = []) { s.push($for_binding(l, e, s)); e.sp++; return s; }
    function $887(l, e, s = []) { e.p = -1; s = $_519(l, e, s); return s; }
    function $888(l, e, s = []) {

        e.p = -1;


        if (_33.includes(l.tx)) { return $1003(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $889(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case ")": s = $1008(l, e, _s(s, l, e, e.eh, _0)); break;

            case "...": s.push($binding_rest_element(l, e)); break;

            case "[": s.push($array_binding_pattern(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async": s = $11(l, e, _s(s, l, e, e.eh, _0)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "{": s.push($object_binding_pattern(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;
                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $211(l, e, s); break;

                case 179: s = $236(l, e, s); break;

                case 142: s = $793(l, e, s); break;

                case 141: s = $234(l, e, s); break;

                case 140: s = $233(l, e, s); break;

                case 134: s = $213(l, e, s); break;

                case 133: s = $212(l, e, s); break;

                case 132: s = $235(l, e, s); break;

                case 73: s = $239(l, e, s); break;

                case 72: s = $791(l, e, s); break;

                case 71:

                    s = $792(l, e, s);

                    if (e.p < 0) s = $238(l, e, s);

                    break;


                case 69: s = $895(l, e, s); break;

                case 68: s = $1007(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![87].includes(a)) fail(l, e);

        return s;
    }
    function $890(l, e, s = []) {

        e.p = -1;


        if (_68.includes(l.tx)) { return $1004(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $891(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_100(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $211(l, e, s); break;

                case 179: s = $236(l, e, s); break;

                case 141: s = $234(l, e, s); break;

                case 140: s = $233(l, e, s); break;

                case 134: s = $213(l, e, s); break;

                case 133: s = $212(l, e, s); break;

                case 132: s = $235(l, e, s); break;

                case 88: s = $1005(l, e, s); break;

                case 73: s = $1006(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![87].includes(a)) fail(l, e);

        return s;
    }
    function $892(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case ")": s = $1012(l, e, _s(s, l, e, e.eh, _0)); break;

            case "...": s.push($binding_rest_element(l, e)); break;

            case "[": s.push($array_binding_pattern(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async": s = $11(l, e, _s(s, l, e, e.eh, _0)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "{": s.push($object_binding_pattern(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;
                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $211(l, e, s); break;

                case 179: s = $236(l, e, s); break;

                case 142: s = $793(l, e, s); break;

                case 141: s = $234(l, e, s); break;

                case 140: s = $233(l, e, s); break;

                case 134: s = $213(l, e, s); break;

                case 133: s = $212(l, e, s); break;

                case 132: s = $235(l, e, s); break;

                case 73: s = $239(l, e, s); break;

                case 72: s = $791(l, e, s); break;

                case 71:

                    s = $792(l, e, s);

                    if (e.p < 0) s = $238(l, e, s);

                    break;


                case 69: s = $895(l, e, s); break;

                case 68: s = $1011(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![87].includes(a)) fail(l, e);

        return s;
    }
    function $893(l, e, s = []) {

        e.p = -1;


        if (_68.includes(l.tx)) { return $1009(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $894(l, e, s = []) {

        e.p = -1;


        if (_35.includes(l.tx)) { return $1010(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $895(l, e, s = []) {

        e.p = -1;


        if (_68.includes(l.tx)) {

            e.sp -= 1;

            return (e.p = 68, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }
    function $896(l, e, s = []) {

        e.p = -1;


        if (_47.includes(l.tx)) {

            e.sp -= 3;

            var sym = s.slice(-3);

            s.splice(
                -3,
                3,
                { type: "ComputedProperty", nodes: [sym[1]], pos }
            );

            return (e.p = 150, s);
        }

        return s;
    }
    function $897(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 3;

            var sym = s.slice(-3);

            s.splice(
                -3,
                3,
                (
                    sym[2].type |= e.cls.PROPERTY_NAME,
                    {

                        type: "MemberExpression",

                        nodes: [sym[0], sym[2]],

                        pos,

                        COMPUTED: false
                    })
            );

            return (e.p = 105, s);
        }

        return s;
    }
    function $898(l, e, s = []) {

        e.p = -1;


        if (_70.includes(l.tx)) { return $1017(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $900(l, e, s = []) {

        e.p = -1;


        if (_70.includes(l.tx)) { return $1018(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $908(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 4;

            var sym = s.slice(-4);

            s.splice(-4, 4, { type: "ObjectLiteral", nodes: sym[1], pos });

            return (e.p = 145, s);
        }

        return s;
    }
    function $909(l, e, s = []) {

        e.p = -1;


        if (l.END || _38.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 4;

            var sym = s.slice(-4);

            s.splice(
                -4,
                4,
                {

                    type: "ExportDeclaration",

                    nodes: [null, sym[2]],

                    DEFAULT: false,

                    pos
                }
            );

            return (e.p = 16, s);
        }

        return s;
    }
    function $911(l, e, s = []) {

        e.p = -1;


        if (l.END || _38.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 4;

            var sym = s.slice(-4);

            s.splice(
                -4,
                4,
                {

                    type: "ExportDeclaration",

                    nodes: [sym[1], sym[2]],

                    DEFAULT: false,

                    pos
                }
            );

            return (e.p = 16, s);
        }

        return s;
    }
    function $915(l, e, s = []) {

        s.push($assignment_expression(l, e, s));

        e.sp++;

        return s;
    }
    function $916(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_262(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $120(l, e, s); break;

                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 156: s = $1022(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $1021(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![154].includes(a)) fail(l, e);

        return s;
    }
    function $917(l, e, s = []) { e.p = -1; s = $_546(l, e, s); return s; }
    function $918(l, e, s = []) { e.p = -1; s = $_546(l, e, s); return s; }
    function $919(l, e, s = []) {

        e.p = -1;


        if (l.END || _38.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 4;

            var sym = s.slice(-4);

            s.splice(
                -4,
                4,
                {

                    type: "ExportDeclaration",

                    nodes: [sym[2]],

                    DEFAULT: true,

                    pos
                }
            );

            return (e.p = 16, s);
        }

        return s;
    }
    function $920(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case ")": s = $1024(l, e, _s(s, l, e, e.eh, _0)); break;

            case "...": s.push($binding_rest_element(l, e)); break;

            case "[": s.push($array_binding_pattern(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async": s = $11(l, e, _s(s, l, e, e.eh, _0)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "{": s.push($object_binding_pattern(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;
                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $211(l, e, s); break;

                case 179: s = $236(l, e, s); break;

                case 142: s = $793(l, e, s); break;

                case 141: s = $234(l, e, s); break;

                case 140: s = $233(l, e, s); break;

                case 134: s = $213(l, e, s); break;

                case 133: s = $212(l, e, s); break;

                case 132: s = $235(l, e, s); break;

                case 73: s = $239(l, e, s); break;

                case 72: s = $791(l, e, s); break;

                case 71:

                    s = $792(l, e, s);

                    if (e.p < 0) s = $238(l, e, s);

                    break;


                case 69: s = $1023(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![67].includes(a)) fail(l, e);

        return s;
    }
    function $921(l, e, s = []) {

        e.p = -1;


        if (_33.includes(l.tx)) { return $1025(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $922(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case ")": s = $1030(l, e, _s(s, l, e, e.eh, _0)); break;

            case "...": s.push($binding_rest_element(l, e)); break;

            case "[": s.push($array_binding_pattern(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async": s = $11(l, e, _s(s, l, e, e.eh, _0)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "{": s.push($object_binding_pattern(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;
                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $211(l, e, s); break;

                case 179: s = $236(l, e, s); break;

                case 142: s = $793(l, e, s); break;

                case 141: s = $234(l, e, s); break;

                case 140: s = $233(l, e, s); break;

                case 134: s = $213(l, e, s); break;

                case 133: s = $212(l, e, s); break;

                case 132: s = $235(l, e, s); break;

                case 73: s = $239(l, e, s); break;

                case 72: s = $791(l, e, s); break;

                case 71:

                    s = $792(l, e, s);

                    if (e.p < 0) s = $238(l, e, s);

                    break;


                case 69: s = $1029(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![67].includes(a)) fail(l, e);

        return s;
    }
    function $923(l, e, s = []) {

        e.p = -1;


        if (_33.includes(l.tx)) { return $1026(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $924(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case ")": s = $1036(l, e, _s(s, l, e, e.eh, _0)); break;

            case "...": s.push($binding_rest_element(l, e)); break;

            case "[": s.push($array_binding_pattern(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async": s = $11(l, e, _s(s, l, e, e.eh, _0)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "{": s.push($object_binding_pattern(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;
                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $211(l, e, s); break;

                case 179: s = $236(l, e, s); break;

                case 142: s = $793(l, e, s); break;

                case 141: s = $234(l, e, s); break;

                case 140: s = $233(l, e, s); break;

                case 134: s = $213(l, e, s); break;

                case 133: s = $212(l, e, s); break;

                case 132: s = $235(l, e, s); break;

                case 73: s = $239(l, e, s); break;

                case 72: s = $791(l, e, s); break;

                case 71:

                    s = $792(l, e, s);

                    if (e.p < 0) s = $238(l, e, s);

                    break;


                case 69: s = $1035(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![66].includes(a)) fail(l, e);

        return s;
    }
    function $925(l, e, s = []) {

        e.p = -1;


        if (_68.includes(l.tx)) { return $1027(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $926(l, e, s = []) {

        e.p = -1;


        if (_35.includes(l.tx)) { return $1028(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $927(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case ")": s = $1046(l, e, _s(s, l, e, e.eh, _0)); break;

            case "...": s.push($binding_rest_element(l, e)); break;

            case "[": s.push($array_binding_pattern(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async": s = $11(l, e, _s(s, l, e, e.eh, _0)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "{": s.push($object_binding_pattern(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;
                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $211(l, e, s); break;

                case 179: s = $236(l, e, s); break;

                case 142: s = $793(l, e, s); break;

                case 141: s = $234(l, e, s); break;

                case 140: s = $233(l, e, s); break;

                case 134: s = $213(l, e, s); break;

                case 133: s = $212(l, e, s); break;

                case 132: s = $235(l, e, s); break;

                case 73: s = $239(l, e, s); break;

                case 72: s = $791(l, e, s); break;

                case 71:

                    s = $792(l, e, s);

                    if (e.p < 0) s = $238(l, e, s);

                    break;


                case 69: s = $1045(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![66].includes(a)) fail(l, e);

        return s;
    }
    function $928(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case ")": s = $1041(l, e, _s(s, l, e, e.eh, _0)); break;

            case "...": s.push($binding_rest_element(l, e)); break;

            case "[": s.push($array_binding_pattern(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async": s = $11(l, e, _s(s, l, e, e.eh, _0)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "{": s.push($object_binding_pattern(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;
                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $211(l, e, s); break;

                case 179: s = $236(l, e, s); break;

                case 142: s = $793(l, e, s); break;

                case 141: s = $234(l, e, s); break;

                case 140: s = $233(l, e, s); break;

                case 134: s = $213(l, e, s); break;

                case 133: s = $212(l, e, s); break;

                case 132: s = $235(l, e, s); break;

                case 73: s = $239(l, e, s); break;

                case 72: s = $791(l, e, s); break;

                case 71:

                    s = $792(l, e, s);

                    if (e.p < 0) s = $238(l, e, s);

                    break;


                case 69: s = $1040(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![67].includes(a)) fail(l, e);

        return s;
    }
    function $929(l, e, s = []) {

        e.p = -1;


        if (_68.includes(l.tx)) { return $1031(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $930(l, e, s = []) {

        e.p = -1;


        if (_35.includes(l.tx)) { return $1032(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $931(l, e, s = []) {

        e.p = -1;


        if (_68.includes(l.tx)) { return $1033(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $932(l, e, s = []) {

        e.p = -1;


        if (_35.includes(l.tx)) { return $1034(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $933(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case ")": s = $1051(l, e, _s(s, l, e, e.eh, _0)); break;

            case "...": s.push($binding_rest_element(l, e)); break;

            case "[": s.push($array_binding_pattern(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async": s = $11(l, e, _s(s, l, e, e.eh, _0)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "{": s.push($object_binding_pattern(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;
                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $211(l, e, s); break;

                case 179: s = $236(l, e, s); break;

                case 142: s = $793(l, e, s); break;

                case 141: s = $234(l, e, s); break;

                case 140: s = $233(l, e, s); break;

                case 134: s = $213(l, e, s); break;

                case 133: s = $212(l, e, s); break;

                case 132: s = $235(l, e, s); break;

                case 73: s = $239(l, e, s); break;

                case 72: s = $791(l, e, s); break;

                case 71:

                    s = $792(l, e, s);

                    if (e.p < 0) s = $238(l, e, s);

                    break;


                case 69: s = $1050(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![66].includes(a)) fail(l, e);

        return s;
    }
    function $934(l, e, s = []) {

        e.p = -1;


        if (_68.includes(l.tx)) { return $1037(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $935(l, e, s = []) {

        e.p = -1;


        if (_35.includes(l.tx)) { return $1038(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $936(l, e, s = []) {

        e.p = -1;


        if (_35.includes(l.tx)) { return $1039(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $937(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "!": s.push($unary_expression(l, e)); break;

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($parenthesized(cp, e));

                if (e.p !== 131) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push(
                    $cover_parenthesized_expression_and_arrow_parameter_list(l, e)
                );

                break;


            case "++": s.push($update_expression(l, e)); break;

            case "+": s.push($unary_expression(l, e)); break;

            case "--": s.push($update_expression(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($unary_expression(cp, e));

                if (e.p !== 126) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case ";": s = $167(l, e, _s(s, l, e, e.eh, _0)); break;

            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($arrow_function(cp, e));

                if (e.p !== 78) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "await": s.push($await_expression(l, e)); break;

            case "break": s.push($break_statement(l, e)); break;

            case "class":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($class_expression(cp, e));

                if (e.p !== 83) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($class_declaration(l, e));

                break;


            case "const": s = $188(l, e, _s(s, l, e, e.eh, _0)); break;

            case "continue": s.push($continue_statement(l, e)); break;

            case "debugger": s.push($debugger_statement(l, e)); break;

            case "delete": s.push($unary_expression(l, e)); break;

            case "do": s.push($iteration_statement(l, e)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "for": s.push($iteration_statement(l, e)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "if": s.push($if_statement(l, e)); break;

            case "import":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($import_meta(cp, e));

                if (e.p !== 95) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($import_call(l, e));

                break;


            case "let": s = $187(l, e, _s(s, l, e, e.eh, _0)); break;

            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($new_expression(cp, e));

                if (e.p !== 91) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($new_target(l, e));

                break;


            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "return": s.push($return_statement(l, e)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($super_property(cp, e));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($super_call(l, e));

                break;


            case "switch": s.push($switch_statement(l, e)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "throw": s.push($throw_statement(l, e)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "try": s.push($try_statement(l, e)); break;

            case "typeof": s.push($unary_expression(l, e)); break;

            case "var": s.push($variable_statement(l, e)); break;

            case "void": s.push($unary_expression(l, e)); break;

            case "while": s.push($iteration_statement(l, e)); break;

            case "with": s.push($with_statement(l, e)); break;

            case "yield": s.push($yield_expression(l, e)); break;

            case "{":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($block(cp, e));

                if (e.p !== 29) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($object_literal(l, e));

                break;


            case "}": s = $1066(l, e, _s(s, l, e, e.eh, _0)); break;

            case "~": s.push($unary_expression(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180:

                    s = $120(l, e, s);

                    if (e.p < 0) s = $121(l, e, s);

                    break;


                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 177: s = $165(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $44(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 82: s = $182(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 75: s = $1067(l, e, s); break;

                case 74: s = $1065(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                case 66: s = $185(l, e, s); break;

                case 62: s = $186(l, e, s); break;

                case 61: s = $184(l, e, s); break;

                case 57: s = $30(l, e, s); break;

                case 56: s = $40(l, e, s); break;

                case 52: s = $39(l, e, s); break;

                case 50: s = $29(l, e, s); break;

                case 44: s = $170(l, e, s); break;

                case 43: s = $37(l, e, s); break;

                case 42: s = $38(l, e, s); break;

                case 41: s = $36(l, e, s); break;

                case 40: s = $35(l, e, s); break;

                case 39: s = $34(l, e, s); break;

                case 36: s = $169(l, e, s); break;

                case 33: s = $32(l, e, s); break;

                case 31: s = $28(l, e, s); break;

                case 30: s = $31(l, e, s); break;

                case 29: s = $41(l, e, s); break;

                case 28: s = $27(l, e, s); break;

                case 27: s = $33(l, e, s); break;

                case 26: s = $183(l, e, s); break;

                case 25: s = $26(l, e, s); break;

                case 24: s = $25(l, e, s); break;

                case 23: s = $228(l, e, s); break;

                case 22:

                    s = $969(l, e, s);

                    if (e.p < 0) s = $229(l, e, s);

                    break;


                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![67].includes(a)) fail(l, e);

        return s;
    }
    function $938(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "...": s.push($binding_rest_element(l, e)); break;

            case ")":

                e.sp -= 2;

                var sym = s.slice(-2);

                s.splice(
                    -2,
                    2,
                    { type: "FormalParameters", nodes: sym[0], pos }
                );

                return (e.p = 69, s);

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 142: s = $793(l, e, s); break;

                case 72: s = $1042(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![69].includes(a)) fail(l, e);

        return s;
    }
    function $939(l, e, s = []) {

        e.p = -1;


        if (_68.includes(l.tx)) { return $1043(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $940(l, e, s = []) {

        e.p = -1;


        if (_35.includes(l.tx)) { return $1044(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $941(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "*": s.push($method_definition(l, e)); break;

            case "-": s.push($numeric_literal(l, e)); break;

            case ";": s = $307(l, e, _s(s, l, e, e.eh, _0)); break;

            case "[": s.push($computed_property_name(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($method_definition(l, e));

                break;


            case "await": s = $262(l, e, _s(s, l, e, e.eh, _0)); break;

            case "break": s = $263(l, e, _s(s, l, e, e.eh, _0)); break;

            case "case": s = $264(l, e, _s(s, l, e, e.eh, _0)); break;

            case "catch": s = $265(l, e, _s(s, l, e, e.eh, _0)); break;

            case "class": s = $266(l, e, _s(s, l, e, e.eh, _0)); break;

            case "const": s = $267(l, e, _s(s, l, e, e.eh, _0)); break;

            case "continue": s = $268(l, e, _s(s, l, e, e.eh, _0)); break;

            case "debugger": s = $269(l, e, _s(s, l, e, e.eh, _0)); break;

            case "default": s = $270(l, e, _s(s, l, e, e.eh, _0)); break;

            case "delete": s = $271(l, e, _s(s, l, e, e.eh, _0)); break;

            case "do": s = $272(l, e, _s(s, l, e, e.eh, _0)); break;

            case "else": s = $273(l, e, _s(s, l, e, e.eh, _0)); break;

            case "export": s = $274(l, e, _s(s, l, e, e.eh, _0)); break;

            case "extends": s = $275(l, e, _s(s, l, e, e.eh, _0)); break;

            case "false": s = $261(l, e, _s(s, l, e, e.eh, _0)); break;

            case "finally": s = $276(l, e, _s(s, l, e, e.eh, _0)); break;

            case "for": s = $277(l, e, _s(s, l, e, e.eh, _0)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function": s = $278(l, e, _s(s, l, e, e.eh, _0)); break;

            case "get":

                var cp = l.copy(), _sym = null;

                _sym = $12(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($method_definition(l, e));

                break;


            case "if": s = $279(l, e, _s(s, l, e, e.eh, _0)); break;

            case "implements": s = $296(l, e, _s(s, l, e, e.eh, _0)); break;

            case "import": s = $280(l, e, _s(s, l, e, e.eh, _0)); break;

            case "in": s = $281(l, e, _s(s, l, e, e.eh, _0)); break;

            case "instanceof": s = $282(l, e, _s(s, l, e, e.eh, _0)); break;

            case "interface": s = $299(l, e, _s(s, l, e, e.eh, _0)); break;

            case "new": s = $283(l, e, _s(s, l, e, e.eh, _0)); break;

            case "null": s = $259(l, e, _s(s, l, e, e.eh, _0)); break;

            case "package": s = $297(l, e, _s(s, l, e, e.eh, _0)); break;

            case "private": s = $300(l, e, _s(s, l, e, e.eh, _0)); break;

            case "protected": s = $298(l, e, _s(s, l, e, e.eh, _0)); break;

            case "public": s = $301(l, e, _s(s, l, e, e.eh, _0)); break;

            case "return": s = $284(l, e, _s(s, l, e, e.eh, _0)); break;

            case "set":

                var cp = l.copy(), _sym = null;

                _sym = $13(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($method_definition(l, e));

                break;


            case "static": s.push($class_element(l, e)); break;

            case "super": s = $285(l, e, _s(s, l, e, e.eh, _0)); break;

            case "switch": s = $286(l, e, _s(s, l, e, e.eh, _0)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $287(l, e, _s(s, l, e, e.eh, _0)); break;

            case "throw": s = $288(l, e, _s(s, l, e, e.eh, _0)); break;

            case "true": s = $260(l, e, _s(s, l, e, e.eh, _0)); break;

            case "try": s = $289(l, e, _s(s, l, e, e.eh, _0)); break;

            case "typeof": s = $290(l, e, _s(s, l, e, e.eh, _0)); break;

            case "var": s = $291(l, e, _s(s, l, e, e.eh, _0)); break;

            case "void": s = $292(l, e, _s(s, l, e, e.eh, _0)); break;

            case "while": s = $293(l, e, _s(s, l, e, e.eh, _0)); break;

            case "with": s = $294(l, e, _s(s, l, e, e.eh, _0)); break;

            case "yield": s = $295(l, e, _s(s, l, e, e.eh, _0)); break;

            case "}": s = $1060(l, e, _s(s, l, e, e.eh, _0)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1: s = $135(l, e, _s(s, l, e, e.eh, _0)); break;
                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 186: s = $257(l, e, s); break;

                case 185: s = $254(l, e, s); break;

                case 184: s = $258(l, e, s); break;

                case 183: s = $255(l, e, s); break;

                case 182: s = $256(l, e, s); break;

                case 181: s = $251(l, e, s); break;

                case 173: s = $253(l, e, s); break;

                case 169: s = $252(l, e, s); break;

                case 150: s = $250(l, e, s); break;

                case 149: s = $249(l, e, s); break;

                case 148: s = $248(l, e, s); break;

                case 87: s = $308(l, e, s); break;

                case 86: s = $305(l, e, s); break;

                case 85:

                    s = $1059(l, e, s);

                    if (e.p < 0) s = $306(l, e, s);

                    break;


                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![83].includes(a)) fail(l, e);

        return s;
    }
    function $942(l, e, s = []) {

        e.p = -1;


        if (_68.includes(l.tx)) { return $1047(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $943(l, e, s = []) {

        e.p = -1;


        if (_35.includes(l.tx)) { return $1048(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $944(l, e, s = []) {

        e.p = -1;


        if (_35.includes(l.tx)) { return $1049(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $945(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "!": s.push($unary_expression(l, e)); break;

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($parenthesized(cp, e));

                if (e.p !== 131) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push(
                    $cover_parenthesized_expression_and_arrow_parameter_list(l, e)
                );

                break;


            case "++": s.push($update_expression(l, e)); break;

            case "+": s.push($unary_expression(l, e)); break;

            case "--": s.push($update_expression(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($unary_expression(cp, e));

                if (e.p !== 126) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case ";": s = $167(l, e, _s(s, l, e, e.eh, _0)); break;

            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($arrow_function(cp, e));

                if (e.p !== 78) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "await": s.push($await_expression(l, e)); break;

            case "break": s.push($break_statement(l, e)); break;

            case "class":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($class_expression(cp, e));

                if (e.p !== 83) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($class_declaration(l, e));

                break;


            case "const": s = $188(l, e, _s(s, l, e, e.eh, _0)); break;

            case "continue": s.push($continue_statement(l, e)); break;

            case "debugger": s.push($debugger_statement(l, e)); break;

            case "delete": s.push($unary_expression(l, e)); break;

            case "do": s.push($iteration_statement(l, e)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "for": s.push($iteration_statement(l, e)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "if": s.push($if_statement(l, e)); break;

            case "import":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($import_meta(cp, e));

                if (e.p !== 95) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($import_call(l, e));

                break;


            case "let": s = $187(l, e, _s(s, l, e, e.eh, _0)); break;

            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($new_expression(cp, e));

                if (e.p !== 91) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($new_target(l, e));

                break;


            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "return": s.push($return_statement(l, e)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($super_property(cp, e));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($super_call(l, e));

                break;


            case "switch": s.push($switch_statement(l, e)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "throw": s.push($throw_statement(l, e)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "try": s.push($try_statement(l, e)); break;

            case "typeof": s.push($unary_expression(l, e)); break;

            case "var": s.push($variable_statement(l, e)); break;

            case "void": s.push($unary_expression(l, e)); break;

            case "while": s.push($iteration_statement(l, e)); break;

            case "with": s.push($with_statement(l, e)); break;

            case "yield": s.push($yield_expression(l, e)); break;

            case "{":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($block(cp, e));

                if (e.p !== 29) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($object_literal(l, e));

                break;


            case "}": s = $1069(l, e, _s(s, l, e, e.eh, _0)); break;

            case "~": s.push($unary_expression(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180:

                    s = $120(l, e, s);

                    if (e.p < 0) s = $121(l, e, s);

                    break;


                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 177: s = $165(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $44(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 82: s = $182(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 75: s = $1067(l, e, s); break;

                case 74: s = $1068(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                case 66: s = $185(l, e, s); break;

                case 62: s = $186(l, e, s); break;

                case 61: s = $184(l, e, s); break;

                case 57: s = $30(l, e, s); break;

                case 56: s = $40(l, e, s); break;

                case 52: s = $39(l, e, s); break;

                case 50: s = $29(l, e, s); break;

                case 44: s = $170(l, e, s); break;

                case 43: s = $37(l, e, s); break;

                case 42: s = $38(l, e, s); break;

                case 41: s = $36(l, e, s); break;

                case 40: s = $35(l, e, s); break;

                case 39: s = $34(l, e, s); break;

                case 36: s = $169(l, e, s); break;

                case 33: s = $32(l, e, s); break;

                case 31: s = $28(l, e, s); break;

                case 30: s = $31(l, e, s); break;

                case 29: s = $41(l, e, s); break;

                case 28: s = $27(l, e, s); break;

                case 27: s = $33(l, e, s); break;

                case 26: s = $183(l, e, s); break;

                case 25: s = $26(l, e, s); break;

                case 24: s = $25(l, e, s); break;

                case 23: s = $228(l, e, s); break;

                case 22:

                    s = $969(l, e, s);

                    if (e.p < 0) s = $229(l, e, s);

                    break;


                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![66].includes(a)) fail(l, e);

        return s;
    }
    function $946(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "*": s.push($method_definition(l, e)); break;

            case "-": s.push($numeric_literal(l, e)); break;

            case ";": s = $307(l, e, _s(s, l, e, e.eh, _0)); break;

            case "[": s.push($computed_property_name(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($method_definition(l, e));

                break;


            case "await": s = $262(l, e, _s(s, l, e, e.eh, _0)); break;

            case "break": s = $263(l, e, _s(s, l, e, e.eh, _0)); break;

            case "case": s = $264(l, e, _s(s, l, e, e.eh, _0)); break;

            case "catch": s = $265(l, e, _s(s, l, e, e.eh, _0)); break;

            case "class": s = $266(l, e, _s(s, l, e, e.eh, _0)); break;

            case "const": s = $267(l, e, _s(s, l, e, e.eh, _0)); break;

            case "continue": s = $268(l, e, _s(s, l, e, e.eh, _0)); break;

            case "debugger": s = $269(l, e, _s(s, l, e, e.eh, _0)); break;

            case "default": s = $270(l, e, _s(s, l, e, e.eh, _0)); break;

            case "delete": s = $271(l, e, _s(s, l, e, e.eh, _0)); break;

            case "do": s = $272(l, e, _s(s, l, e, e.eh, _0)); break;

            case "else": s = $273(l, e, _s(s, l, e, e.eh, _0)); break;

            case "export": s = $274(l, e, _s(s, l, e, e.eh, _0)); break;

            case "extends": s = $275(l, e, _s(s, l, e, e.eh, _0)); break;

            case "false": s = $261(l, e, _s(s, l, e, e.eh, _0)); break;

            case "finally": s = $276(l, e, _s(s, l, e, e.eh, _0)); break;

            case "for": s = $277(l, e, _s(s, l, e, e.eh, _0)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function": s = $278(l, e, _s(s, l, e, e.eh, _0)); break;

            case "get":

                var cp = l.copy(), _sym = null;

                _sym = $12(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($method_definition(l, e));

                break;


            case "if": s = $279(l, e, _s(s, l, e, e.eh, _0)); break;

            case "implements": s = $296(l, e, _s(s, l, e, e.eh, _0)); break;

            case "import": s = $280(l, e, _s(s, l, e, e.eh, _0)); break;

            case "in": s = $281(l, e, _s(s, l, e, e.eh, _0)); break;

            case "instanceof": s = $282(l, e, _s(s, l, e, e.eh, _0)); break;

            case "interface": s = $299(l, e, _s(s, l, e, e.eh, _0)); break;

            case "new": s = $283(l, e, _s(s, l, e, e.eh, _0)); break;

            case "null": s = $259(l, e, _s(s, l, e, e.eh, _0)); break;

            case "package": s = $297(l, e, _s(s, l, e, e.eh, _0)); break;

            case "private": s = $300(l, e, _s(s, l, e, e.eh, _0)); break;

            case "protected": s = $298(l, e, _s(s, l, e, e.eh, _0)); break;

            case "public": s = $301(l, e, _s(s, l, e, e.eh, _0)); break;

            case "return": s = $284(l, e, _s(s, l, e, e.eh, _0)); break;

            case "set":

                var cp = l.copy(), _sym = null;

                _sym = $13(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($method_definition(l, e));

                break;


            case "static": s.push($class_element(l, e)); break;

            case "super": s = $285(l, e, _s(s, l, e, e.eh, _0)); break;

            case "switch": s = $286(l, e, _s(s, l, e, e.eh, _0)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $287(l, e, _s(s, l, e, e.eh, _0)); break;

            case "throw": s = $288(l, e, _s(s, l, e, e.eh, _0)); break;

            case "true": s = $260(l, e, _s(s, l, e, e.eh, _0)); break;

            case "try": s = $289(l, e, _s(s, l, e, e.eh, _0)); break;

            case "typeof": s = $290(l, e, _s(s, l, e, e.eh, _0)); break;

            case "var": s = $291(l, e, _s(s, l, e, e.eh, _0)); break;

            case "void": s = $292(l, e, _s(s, l, e, e.eh, _0)); break;

            case "while": s = $293(l, e, _s(s, l, e, e.eh, _0)); break;

            case "with": s = $294(l, e, _s(s, l, e, e.eh, _0)); break;

            case "yield": s = $295(l, e, _s(s, l, e, e.eh, _0)); break;

            case "}": s = $1062(l, e, _s(s, l, e, e.eh, _0)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1: s = $135(l, e, _s(s, l, e, e.eh, _0)); break;
                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 186: s = $257(l, e, s); break;

                case 185: s = $254(l, e, s); break;

                case 184: s = $258(l, e, s); break;

                case 183: s = $255(l, e, s); break;

                case 182: s = $256(l, e, s); break;

                case 181: s = $251(l, e, s); break;

                case 173: s = $253(l, e, s); break;

                case 169: s = $252(l, e, s); break;

                case 150: s = $250(l, e, s); break;

                case 149: s = $249(l, e, s); break;

                case 148: s = $248(l, e, s); break;

                case 87: s = $308(l, e, s); break;

                case 86: s = $305(l, e, s); break;

                case 85:

                    s = $1061(l, e, s);

                    if (e.p < 0) s = $306(l, e, s);

                    break;


                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![82].includes(a)) fail(l, e);

        return s;
    }
    function $947(l, e, s = []) {

        e.p = -1;


        if (_9.includes(l.tx)) {

            e.sp -= 4;

            var sym = s.slice(-4);

            s.splice(
                -4,
                4,
                {

                    type: "ArrowFunction",

                    ASYNC: !!sym[0],

                    nodes: [sym[1], sym[3]],

                    pos
                }
            );

            return (e.p = 78, s);
        }

        return s;
    }
    function $948(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 4;

            var sym = s.slice(-4);

            s.splice(
                -4,
                4,
                { type: "Class", nodes: [null, null, ...sym[2]], pos }
            );

            return (e.p = 83, s);
        }

        return s;
    }
    function $949(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 4;

            var sym = s.slice(-4);

            s.splice(
                -4,
                4,
                {

                    type: "MemberExpression",

                    nodes: [sym[0], sym[2]],

                    pos,

                    COMPUTED: true
                }
            );

            return (e.p = 97, s);
        }

        return s;
    }
    function $950(l, e, s = []) {

        e.p = -1;


        if (l.END || _5.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 4;

            var sym = s.slice(-4);

            s.splice(
                -4,
                4,
                { type: "Class", nodes: [null, null, ...sym[2]], pos }
            );

            return (e.p = 82, s);
        }

        return s;
    }
    function $951(l, e, s = []) {

        e.p = -1;


        if (_52.includes(l.tx)) { return $1052(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $952(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 4;

            var sym = s.slice(-4);

            s.splice(-4, 4, { type: "Class", nodes: [null, sym[1]], pos });

            return (e.p = 83, s);
        }

        return s;
    }
    function $953(l, e, s = []) {

        e.p = -1;


        if (_52.includes(l.tx)) { return $1053(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $954(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 4;

            var sym = s.slice(-4);

            s.splice(-4, 4, { type: "Class", nodes: [sym[1], null], pos });

            return (e.p = 83, s);
        }

        return s;
    }
    function $955(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 4;

            var sym = s.slice(-4);

            s.splice(
                -4,
                4,
                {

                    type: "MemberExpression",

                    nodes: [sym[0], sym[2]],

                    pos,

                    COMPUTED: true
                }
            );

            return (e.p = 92, s);
        }

        return s;
    }
    function $956(l, e, s = []) {

        e.p = -1;


        if (_52.includes(l.tx)) { return $1054(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $957(l, e, s = []) {

        e.p = -1;


        if (l.END || _5.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 4;

            var sym = s.slice(-4);

            s.splice(-4, 4, { type: "Class", nodes: [sym[1], null], pos });

            return (e.p = 82, s);
        }

        return s;
    }
    function $958(l, e, s = []) {

        e.p = -1;


        if (_68.includes(l.tx)) { return $1055(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $959(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 3;

            var sym = s.slice(-3);

            s.splice(-3, 3, { type: "Arguments", nodes: sym[1] || [], pos });

            return (e.p = 100, s);
        }

        return s;
    }
    function $960(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 3;

            var sym = s.slice(-3);

            s.splice(-3, 3, { type: "Arguments", nodes: null || [], pos });

            return (e.p = 100, s);
        }

        return s;
    }
    function $964(l, e, s = []) {

        e.p = -1;


        if (_52.includes(l.tx)) { return $1058(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $965(l, e, s = []) {

        e.p = -1;


        if (l.END || _5.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 4;

            var sym = s.slice(-4);

            s.splice(-4, 4, { type: "Class", nodes: [null, sym[1]], pos });

            return (e.p = 82, s);
        }

        return s;
    }
    function $966(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 4;

            var sym = s.slice(-4);

            s.splice(-4, 4, { type: "ImportCall", nodes: [sym[2]], pos });

            return (e.p = 99, s);
        }

        return s;
    }
    function $967(l, e, s = []) {

        e.p = -1;


        if (["of"].includes(l.tx)) { return $1063(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $968(l, e, s = []) {

        e.p = -1;


        if (_52.includes(l.tx)) { return $1064(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $969(l, e, s = []) {

        e.p = -1;


        if (_52.includes(l.tx)) {

            e.sp -= 1;

            return (e.p = 75, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }
    function $970(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 4;

            var sym = s.slice(-4);

            s.splice(
                -4,
                4,
                {

                    type: "SuperExpression",

                    nodes: [sym[2]],

                    pos,

                    COMPUTED: true
                }
            );

            return (e.p = 93, s);
        }

        return s;
    }
    function $971(l, e, s = []) { s.push($statement(l, e, s)); e.sp++; return s; }
    function $972(l, e, s = []) { s.push($case_block(l, e, s)); e.sp++; return s; }
    function $973(l, e, s = []) { s.push($statement(l, e, s)); e.sp++; return s; }
    function $974(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 4;

            var sym = s.slice(-4);

            s.splice(
                -4,
                4,
                {

                    type: "TryStatement",

                    nodes: [sym[1], sym[2], sym[3]],

                    pos
                }
            );

            return (e.p = 52, s);
        }

        return s;
    }
    function $975(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_100(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $211(l, e, s); break;

                case 179: s = $1073(l, e, s); break;

                case 134: s = $213(l, e, s); break;

                case 133: s = $212(l, e, s); break;

                case 132: s = $1074(l, e, s); break;

                case 55: s = $1072(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![53].includes(a)) fail(l, e);

        return s;
    }
    function $976(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 2;

            var sym = s.slice(-2);

            s.splice(
                -2,
                2,
                { type: "FinallyClause", nodes: [sym[1]], pos }
            );

            return (e.p = 54, s);
        }

        return s;
    }
    function $977(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_87(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $120(l, e, s); break;

                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $1077(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![36].includes(a)) fail(l, e);

        return s;
    }
    function $978(l, e, s = []) {

        e.p = -1;


        if (l.END || _38.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 4;

            var sym = s.slice(-4);

            s.splice(
                -4,
                4,
                {

                    type: "ImportDeclaration",

                    nodes: [sym[1], sym[2]],

                    pos
                }
            );

            return (e.p = 6, s);
        }

        return s;
    }
    function $979(l, e, s = []) { e.p = -1; s = $_602(l, e, s); return s; }
    function $980(l, e, s = []) { e.p = -1; s = $_602(l, e, s); return s; }
    function $985(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_104(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180:

                    s = $120(l, e, s);

                    if (e.p < 0) s = $121(l, e, s);

                    break;


                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 177: s = $165(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $44(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                case 57: s = $30(l, e, s); break;

                case 56: s = $40(l, e, s); break;

                case 52: s = $39(l, e, s); break;

                case 50: s = $29(l, e, s); break;

                case 44: s = $170(l, e, s); break;

                case 43: s = $37(l, e, s); break;

                case 42: s = $38(l, e, s); break;

                case 41: s = $36(l, e, s); break;

                case 40: s = $35(l, e, s); break;

                case 39: s = $34(l, e, s); break;

                case 36: s = $169(l, e, s); break;

                case 33: s = $32(l, e, s); break;

                case 31: s = $28(l, e, s); break;

                case 30: s = $31(l, e, s); break;

                case 29: s = $41(l, e, s); break;

                case 28: s = $27(l, e, s); break;

                case 27: s = $33(l, e, s); break;

                case 24: s = $1079(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![33].includes(a)) fail(l, e);

        return s;
    }
    function $986(l, e, s = []) {

        e.p = -1;


        if (_70.includes(l.tx)) { return $1076(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $987(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 4;

            var sym = s.slice(-4);

            s.splice(
                -4,
                4,
                { type: "ArrayLiteral", nodes: [...sym[1]], pos }
            );

            return (e.p = 153, s);
        }

        return s;
    }
    function $988(l, e, s = []) {

        e.p = -1;


        if (_40.includes(l.tx)) {

            e.sp -= 4;

            var sym = s.slice(-4);

            s.splice(
                -4,
                4,
                { type: "CaseClause", nodes: [sym[1], ...sym[3]], pos }
            );

            return (e.p = 48, s);
        }

        return s;
    }
    function $989(l, e, s = []) {

        e.p = -1;


        if (_52.includes(l.tx)) { return $1081(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $990(l, e, s = []) {

        e.p = -1;


        if (_42.includes(l.tx)) {

            e.sp -= 4;

            var sym = s.slice(-4);

            s.splice(
                -4,
                4,
                { type: "ObjectBinding", nodes: [...sym[1]], pos }
            );

            return (e.p = 133, s);
        }

        return s;
    }
    function $991(l, e, s = []) {

        e.p = -1;


        if (_42.includes(l.tx)) {

            e.sp -= 4;

            var sym = s.slice(-4);

            s.splice(
                -4,
                4,
                { type: "ArrayBinding", nodes: [sym[1], sym[2]], pos }
            );

            return (e.p = 134, s);
        }

        return s;
    }
    function $992(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "...": s.push($binding_rest_element(l, e)); break;

            case "]": s = $1083(l, e, _s(s, l, e, e.eh, _0)); break;
        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 142: s = $1082(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![134].includes(a)) fail(l, e);

        return s;
    }
    function $993(l, e, s = []) {

        e.p = -1;


        if (_70.includes(l.tx)) { return $1084(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $994(l, e, s = []) {

        e.p = -1;


        if (_42.includes(l.tx)) {

            e.sp -= 4;

            var sym = s.slice(-4);

            s.splice(
                -4,
                4,
                { type: "ArrayBinding", nodes: [...sym[1]], pos }
            );

            return (e.p = 134, s);
        }

        return s;
    }
    function $995(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "!": s.push($unary_expression(l, e)); break;

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($parenthesized(cp, e));

                if (e.p !== 131) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push(
                    $cover_parenthesized_expression_and_arrow_parameter_list(l, e)
                );

                break;


            case "++": s.push($update_expression(l, e)); break;

            case "+": s.push($unary_expression(l, e)); break;

            case "--": s.push($update_expression(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($unary_expression(cp, e));

                if (e.p !== 126) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case ";": s = $1097(l, e, _s(s, l, e, e.eh, _0)); break;

            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($arrow_function(l, e));

                break;


            case "await": s.push($await_expression(l, e)); break;

            case "class": s.push($class_expression(l, e)); break;

            case "delete": s.push($unary_expression(l, e)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function": s.push($function_expression(l, e)); break;

            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "import":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($import_meta(cp, e));

                if (e.p !== 95) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($import_call(l, e));

                break;


            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($new_expression(cp, e));

                if (e.p !== 91) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($new_target(l, e));

                break;


            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($super_property(cp, e));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($super_call(l, e));

                break;


            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "typeof": s.push($unary_expression(l, e)); break;

            case "void": s.push($unary_expression(l, e)); break;

            case "yield": s.push($yield_expression(l, e)); break;

            case "{": s.push($object_literal(l, e)); break;

            case "~": s.push($unary_expression(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $120(l, e, s); break;

                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $1096(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![36].includes(a)) fail(l, e);

        return s;
    }
    function $996(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_87(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $120(l, e, s); break;

                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $1085(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![36].includes(a)) fail(l, e);

        return s;
    }
    function $997(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_87(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $120(l, e, s); break;

                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $1093(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![36].includes(a)) fail(l, e);

        return s;
    }
    function $999(l, e, s = []) {

        e.p = -1;


        if (_73.includes(l.tx)) {

            e.sp -= 2;

            var sym = s.slice(-2);

            s.splice(
                -2,
                2,
                { type: "VariableDeclaration", nodes: [sym[0]], pos }
            );

            return (e.p = 35, s);
        }

        return s;
    }
    function $1000(l, e, s = []) { e.p = -1; s = $_619(l, e, s); return s; }
    function $1001(l, e, s = []) { e.p = -1; s = $_619(l, e, s); return s; }
    function $1002(l, e, s = []) {

        e.p = -1;


        if (_73.includes(l.tx)) {

            e.sp -= 2;

            var sym = s.slice(-2);

            s.splice(
                -2,
                2,
                {

                    type: "LexicalBinding",

                    nodes: [sym[1]],

                    symbol: sym[0],

                    pos
                }
            );

            return (e.p = 37, s);
        }

        return s;
    }
    function $1003(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case ")": s = $1091(l, e, _s(s, l, e, e.eh, _0)); break;

            case "...": s.push($binding_rest_element(l, e)); break;

            case "[": s.push($array_binding_pattern(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async": s = $11(l, e, _s(s, l, e, e.eh, _0)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "{": s.push($object_binding_pattern(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;
                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $211(l, e, s); break;

                case 179: s = $236(l, e, s); break;

                case 142: s = $793(l, e, s); break;

                case 141: s = $234(l, e, s); break;

                case 140: s = $233(l, e, s); break;

                case 134: s = $213(l, e, s); break;

                case 133: s = $212(l, e, s); break;

                case 132: s = $235(l, e, s); break;

                case 73: s = $239(l, e, s); break;

                case 72: s = $791(l, e, s); break;

                case 71:

                    s = $792(l, e, s);

                    if (e.p < 0) s = $238(l, e, s);

                    break;


                case 69: s = $895(l, e, s); break;

                case 68: s = $1090(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![87].includes(a)) fail(l, e);

        return s;
    }
    function $1004(l, e, s = []) {

        e.p = -1;


        if (_35.includes(l.tx)) { return $1086(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1005(l, e, s = []) {

        e.p = -1;


        if (_68.includes(l.tx)) { return $1087(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1006(l, e, s = []) {

        e.p = -1;


        if (_68.includes(l.tx)) {

            e.sp -= 1;

            return (e.p = 88, (s.splice(-1, 1, s[s.length - 1]), s));
        }

        return s;
    }
    function $1007(l, e, s = []) {

        e.p = -1;


        if (_68.includes(l.tx)) { return $1088(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1008(l, e, s = []) {

        e.p = -1;


        if (_35.includes(l.tx)) { return $1089(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1009(l, e, s = []) {

        e.p = -1;


        if (_35.includes(l.tx)) { return $1092(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1010(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "!": s.push($unary_expression(l, e)); break;

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($parenthesized(cp, e));

                if (e.p !== 131) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push(
                    $cover_parenthesized_expression_and_arrow_parameter_list(l, e)
                );

                break;


            case "++": s.push($update_expression(l, e)); break;

            case "+": s.push($unary_expression(l, e)); break;

            case "--": s.push($update_expression(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($unary_expression(cp, e));

                if (e.p !== 126) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case ";": s = $167(l, e, _s(s, l, e, e.eh, _0)); break;

            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($arrow_function(cp, e));

                if (e.p !== 78) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "await": s.push($await_expression(l, e)); break;

            case "break": s.push($break_statement(l, e)); break;

            case "class":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($class_expression(cp, e));

                if (e.p !== 83) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($class_declaration(l, e));

                break;


            case "const": s = $188(l, e, _s(s, l, e, e.eh, _0)); break;

            case "continue": s.push($continue_statement(l, e)); break;

            case "debugger": s.push($debugger_statement(l, e)); break;

            case "delete": s.push($unary_expression(l, e)); break;

            case "do": s.push($iteration_statement(l, e)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "for": s.push($iteration_statement(l, e)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "if": s.push($if_statement(l, e)); break;

            case "import":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($import_meta(cp, e));

                if (e.p !== 95) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($import_call(l, e));

                break;


            case "let": s = $187(l, e, _s(s, l, e, e.eh, _0)); break;

            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($new_expression(cp, e));

                if (e.p !== 91) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($new_target(l, e));

                break;


            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "return": s.push($return_statement(l, e)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($super_property(cp, e));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($super_call(l, e));

                break;


            case "switch": s.push($switch_statement(l, e)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "throw": s.push($throw_statement(l, e)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "try": s.push($try_statement(l, e)); break;

            case "typeof": s.push($unary_expression(l, e)); break;

            case "var": s.push($variable_statement(l, e)); break;

            case "void": s.push($unary_expression(l, e)); break;

            case "while": s.push($iteration_statement(l, e)); break;

            case "with": s.push($with_statement(l, e)); break;

            case "yield": s.push($yield_expression(l, e)); break;

            case "{":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($block(cp, e));

                if (e.p !== 29) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($object_literal(l, e));

                break;


            case "}": s = $1105(l, e, _s(s, l, e, e.eh, _0)); break;

            case "~": s.push($unary_expression(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180:

                    s = $120(l, e, s);

                    if (e.p < 0) s = $121(l, e, s);

                    break;


                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 177: s = $165(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $44(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 82: s = $182(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 75: s = $1067(l, e, s); break;

                case 74: s = $1104(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                case 66: s = $185(l, e, s); break;

                case 62: s = $186(l, e, s); break;

                case 61: s = $184(l, e, s); break;

                case 57: s = $30(l, e, s); break;

                case 56: s = $40(l, e, s); break;

                case 52: s = $39(l, e, s); break;

                case 50: s = $29(l, e, s); break;

                case 44: s = $170(l, e, s); break;

                case 43: s = $37(l, e, s); break;

                case 42: s = $38(l, e, s); break;

                case 41: s = $36(l, e, s); break;

                case 40: s = $35(l, e, s); break;

                case 39: s = $34(l, e, s); break;

                case 36: s = $169(l, e, s); break;

                case 33: s = $32(l, e, s); break;

                case 31: s = $28(l, e, s); break;

                case 30: s = $31(l, e, s); break;

                case 29: s = $41(l, e, s); break;

                case 28: s = $27(l, e, s); break;

                case 27: s = $33(l, e, s); break;

                case 26: s = $183(l, e, s); break;

                case 25: s = $26(l, e, s); break;

                case 24: s = $25(l, e, s); break;

                case 23: s = $228(l, e, s); break;

                case 22:

                    s = $969(l, e, s);

                    if (e.p < 0) s = $229(l, e, s);

                    break;


                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![87].includes(a)) fail(l, e);

        return s;
    }
    function $1011(l, e, s = []) {

        e.p = -1;


        if (_68.includes(l.tx)) { return $1094(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1012(l, e, s = []) {

        e.p = -1;


        if (_35.includes(l.tx)) { return $1095(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1013(l, e, s = []) {

        e.p = -1;


        if (_8.includes(l.tx)) { return $1098(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1014(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "!": s.push($unary_expression(l, e)); break;

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($parenthesized(cp, e));

                if (e.p !== 131) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push(
                    $cover_parenthesized_expression_and_arrow_parameter_list(l, e)
                );

                break;


            case ")":

                _s(s, l, e, e.eh, _0);

                e.ASI = true;

                s = $1101(l, e, s);

                break;


            case "++": s.push($update_expression(l, e)); break;

            case "+": s.push($unary_expression(l, e)); break;

            case "--": s.push($update_expression(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($unary_expression(cp, e));

                if (e.p !== 126) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($arrow_function(l, e));

                break;


            case "await": s.push($await_expression(l, e)); break;

            case "class": s.push($class_expression(l, e)); break;

            case "delete": s.push($unary_expression(l, e)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function": s.push($function_expression(l, e)); break;

            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "import":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($import_meta(cp, e));

                if (e.p !== 95) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($import_call(l, e));

                break;


            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($new_expression(cp, e));

                if (e.p !== 91) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($new_target(l, e));

                break;


            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($super_property(cp, e));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($super_call(l, e));

                break;


            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "typeof": s.push($unary_expression(l, e)); break;

            case "void": s.push($unary_expression(l, e)); break;

            case "yield": s.push($yield_expression(l, e)); break;

            case "{": s.push($object_literal(l, e)); break;

            case "~": s.push($unary_expression(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $120(l, e, s); break;

                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $1100(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![36].includes(a)) fail(l, e);

        return s;
    }
    function $1015(l, e, s = []) {

        e.p = -1;


        if (_8.includes(l.tx)) { return $1099(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1016(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "!": s.push($unary_expression(l, e)); break;

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($parenthesized(cp, e));

                if (e.p !== 131) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push(
                    $cover_parenthesized_expression_and_arrow_parameter_list(l, e)
                );

                break;


            case ")":

                _s(s, l, e, e.eh, _0);

                e.ASI = true;

                s = $1103(l, e, s);

                break;


            case "++": s.push($update_expression(l, e)); break;

            case "+": s.push($unary_expression(l, e)); break;

            case "--": s.push($update_expression(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($unary_expression(cp, e));

                if (e.p !== 126) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($arrow_function(l, e));

                break;


            case "await": s.push($await_expression(l, e)); break;

            case "class": s.push($class_expression(l, e)); break;

            case "delete": s.push($unary_expression(l, e)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function": s.push($function_expression(l, e)); break;

            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "import":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($import_meta(cp, e));

                if (e.p !== 95) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($import_call(l, e));

                break;


            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($new_expression(cp, e));

                if (e.p !== 91) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($new_target(l, e));

                break;


            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($super_property(cp, e));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($super_call(l, e));

                break;


            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "typeof": s.push($unary_expression(l, e)); break;

            case "void": s.push($unary_expression(l, e)); break;

            case "yield": s.push($yield_expression(l, e)); break;

            case "{": s.push($object_literal(l, e)); break;

            case "~": s.push($unary_expression(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $120(l, e, s); break;

                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $1102(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![36].includes(a)) fail(l, e);

        return s;
    }
    function $1017(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 4;

            var sym = s.slice(-4);

            s.splice(
                -4,
                4,
                {

                    type: "MemberExpression",

                    nodes: [sym[0], sym[2]],

                    pos,

                    COMPUTED: true
                }
            );

            return (e.p = 105, s);
        }

        return s;
    }
    function $1018(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 4;

            return (e.p = 105, (s.splice(-4, 4, s[s.length - 1]), s));
        }

        return s;
    }
    function $1020(l, e, s = []) {

        e.p = -1;


        if (_9.includes(l.tx)) {

            e.sp -= 5;

            var sym = s.slice(-5);

            s.splice(
                -5,
                5,
                {

                    type: "ConditionalExpression",

                    nodes: [sym[0], sym[2], sym[4]],

                    pos
                }
            );

            return (e.p = 110, s);
        }

        return s;
    }
    function $1021(l, e, s = []) { e.p = -1; s = $_639(l, e, s); return s; }
    function $1022(l, e, s = []) { e.p = -1; s = $_639(l, e, s); return s; }
    function $1023(l, e, s = []) {

        e.p = -1;


        if (_68.includes(l.tx)) { return $1106(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1024(l, e, s = []) {

        e.p = -1;


        if (_35.includes(l.tx)) { return $1107(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1025(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case ")": s = $1113(l, e, _s(s, l, e, e.eh, _0)); break;

            case "...": s.push($binding_rest_element(l, e)); break;

            case "[": s.push($array_binding_pattern(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async": s = $11(l, e, _s(s, l, e, e.eh, _0)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "{": s.push($object_binding_pattern(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;
                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $211(l, e, s); break;

                case 179: s = $236(l, e, s); break;

                case 142: s = $793(l, e, s); break;

                case 141: s = $234(l, e, s); break;

                case 140: s = $233(l, e, s); break;

                case 134: s = $213(l, e, s); break;

                case 133: s = $212(l, e, s); break;

                case 132: s = $235(l, e, s); break;

                case 73: s = $239(l, e, s); break;

                case 72: s = $791(l, e, s); break;

                case 71:

                    s = $792(l, e, s);

                    if (e.p < 0) s = $238(l, e, s);

                    break;


                case 69: s = $1112(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![67].includes(a)) fail(l, e);

        return s;
    }
    function $1026(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case ")": s = $1116(l, e, _s(s, l, e, e.eh, _0)); break;

            case "...": s.push($binding_rest_element(l, e)); break;

            case "[": s.push($array_binding_pattern(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async": s = $11(l, e, _s(s, l, e, e.eh, _0)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "{": s.push($object_binding_pattern(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;
                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $211(l, e, s); break;

                case 179: s = $236(l, e, s); break;

                case 142: s = $793(l, e, s); break;

                case 141: s = $234(l, e, s); break;

                case 140: s = $233(l, e, s); break;

                case 134: s = $213(l, e, s); break;

                case 133: s = $212(l, e, s); break;

                case 132: s = $235(l, e, s); break;

                case 73: s = $239(l, e, s); break;

                case 72: s = $791(l, e, s); break;

                case 71:

                    s = $792(l, e, s);

                    if (e.p < 0) s = $238(l, e, s);

                    break;


                case 69: s = $1115(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![66].includes(a)) fail(l, e);

        return s;
    }
    function $1027(l, e, s = []) {

        e.p = -1;


        if (_35.includes(l.tx)) { return $1108(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1028(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "!": s.push($unary_expression(l, e)); break;

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($parenthesized(cp, e));

                if (e.p !== 131) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push(
                    $cover_parenthesized_expression_and_arrow_parameter_list(l, e)
                );

                break;


            case "++": s.push($update_expression(l, e)); break;

            case "+": s.push($unary_expression(l, e)); break;

            case "--": s.push($update_expression(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($unary_expression(cp, e));

                if (e.p !== 126) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case ";": s = $167(l, e, _s(s, l, e, e.eh, _0)); break;

            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($arrow_function(cp, e));

                if (e.p !== 78) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "await": s.push($await_expression(l, e)); break;

            case "break": s.push($break_statement(l, e)); break;

            case "class":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($class_expression(cp, e));

                if (e.p !== 83) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($class_declaration(l, e));

                break;


            case "const": s = $188(l, e, _s(s, l, e, e.eh, _0)); break;

            case "continue": s.push($continue_statement(l, e)); break;

            case "debugger": s.push($debugger_statement(l, e)); break;

            case "delete": s.push($unary_expression(l, e)); break;

            case "do": s.push($iteration_statement(l, e)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "for": s.push($iteration_statement(l, e)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "if": s.push($if_statement(l, e)); break;

            case "import":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($import_meta(cp, e));

                if (e.p !== 95) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($import_call(l, e));

                break;


            case "let": s = $187(l, e, _s(s, l, e, e.eh, _0)); break;

            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($new_expression(cp, e));

                if (e.p !== 91) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($new_target(l, e));

                break;


            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "return": s.push($return_statement(l, e)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($super_property(cp, e));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($super_call(l, e));

                break;


            case "switch": s.push($switch_statement(l, e)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "throw": s.push($throw_statement(l, e)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "try": s.push($try_statement(l, e)); break;

            case "typeof": s.push($unary_expression(l, e)); break;

            case "var": s.push($variable_statement(l, e)); break;

            case "void": s.push($unary_expression(l, e)); break;

            case "while": s.push($iteration_statement(l, e)); break;

            case "with": s.push($with_statement(l, e)); break;

            case "yield": s.push($yield_expression(l, e)); break;

            case "{":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($block(cp, e));

                if (e.p !== 29) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($object_literal(l, e));

                break;


            case "}": s = $1127(l, e, _s(s, l, e, e.eh, _0)); break;

            case "~": s.push($unary_expression(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180:

                    s = $120(l, e, s);

                    if (e.p < 0) s = $121(l, e, s);

                    break;


                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 177: s = $165(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $44(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 82: s = $182(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 75: s = $1067(l, e, s); break;

                case 74: s = $1126(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                case 66: s = $185(l, e, s); break;

                case 62: s = $186(l, e, s); break;

                case 61: s = $184(l, e, s); break;

                case 57: s = $30(l, e, s); break;

                case 56: s = $40(l, e, s); break;

                case 52: s = $39(l, e, s); break;

                case 50: s = $29(l, e, s); break;

                case 44: s = $170(l, e, s); break;

                case 43: s = $37(l, e, s); break;

                case 42: s = $38(l, e, s); break;

                case 41: s = $36(l, e, s); break;

                case 40: s = $35(l, e, s); break;

                case 39: s = $34(l, e, s); break;

                case 36: s = $169(l, e, s); break;

                case 33: s = $32(l, e, s); break;

                case 31: s = $28(l, e, s); break;

                case 30: s = $31(l, e, s); break;

                case 29: s = $41(l, e, s); break;

                case 28: s = $27(l, e, s); break;

                case 27: s = $33(l, e, s); break;

                case 26: s = $183(l, e, s); break;

                case 25: s = $26(l, e, s); break;

                case 24: s = $25(l, e, s); break;

                case 23: s = $228(l, e, s); break;

                case 22:

                    s = $969(l, e, s);

                    if (e.p < 0) s = $229(l, e, s);

                    break;


                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![67].includes(a)) fail(l, e);

        return s;
    }
    function $1029(l, e, s = []) {

        e.p = -1;


        if (_68.includes(l.tx)) { return $1109(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1030(l, e, s = []) {

        e.p = -1;


        if (_35.includes(l.tx)) { return $1110(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1031(l, e, s = []) {

        e.p = -1;


        if (_35.includes(l.tx)) { return $1111(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1032(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "!": s.push($unary_expression(l, e)); break;

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($parenthesized(cp, e));

                if (e.p !== 131) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push(
                    $cover_parenthesized_expression_and_arrow_parameter_list(l, e)
                );

                break;


            case "++": s.push($update_expression(l, e)); break;

            case "+": s.push($unary_expression(l, e)); break;

            case "--": s.push($update_expression(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($unary_expression(cp, e));

                if (e.p !== 126) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case ";": s = $167(l, e, _s(s, l, e, e.eh, _0)); break;

            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($arrow_function(cp, e));

                if (e.p !== 78) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "await": s.push($await_expression(l, e)); break;

            case "break": s.push($break_statement(l, e)); break;

            case "class":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($class_expression(cp, e));

                if (e.p !== 83) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($class_declaration(l, e));

                break;


            case "const": s = $188(l, e, _s(s, l, e, e.eh, _0)); break;

            case "continue": s.push($continue_statement(l, e)); break;

            case "debugger": s.push($debugger_statement(l, e)); break;

            case "delete": s.push($unary_expression(l, e)); break;

            case "do": s.push($iteration_statement(l, e)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "for": s.push($iteration_statement(l, e)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "if": s.push($if_statement(l, e)); break;

            case "import":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($import_meta(cp, e));

                if (e.p !== 95) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($import_call(l, e));

                break;


            case "let": s = $187(l, e, _s(s, l, e, e.eh, _0)); break;

            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($new_expression(cp, e));

                if (e.p !== 91) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($new_target(l, e));

                break;


            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "return": s.push($return_statement(l, e)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($super_property(cp, e));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($super_call(l, e));

                break;


            case "switch": s.push($switch_statement(l, e)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "throw": s.push($throw_statement(l, e)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "try": s.push($try_statement(l, e)); break;

            case "typeof": s.push($unary_expression(l, e)); break;

            case "var": s.push($variable_statement(l, e)); break;

            case "void": s.push($unary_expression(l, e)); break;

            case "while": s.push($iteration_statement(l, e)); break;

            case "with": s.push($with_statement(l, e)); break;

            case "yield": s.push($yield_expression(l, e)); break;

            case "{":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($block(cp, e));

                if (e.p !== 29) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($object_literal(l, e));

                break;


            case "}": s = $1131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "~": s.push($unary_expression(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180:

                    s = $120(l, e, s);

                    if (e.p < 0) s = $121(l, e, s);

                    break;


                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 177: s = $165(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $44(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 82: s = $182(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 75: s = $1067(l, e, s); break;

                case 74: s = $1130(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                case 66: s = $185(l, e, s); break;

                case 62: s = $186(l, e, s); break;

                case 61: s = $184(l, e, s); break;

                case 57: s = $30(l, e, s); break;

                case 56: s = $40(l, e, s); break;

                case 52: s = $39(l, e, s); break;

                case 50: s = $29(l, e, s); break;

                case 44: s = $170(l, e, s); break;

                case 43: s = $37(l, e, s); break;

                case 42: s = $38(l, e, s); break;

                case 41: s = $36(l, e, s); break;

                case 40: s = $35(l, e, s); break;

                case 39: s = $34(l, e, s); break;

                case 36: s = $169(l, e, s); break;

                case 33: s = $32(l, e, s); break;

                case 31: s = $28(l, e, s); break;

                case 30: s = $31(l, e, s); break;

                case 29: s = $41(l, e, s); break;

                case 28: s = $27(l, e, s); break;

                case 27: s = $33(l, e, s); break;

                case 26: s = $183(l, e, s); break;

                case 25: s = $26(l, e, s); break;

                case 24: s = $25(l, e, s); break;

                case 23: s = $228(l, e, s); break;

                case 22:

                    s = $969(l, e, s);

                    if (e.p < 0) s = $229(l, e, s);

                    break;


                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![67].includes(a)) fail(l, e);

        return s;
    }
    function $1033(l, e, s = []) {

        e.p = -1;


        if (_35.includes(l.tx)) { return $1114(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1034(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "!": s.push($unary_expression(l, e)); break;

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($parenthesized(cp, e));

                if (e.p !== 131) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push(
                    $cover_parenthesized_expression_and_arrow_parameter_list(l, e)
                );

                break;


            case "++": s.push($update_expression(l, e)); break;

            case "+": s.push($unary_expression(l, e)); break;

            case "--": s.push($update_expression(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($unary_expression(cp, e));

                if (e.p !== 126) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case ";": s = $167(l, e, _s(s, l, e, e.eh, _0)); break;

            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($arrow_function(cp, e));

                if (e.p !== 78) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "await": s.push($await_expression(l, e)); break;

            case "break": s.push($break_statement(l, e)); break;

            case "class":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($class_expression(cp, e));

                if (e.p !== 83) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($class_declaration(l, e));

                break;


            case "const": s = $188(l, e, _s(s, l, e, e.eh, _0)); break;

            case "continue": s.push($continue_statement(l, e)); break;

            case "debugger": s.push($debugger_statement(l, e)); break;

            case "delete": s.push($unary_expression(l, e)); break;

            case "do": s.push($iteration_statement(l, e)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "for": s.push($iteration_statement(l, e)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "if": s.push($if_statement(l, e)); break;

            case "import":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($import_meta(cp, e));

                if (e.p !== 95) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($import_call(l, e));

                break;


            case "let": s = $187(l, e, _s(s, l, e, e.eh, _0)); break;

            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($new_expression(cp, e));

                if (e.p !== 91) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($new_target(l, e));

                break;


            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "return": s.push($return_statement(l, e)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($super_property(cp, e));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($super_call(l, e));

                break;


            case "switch": s.push($switch_statement(l, e)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "throw": s.push($throw_statement(l, e)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "try": s.push($try_statement(l, e)); break;

            case "typeof": s.push($unary_expression(l, e)); break;

            case "var": s.push($variable_statement(l, e)); break;

            case "void": s.push($unary_expression(l, e)); break;

            case "while": s.push($iteration_statement(l, e)); break;

            case "with": s.push($with_statement(l, e)); break;

            case "yield": s.push($yield_expression(l, e)); break;

            case "{":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($block(cp, e));

                if (e.p !== 29) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($object_literal(l, e));

                break;


            case "}": s = $1143(l, e, _s(s, l, e, e.eh, _0)); break;

            case "~": s.push($unary_expression(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180:

                    s = $120(l, e, s);

                    if (e.p < 0) s = $121(l, e, s);

                    break;


                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 177: s = $165(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $44(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 82: s = $182(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 75: s = $1067(l, e, s); break;

                case 74: s = $1142(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                case 66: s = $185(l, e, s); break;

                case 62: s = $186(l, e, s); break;

                case 61: s = $184(l, e, s); break;

                case 57: s = $30(l, e, s); break;

                case 56: s = $40(l, e, s); break;

                case 52: s = $39(l, e, s); break;

                case 50: s = $29(l, e, s); break;

                case 44: s = $170(l, e, s); break;

                case 43: s = $37(l, e, s); break;

                case 42: s = $38(l, e, s); break;

                case 41: s = $36(l, e, s); break;

                case 40: s = $35(l, e, s); break;

                case 39: s = $34(l, e, s); break;

                case 36: s = $169(l, e, s); break;

                case 33: s = $32(l, e, s); break;

                case 31: s = $28(l, e, s); break;

                case 30: s = $31(l, e, s); break;

                case 29: s = $41(l, e, s); break;

                case 28: s = $27(l, e, s); break;

                case 27: s = $33(l, e, s); break;

                case 26: s = $183(l, e, s); break;

                case 25: s = $26(l, e, s); break;

                case 24: s = $25(l, e, s); break;

                case 23: s = $228(l, e, s); break;

                case 22:

                    s = $969(l, e, s);

                    if (e.p < 0) s = $229(l, e, s);

                    break;


                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![66].includes(a)) fail(l, e);

        return s;
    }
    function $1035(l, e, s = []) {

        e.p = -1;


        if (_68.includes(l.tx)) { return $1117(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1036(l, e, s = []) {

        e.p = -1;


        if (_35.includes(l.tx)) { return $1118(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1037(l, e, s = []) {

        e.p = -1;


        if (_35.includes(l.tx)) { return $1119(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1038(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "!": s.push($unary_expression(l, e)); break;

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($parenthesized(cp, e));

                if (e.p !== 131) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push(
                    $cover_parenthesized_expression_and_arrow_parameter_list(l, e)
                );

                break;


            case "++": s.push($update_expression(l, e)); break;

            case "+": s.push($unary_expression(l, e)); break;

            case "--": s.push($update_expression(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($unary_expression(cp, e));

                if (e.p !== 126) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case ";": s = $167(l, e, _s(s, l, e, e.eh, _0)); break;

            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($arrow_function(cp, e));

                if (e.p !== 78) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "await": s.push($await_expression(l, e)); break;

            case "break": s.push($break_statement(l, e)); break;

            case "class":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($class_expression(cp, e));

                if (e.p !== 83) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($class_declaration(l, e));

                break;


            case "const": s = $188(l, e, _s(s, l, e, e.eh, _0)); break;

            case "continue": s.push($continue_statement(l, e)); break;

            case "debugger": s.push($debugger_statement(l, e)); break;

            case "delete": s.push($unary_expression(l, e)); break;

            case "do": s.push($iteration_statement(l, e)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "for": s.push($iteration_statement(l, e)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "if": s.push($if_statement(l, e)); break;

            case "import":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($import_meta(cp, e));

                if (e.p !== 95) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($import_call(l, e));

                break;


            case "let": s = $187(l, e, _s(s, l, e, e.eh, _0)); break;

            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($new_expression(cp, e));

                if (e.p !== 91) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($new_target(l, e));

                break;


            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "return": s.push($return_statement(l, e)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($super_property(cp, e));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($super_call(l, e));

                break;


            case "switch": s.push($switch_statement(l, e)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "throw": s.push($throw_statement(l, e)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "try": s.push($try_statement(l, e)); break;

            case "typeof": s.push($unary_expression(l, e)); break;

            case "var": s.push($variable_statement(l, e)); break;

            case "void": s.push($unary_expression(l, e)); break;

            case "while": s.push($iteration_statement(l, e)); break;

            case "with": s.push($with_statement(l, e)); break;

            case "yield": s.push($yield_expression(l, e)); break;

            case "{":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($block(cp, e));

                if (e.p !== 29) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($object_literal(l, e));

                break;


            case "}": s = $1135(l, e, _s(s, l, e, e.eh, _0)); break;

            case "~": s.push($unary_expression(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180:

                    s = $120(l, e, s);

                    if (e.p < 0) s = $121(l, e, s);

                    break;


                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 177: s = $165(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $44(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 82: s = $182(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 75: s = $1067(l, e, s); break;

                case 74: s = $1134(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                case 66: s = $185(l, e, s); break;

                case 62: s = $186(l, e, s); break;

                case 61: s = $184(l, e, s); break;

                case 57: s = $30(l, e, s); break;

                case 56: s = $40(l, e, s); break;

                case 52: s = $39(l, e, s); break;

                case 50: s = $29(l, e, s); break;

                case 44: s = $170(l, e, s); break;

                case 43: s = $37(l, e, s); break;

                case 42: s = $38(l, e, s); break;

                case 41: s = $36(l, e, s); break;

                case 40: s = $35(l, e, s); break;

                case 39: s = $34(l, e, s); break;

                case 36: s = $169(l, e, s); break;

                case 33: s = $32(l, e, s); break;

                case 31: s = $28(l, e, s); break;

                case 30: s = $31(l, e, s); break;

                case 29: s = $41(l, e, s); break;

                case 28: s = $27(l, e, s); break;

                case 27: s = $33(l, e, s); break;

                case 26: s = $183(l, e, s); break;

                case 25: s = $26(l, e, s); break;

                case 24: s = $25(l, e, s); break;

                case 23: s = $228(l, e, s); break;

                case 22:

                    s = $969(l, e, s);

                    if (e.p < 0) s = $229(l, e, s);

                    break;


                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![67].includes(a)) fail(l, e);

        return s;
    }
    function $1039(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "!": s.push($unary_expression(l, e)); break;

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($parenthesized(cp, e));

                if (e.p !== 131) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push(
                    $cover_parenthesized_expression_and_arrow_parameter_list(l, e)
                );

                break;


            case "++": s.push($update_expression(l, e)); break;

            case "+": s.push($unary_expression(l, e)); break;

            case "--": s.push($update_expression(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($unary_expression(cp, e));

                if (e.p !== 126) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case ";": s = $167(l, e, _s(s, l, e, e.eh, _0)); break;

            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($arrow_function(cp, e));

                if (e.p !== 78) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "await": s.push($await_expression(l, e)); break;

            case "break": s.push($break_statement(l, e)); break;

            case "class":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($class_expression(cp, e));

                if (e.p !== 83) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($class_declaration(l, e));

                break;


            case "const": s = $188(l, e, _s(s, l, e, e.eh, _0)); break;

            case "continue": s.push($continue_statement(l, e)); break;

            case "debugger": s.push($debugger_statement(l, e)); break;

            case "delete": s.push($unary_expression(l, e)); break;

            case "do": s.push($iteration_statement(l, e)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "for": s.push($iteration_statement(l, e)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "if": s.push($if_statement(l, e)); break;

            case "import":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($import_meta(cp, e));

                if (e.p !== 95) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($import_call(l, e));

                break;


            case "let": s = $187(l, e, _s(s, l, e, e.eh, _0)); break;

            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($new_expression(cp, e));

                if (e.p !== 91) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($new_target(l, e));

                break;


            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "return": s.push($return_statement(l, e)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($super_property(cp, e));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($super_call(l, e));

                break;


            case "switch": s.push($switch_statement(l, e)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "throw": s.push($throw_statement(l, e)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "try": s.push($try_statement(l, e)); break;

            case "typeof": s.push($unary_expression(l, e)); break;

            case "var": s.push($variable_statement(l, e)); break;

            case "void": s.push($unary_expression(l, e)); break;

            case "while": s.push($iteration_statement(l, e)); break;

            case "with": s.push($with_statement(l, e)); break;

            case "yield": s.push($yield_expression(l, e)); break;

            case "{":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($block(cp, e));

                if (e.p !== 29) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($object_literal(l, e));

                break;


            case "}": s = $1133(l, e, _s(s, l, e, e.eh, _0)); break;

            case "~": s.push($unary_expression(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180:

                    s = $120(l, e, s);

                    if (e.p < 0) s = $121(l, e, s);

                    break;


                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 177: s = $165(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $44(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 82: s = $182(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 75: s = $1067(l, e, s); break;

                case 74: s = $1132(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                case 66: s = $185(l, e, s); break;

                case 62: s = $186(l, e, s); break;

                case 61: s = $184(l, e, s); break;

                case 57: s = $30(l, e, s); break;

                case 56: s = $40(l, e, s); break;

                case 52: s = $39(l, e, s); break;

                case 50: s = $29(l, e, s); break;

                case 44: s = $170(l, e, s); break;

                case 43: s = $37(l, e, s); break;

                case 42: s = $38(l, e, s); break;

                case 41: s = $36(l, e, s); break;

                case 40: s = $35(l, e, s); break;

                case 39: s = $34(l, e, s); break;

                case 36: s = $169(l, e, s); break;

                case 33: s = $32(l, e, s); break;

                case 31: s = $28(l, e, s); break;

                case 30: s = $31(l, e, s); break;

                case 29: s = $41(l, e, s); break;

                case 28: s = $27(l, e, s); break;

                case 27: s = $33(l, e, s); break;

                case 26: s = $183(l, e, s); break;

                case 25: s = $26(l, e, s); break;

                case 24: s = $25(l, e, s); break;

                case 23: s = $228(l, e, s); break;

                case 22:

                    s = $969(l, e, s);

                    if (e.p < 0) s = $229(l, e, s);

                    break;


                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![67].includes(a)) fail(l, e);

        return s;
    }
    function $1040(l, e, s = []) {

        e.p = -1;


        if (_68.includes(l.tx)) { return $1120(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1041(l, e, s = []) {

        e.p = -1;


        if (_35.includes(l.tx)) { return $1121(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1042(l, e, s = []) {

        e.p = -1;


        if (_68.includes(l.tx)) {

            e.sp -= 3;

            var sym = s.slice(-3);

            s.splice(
                -3,
                3,
                {

                    type: "FormalParameters",

                    nodes: [...sym[0], sym[2]],

                    pos
                }
            );

            return (e.p = 69, s);
        }

        return s;
    }
    function $1043(l, e, s = []) {

        e.p = -1;


        if (_35.includes(l.tx)) { return $1122(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1044(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "!": s.push($unary_expression(l, e)); break;

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($parenthesized(cp, e));

                if (e.p !== 131) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push(
                    $cover_parenthesized_expression_and_arrow_parameter_list(l, e)
                );

                break;


            case "++": s.push($update_expression(l, e)); break;

            case "+": s.push($unary_expression(l, e)); break;

            case "--": s.push($update_expression(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($unary_expression(cp, e));

                if (e.p !== 126) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case ";": s = $167(l, e, _s(s, l, e, e.eh, _0)); break;

            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($arrow_function(cp, e));

                if (e.p !== 78) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "await": s.push($await_expression(l, e)); break;

            case "break": s.push($break_statement(l, e)); break;

            case "class":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($class_expression(cp, e));

                if (e.p !== 83) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($class_declaration(l, e));

                break;


            case "const": s = $188(l, e, _s(s, l, e, e.eh, _0)); break;

            case "continue": s.push($continue_statement(l, e)); break;

            case "debugger": s.push($debugger_statement(l, e)); break;

            case "delete": s.push($unary_expression(l, e)); break;

            case "do": s.push($iteration_statement(l, e)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "for": s.push($iteration_statement(l, e)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "if": s.push($if_statement(l, e)); break;

            case "import":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($import_meta(cp, e));

                if (e.p !== 95) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($import_call(l, e));

                break;


            case "let": s = $187(l, e, _s(s, l, e, e.eh, _0)); break;

            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($new_expression(cp, e));

                if (e.p !== 91) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($new_target(l, e));

                break;


            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "return": s.push($return_statement(l, e)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($super_property(cp, e));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($super_call(l, e));

                break;


            case "switch": s.push($switch_statement(l, e)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "throw": s.push($throw_statement(l, e)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "try": s.push($try_statement(l, e)); break;

            case "typeof": s.push($unary_expression(l, e)); break;

            case "var": s.push($variable_statement(l, e)); break;

            case "void": s.push($unary_expression(l, e)); break;

            case "while": s.push($iteration_statement(l, e)); break;

            case "with": s.push($with_statement(l, e)); break;

            case "yield": s.push($yield_expression(l, e)); break;

            case "{":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($block(cp, e));

                if (e.p !== 29) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($object_literal(l, e));

                break;


            case "}": s = $1141(l, e, _s(s, l, e, e.eh, _0)); break;

            case "~": s.push($unary_expression(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180:

                    s = $120(l, e, s);

                    if (e.p < 0) s = $121(l, e, s);

                    break;


                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 177: s = $165(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $44(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 82: s = $182(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 75: s = $1067(l, e, s); break;

                case 74: s = $1140(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                case 66: s = $185(l, e, s); break;

                case 62: s = $186(l, e, s); break;

                case 61: s = $184(l, e, s); break;

                case 57: s = $30(l, e, s); break;

                case 56: s = $40(l, e, s); break;

                case 52: s = $39(l, e, s); break;

                case 50: s = $29(l, e, s); break;

                case 44: s = $170(l, e, s); break;

                case 43: s = $37(l, e, s); break;

                case 42: s = $38(l, e, s); break;

                case 41: s = $36(l, e, s); break;

                case 40: s = $35(l, e, s); break;

                case 39: s = $34(l, e, s); break;

                case 36: s = $169(l, e, s); break;

                case 33: s = $32(l, e, s); break;

                case 31: s = $28(l, e, s); break;

                case 30: s = $31(l, e, s); break;

                case 29: s = $41(l, e, s); break;

                case 28: s = $27(l, e, s); break;

                case 27: s = $33(l, e, s); break;

                case 26: s = $183(l, e, s); break;

                case 25: s = $26(l, e, s); break;

                case 24: s = $25(l, e, s); break;

                case 23: s = $228(l, e, s); break;

                case 22:

                    s = $969(l, e, s);

                    if (e.p < 0) s = $229(l, e, s);

                    break;


                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![66].includes(a)) fail(l, e);

        return s;
    }
    function $1045(l, e, s = []) {

        e.p = -1;


        if (_68.includes(l.tx)) { return $1123(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1046(l, e, s = []) {

        e.p = -1;


        if (_35.includes(l.tx)) { return $1124(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1047(l, e, s = []) {

        e.p = -1;


        if (_35.includes(l.tx)) { return $1125(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1048(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "!": s.push($unary_expression(l, e)); break;

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($parenthesized(cp, e));

                if (e.p !== 131) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push(
                    $cover_parenthesized_expression_and_arrow_parameter_list(l, e)
                );

                break;


            case "++": s.push($update_expression(l, e)); break;

            case "+": s.push($unary_expression(l, e)); break;

            case "--": s.push($update_expression(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($unary_expression(cp, e));

                if (e.p !== 126) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case ";": s = $167(l, e, _s(s, l, e, e.eh, _0)); break;

            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($arrow_function(cp, e));

                if (e.p !== 78) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "await": s.push($await_expression(l, e)); break;

            case "break": s.push($break_statement(l, e)); break;

            case "class":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($class_expression(cp, e));

                if (e.p !== 83) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($class_declaration(l, e));

                break;


            case "const": s = $188(l, e, _s(s, l, e, e.eh, _0)); break;

            case "continue": s.push($continue_statement(l, e)); break;

            case "debugger": s.push($debugger_statement(l, e)); break;

            case "delete": s.push($unary_expression(l, e)); break;

            case "do": s.push($iteration_statement(l, e)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "for": s.push($iteration_statement(l, e)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "if": s.push($if_statement(l, e)); break;

            case "import":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($import_meta(cp, e));

                if (e.p !== 95) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($import_call(l, e));

                break;


            case "let": s = $187(l, e, _s(s, l, e, e.eh, _0)); break;

            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($new_expression(cp, e));

                if (e.p !== 91) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($new_target(l, e));

                break;


            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "return": s.push($return_statement(l, e)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($super_property(cp, e));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($super_call(l, e));

                break;


            case "switch": s.push($switch_statement(l, e)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "throw": s.push($throw_statement(l, e)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "try": s.push($try_statement(l, e)); break;

            case "typeof": s.push($unary_expression(l, e)); break;

            case "var": s.push($variable_statement(l, e)); break;

            case "void": s.push($unary_expression(l, e)); break;

            case "while": s.push($iteration_statement(l, e)); break;

            case "with": s.push($with_statement(l, e)); break;

            case "yield": s.push($yield_expression(l, e)); break;

            case "{":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($block(cp, e));

                if (e.p !== 29) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($object_literal(l, e));

                break;


            case "}": s = $1137(l, e, _s(s, l, e, e.eh, _0)); break;

            case "~": s.push($unary_expression(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180:

                    s = $120(l, e, s);

                    if (e.p < 0) s = $121(l, e, s);

                    break;


                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 177: s = $165(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $44(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 82: s = $182(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 75: s = $1067(l, e, s); break;

                case 74: s = $1136(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                case 66: s = $185(l, e, s); break;

                case 62: s = $186(l, e, s); break;

                case 61: s = $184(l, e, s); break;

                case 57: s = $30(l, e, s); break;

                case 56: s = $40(l, e, s); break;

                case 52: s = $39(l, e, s); break;

                case 50: s = $29(l, e, s); break;

                case 44: s = $170(l, e, s); break;

                case 43: s = $37(l, e, s); break;

                case 42: s = $38(l, e, s); break;

                case 41: s = $36(l, e, s); break;

                case 40: s = $35(l, e, s); break;

                case 39: s = $34(l, e, s); break;

                case 36: s = $169(l, e, s); break;

                case 33: s = $32(l, e, s); break;

                case 31: s = $28(l, e, s); break;

                case 30: s = $31(l, e, s); break;

                case 29: s = $41(l, e, s); break;

                case 28: s = $27(l, e, s); break;

                case 27: s = $33(l, e, s); break;

                case 26: s = $183(l, e, s); break;

                case 25: s = $26(l, e, s); break;

                case 24: s = $25(l, e, s); break;

                case 23: s = $228(l, e, s); break;

                case 22:

                    s = $969(l, e, s);

                    if (e.p < 0) s = $229(l, e, s);

                    break;


                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![66].includes(a)) fail(l, e);

        return s;
    }
    function $1049(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "!": s.push($unary_expression(l, e)); break;

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($parenthesized(cp, e));

                if (e.p !== 131) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push(
                    $cover_parenthesized_expression_and_arrow_parameter_list(l, e)
                );

                break;


            case "++": s.push($update_expression(l, e)); break;

            case "+": s.push($unary_expression(l, e)); break;

            case "--": s.push($update_expression(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($unary_expression(cp, e));

                if (e.p !== 126) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case ";": s = $167(l, e, _s(s, l, e, e.eh, _0)); break;

            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($arrow_function(cp, e));

                if (e.p !== 78) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "await": s.push($await_expression(l, e)); break;

            case "break": s.push($break_statement(l, e)); break;

            case "class":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($class_expression(cp, e));

                if (e.p !== 83) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($class_declaration(l, e));

                break;


            case "const": s = $188(l, e, _s(s, l, e, e.eh, _0)); break;

            case "continue": s.push($continue_statement(l, e)); break;

            case "debugger": s.push($debugger_statement(l, e)); break;

            case "delete": s.push($unary_expression(l, e)); break;

            case "do": s.push($iteration_statement(l, e)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "for": s.push($iteration_statement(l, e)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "if": s.push($if_statement(l, e)); break;

            case "import":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($import_meta(cp, e));

                if (e.p !== 95) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($import_call(l, e));

                break;


            case "let": s = $187(l, e, _s(s, l, e, e.eh, _0)); break;

            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($new_expression(cp, e));

                if (e.p !== 91) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($new_target(l, e));

                break;


            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "return": s.push($return_statement(l, e)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($super_property(cp, e));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($super_call(l, e));

                break;


            case "switch": s.push($switch_statement(l, e)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "throw": s.push($throw_statement(l, e)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "try": s.push($try_statement(l, e)); break;

            case "typeof": s.push($unary_expression(l, e)); break;

            case "var": s.push($variable_statement(l, e)); break;

            case "void": s.push($unary_expression(l, e)); break;

            case "while": s.push($iteration_statement(l, e)); break;

            case "with": s.push($with_statement(l, e)); break;

            case "yield": s.push($yield_expression(l, e)); break;

            case "{":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($block(cp, e));

                if (e.p !== 29) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($object_literal(l, e));

                break;


            case "}": s = $1145(l, e, _s(s, l, e, e.eh, _0)); break;

            case "~": s.push($unary_expression(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180:

                    s = $120(l, e, s);

                    if (e.p < 0) s = $121(l, e, s);

                    break;


                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 177: s = $165(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $44(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 82: s = $182(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 75: s = $1067(l, e, s); break;

                case 74: s = $1144(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                case 66: s = $185(l, e, s); break;

                case 62: s = $186(l, e, s); break;

                case 61: s = $184(l, e, s); break;

                case 57: s = $30(l, e, s); break;

                case 56: s = $40(l, e, s); break;

                case 52: s = $39(l, e, s); break;

                case 50: s = $29(l, e, s); break;

                case 44: s = $170(l, e, s); break;

                case 43: s = $37(l, e, s); break;

                case 42: s = $38(l, e, s); break;

                case 41: s = $36(l, e, s); break;

                case 40: s = $35(l, e, s); break;

                case 39: s = $34(l, e, s); break;

                case 36: s = $169(l, e, s); break;

                case 33: s = $32(l, e, s); break;

                case 31: s = $28(l, e, s); break;

                case 30: s = $31(l, e, s); break;

                case 29: s = $41(l, e, s); break;

                case 28: s = $27(l, e, s); break;

                case 27: s = $33(l, e, s); break;

                case 26: s = $183(l, e, s); break;

                case 25: s = $26(l, e, s); break;

                case 24: s = $25(l, e, s); break;

                case 23: s = $228(l, e, s); break;

                case 22:

                    s = $969(l, e, s);

                    if (e.p < 0) s = $229(l, e, s);

                    break;


                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![66].includes(a)) fail(l, e);

        return s;
    }
    function $1050(l, e, s = []) {

        e.p = -1;


        if (_68.includes(l.tx)) { return $1128(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1051(l, e, s = []) {

        e.p = -1;


        if (_35.includes(l.tx)) { return $1129(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1052(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 5;

            var sym = s.slice(-5);

            s.splice(
                -5,
                5,
                { type: "Class", nodes: [null, sym[1], ...sym[3]], pos }
            );

            return (e.p = 83, s);
        }

        return s;
    }
    function $1053(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 5;

            var sym = s.slice(-5);

            s.splice(
                -5,
                5,
                { type: "Class", nodes: [sym[1], null, ...sym[3]], pos }
            );

            return (e.p = 83, s);
        }

        return s;
    }
    function $1054(l, e, s = []) {

        e.p = -1;


        if (l.END || _5.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 5;

            var sym = s.slice(-5);

            s.splice(
                -5,
                5,
                { type: "Class", nodes: [sym[1], null, ...sym[3]], pos }
            );

            return (e.p = 82, s);
        }

        return s;
    }
    function $1055(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 4;

            var sym = s.slice(-4);

            s.splice(-4, 4, { type: "Arguments", nodes: sym[1] || [], pos });

            return (e.p = 100, s);
        }

        return s;
    }
    function $1058(l, e, s = []) {

        e.p = -1;


        if (l.END || _5.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 5;

            var sym = s.slice(-5);

            s.splice(
                -5,
                5,
                { type: "Class", nodes: [null, sym[1], ...sym[3]], pos }
            );

            return (e.p = 82, s);
        }

        return s;
    }
    function $1059(l, e, s = []) {

        e.p = -1;


        if (_52.includes(l.tx)) { return $1138(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1060(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 5;

            var sym = s.slice(-5);

            s.splice(-5, 5, { type: "Class", nodes: [sym[1], sym[2]], pos });

            return (e.p = 83, s);
        }

        return s;
    }
    function $1061(l, e, s = []) {

        e.p = -1;


        if (_52.includes(l.tx)) { return $1139(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1062(l, e, s = []) {

        e.p = -1;


        if (l.END || _5.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 5;

            var sym = s.slice(-5);

            s.splice(-5, 5, { type: "Class", nodes: [sym[1], sym[2]], pos });

            return (e.p = 82, s);
        }

        return s;
    }
    function $1063(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;

        s = $_87(l, e, s);

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $120(l, e, s); break;

                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $1153(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![36].includes(a)) fail(l, e);

        return s;
    }
    function $1064(l, e, s = []) {

        e.p = -1;


        if (_9.includes(l.tx)) {

            e.sp -= 3;

            var sym = s.slice(-3);

            s.splice(-3, 3, { type: "BlockStatement", nodes: sym[1], pos });

            return (e.p = 80, s);
        }

        return s;
    }
    function $1065(l, e, s = []) {

        e.p = -1;


        if (_52.includes(l.tx)) { return $1146(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1066(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 5;

            var sym = s.slice(-5);

            s.splice(
                -5,
                5,
                {

                    type: "FunctionExpression",

                    ASYNC: !!null,

                    GENERATOR: !!null,

                    nodes: [null, null, null],

                    pos
                }
            );

            return (e.p = 67, s);
        }

        return s;
    }
    function $1067(l, e, s = []) {

        e.p = -1;


        if (_52.includes(l.tx)) {

            e.sp -= 1;

            var sym = s.slice(-1);

            s.splice(-1, 1, { type: "FunctionBody", nodes: sym[0], pos });

            return (e.p = 74, s);
        }

        return s;
    }
    function $1068(l, e, s = []) {

        e.p = -1;


        if (_52.includes(l.tx)) { return $1147(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1069(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 5;

            var sym = s.slice(-5);

            s.splice(
                -5,
                5,
                {

                    type: "FunctionDeclaration",

                    ASYNC: !!null,

                    GENERATOR: !!null,

                    nodes: [null, null, null],

                    pos
                }
            );

            return (e.p = 66, s);
        }

        return s;
    }
    function $1070(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 5;

            var sym = s.slice(-5);

            s.splice(
                -5,
                5,
                { type: "SwitchStatement", nodes: [sym[2], sym[4]], pos }
            );

            return (e.p = 44, s);
        }

        return s;
    }
    function $1072(l, e, s = []) {

        e.p = -1;


        if (_68.includes(l.tx)) { return $1152(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1073(l, e, s = []) { e.p = -1; s = $_688(l, e, s); return s; }
    function $1074(l, e, s = []) { e.p = -1; s = $_688(l, e, s); return s; }
    function $1076(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 5;

            var sym = s.slice(-5);

            s.splice(
                -5,
                5,
                { type: "ArrayLiteral", nodes: [...sym[1], sym[3]], pos }
            );

            return (e.p = 153, s);
        }

        return s;
    }
    function $1077(l, e, s = []) {

        e.p = -1;


        if (_68.includes(l.tx)) { return $1154(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1078(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 5;

            var sym = s.slice(-5);

            s.splice(
                -5,
                5,
                { type: "WhileStatement", nodes: [sym[2], sym[4]], pos }
            );

            return (e.p = 36, s);
        }

        return s;
    }
    function $1079(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        if (l.END) {

            e.sp -= 5;

            var sym = s.slice(-5);

            s.splice(
                -5,
                5,
                { type: "IfStatement", nodes: [sym[2], sym[4], null], pos }
            );

            return (e.p = 33, s);
        } else switch (l.tx) {

            case "else":

                s.push($if_statement_group_163_103(l, e));

                e.sp -= 5;

                var sym = s.slice(-5);

                s.splice(
                    -5,
                    5,
                    { type: "IfStatement", nodes: [sym[2], sym[4], null], pos }
                );

                return (e.p = 33, s);


            case "!":

            case "\"":

            case "$":

            case "'":

            case "(":

            case "+":

            case "++":

            case "-":

            case "--":

            case "/":

            case ";":

            case "[":

            case "_":

            case "`":

            case "as":

            case "async":

            case "await":

            case "break":

            case "case":

            case "class":

            case "const":

            case "continue":

            case "debugger":

            case "default":

            case "delete":

            case "do":

            case "export":

            case "false":

            case "for":

            case "from":

            case "function":

            case "get":

            case "if":

            case "import":

            case "let":

            case "new":

            case "null":

            case "return":

            case "set":

            case "super":

            case "switch":

            case "target":

            case "this":

            case "throw":

            case "true":

            case "try":

            case "typeof":

            case "var":

            case "void":

            case "while":

            case "with":

            case "yield":

            case "{":

            case "}":

            case "~":

                e.sp -= 5;

                var sym = s.slice(-5);

                s.splice(
                    -5,
                    5,
                    { type: "IfStatement", nodes: [sym[2], sym[4], null], pos }
                );

                return (e.p = 33, s);


            default:

                switch (l.ty) {

                    case 255:

                    case 2:

                    case 1:

                        e.sp -= 5;

                        var sym = s.slice(-5);

                        s.splice(
                            -5,
                            5,
                            { type: "IfStatement", nodes: [sym[2], sym[4], null], pos }
                        );

                        return (e.p = 33, s);

                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 32: s = $1155(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![33].includes(a)) fail(l, e);

        return s;
    }
    function $1080(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 5;

            var sym = s.slice(-5);

            s.splice(
                -5,
                5,
                { type: "WithStatement", nodes: [sym[2], sym[4]], pos }
            );

            return (e.p = 43, s);
        }

        return s;
    }
    function $1081(l, e, s = []) {

        e.p = -1;


        if (_42.includes(l.tx)) {

            e.sp -= 5;

            var sym = s.slice(-5);

            s.splice(
                -5,
                5,
                { type: "ObjectBinding", nodes: [...sym[1], sym[3]], pos }
            );

            return (e.p = 133, s);
        }

        return s;
    }
    function $1082(l, e, s = []) {

        e.p = -1;


        if (_70.includes(l.tx)) { return $1157(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1083(l, e, s = []) { e.p = -1; s = $_697(l, e, s); return s; }
    function $1084(l, e, s = []) { e.p = -1; s = $_697(l, e, s); return s; }
    function $1085(l, e, s = []) {

        e.p = -1;


        if (_68.includes(l.tx)) {

            _s(s, l, e, e.eh, _0);

            e.ASI = true;

            return $1158(l, e, s);
        }

        return s;
    }
    function $1086(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "!": s.push($unary_expression(l, e)); break;

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($parenthesized(cp, e));

                if (e.p !== 131) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push(
                    $cover_parenthesized_expression_and_arrow_parameter_list(l, e)
                );

                break;


            case "++": s.push($update_expression(l, e)); break;

            case "+": s.push($unary_expression(l, e)); break;

            case "--": s.push($update_expression(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($unary_expression(cp, e));

                if (e.p !== 126) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case ";": s = $167(l, e, _s(s, l, e, e.eh, _0)); break;

            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($arrow_function(cp, e));

                if (e.p !== 78) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "await": s.push($await_expression(l, e)); break;

            case "break": s.push($break_statement(l, e)); break;

            case "class":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($class_expression(cp, e));

                if (e.p !== 83) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($class_declaration(l, e));

                break;


            case "const": s = $188(l, e, _s(s, l, e, e.eh, _0)); break;

            case "continue": s.push($continue_statement(l, e)); break;

            case "debugger": s.push($debugger_statement(l, e)); break;

            case "delete": s.push($unary_expression(l, e)); break;

            case "do": s.push($iteration_statement(l, e)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "for": s.push($iteration_statement(l, e)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "if": s.push($if_statement(l, e)); break;

            case "import":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($import_meta(cp, e));

                if (e.p !== 95) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($import_call(l, e));

                break;


            case "let": s = $187(l, e, _s(s, l, e, e.eh, _0)); break;

            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($new_expression(cp, e));

                if (e.p !== 91) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($new_target(l, e));

                break;


            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "return": s.push($return_statement(l, e)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($super_property(cp, e));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($super_call(l, e));

                break;


            case "switch": s.push($switch_statement(l, e)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "throw": s.push($throw_statement(l, e)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "try": s.push($try_statement(l, e)); break;

            case "typeof": s.push($unary_expression(l, e)); break;

            case "var": s.push($variable_statement(l, e)); break;

            case "void": s.push($unary_expression(l, e)); break;

            case "while": s.push($iteration_statement(l, e)); break;

            case "with": s.push($with_statement(l, e)); break;

            case "yield": s.push($yield_expression(l, e)); break;

            case "{":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($block(cp, e));

                if (e.p !== 29) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($object_literal(l, e));

                break;


            case "}": s = $1179(l, e, _s(s, l, e, e.eh, _0)); break;

            case "~": s.push($unary_expression(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180:

                    s = $120(l, e, s);

                    if (e.p < 0) s = $121(l, e, s);

                    break;


                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 177: s = $165(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $44(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 82: s = $182(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 75: s = $1067(l, e, s); break;

                case 74: s = $1178(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                case 66: s = $185(l, e, s); break;

                case 62: s = $186(l, e, s); break;

                case 61: s = $184(l, e, s); break;

                case 57: s = $30(l, e, s); break;

                case 56: s = $40(l, e, s); break;

                case 52: s = $39(l, e, s); break;

                case 50: s = $29(l, e, s); break;

                case 44: s = $170(l, e, s); break;

                case 43: s = $37(l, e, s); break;

                case 42: s = $38(l, e, s); break;

                case 41: s = $36(l, e, s); break;

                case 40: s = $35(l, e, s); break;

                case 39: s = $34(l, e, s); break;

                case 36: s = $169(l, e, s); break;

                case 33: s = $32(l, e, s); break;

                case 31: s = $28(l, e, s); break;

                case 30: s = $31(l, e, s); break;

                case 29: s = $41(l, e, s); break;

                case 28: s = $27(l, e, s); break;

                case 27: s = $33(l, e, s); break;

                case 26: s = $183(l, e, s); break;

                case 25: s = $26(l, e, s); break;

                case 24: s = $25(l, e, s); break;

                case 23: s = $228(l, e, s); break;

                case 22:

                    s = $969(l, e, s);

                    if (e.p < 0) s = $229(l, e, s);

                    break;


                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![87].includes(a)) fail(l, e);

        return s;
    }
    function $1087(l, e, s = []) {

        e.p = -1;


        if (_35.includes(l.tx)) { return $1159(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1088(l, e, s = []) {

        e.p = -1;


        if (_35.includes(l.tx)) { return $1160(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1089(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "!": s.push($unary_expression(l, e)); break;

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($parenthesized(cp, e));

                if (e.p !== 131) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push(
                    $cover_parenthesized_expression_and_arrow_parameter_list(l, e)
                );

                break;


            case "++": s.push($update_expression(l, e)); break;

            case "+": s.push($unary_expression(l, e)); break;

            case "--": s.push($update_expression(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($unary_expression(cp, e));

                if (e.p !== 126) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case ";": s = $167(l, e, _s(s, l, e, e.eh, _0)); break;

            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($arrow_function(cp, e));

                if (e.p !== 78) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "await": s.push($await_expression(l, e)); break;

            case "break": s.push($break_statement(l, e)); break;

            case "class":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($class_expression(cp, e));

                if (e.p !== 83) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($class_declaration(l, e));

                break;


            case "const": s = $188(l, e, _s(s, l, e, e.eh, _0)); break;

            case "continue": s.push($continue_statement(l, e)); break;

            case "debugger": s.push($debugger_statement(l, e)); break;

            case "delete": s.push($unary_expression(l, e)); break;

            case "do": s.push($iteration_statement(l, e)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "for": s.push($iteration_statement(l, e)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "if": s.push($if_statement(l, e)); break;

            case "import":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($import_meta(cp, e));

                if (e.p !== 95) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($import_call(l, e));

                break;


            case "let": s = $187(l, e, _s(s, l, e, e.eh, _0)); break;

            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($new_expression(cp, e));

                if (e.p !== 91) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($new_target(l, e));

                break;


            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "return": s.push($return_statement(l, e)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($super_property(cp, e));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($super_call(l, e));

                break;


            case "switch": s.push($switch_statement(l, e)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "throw": s.push($throw_statement(l, e)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "try": s.push($try_statement(l, e)); break;

            case "typeof": s.push($unary_expression(l, e)); break;

            case "var": s.push($variable_statement(l, e)); break;

            case "void": s.push($unary_expression(l, e)); break;

            case "while": s.push($iteration_statement(l, e)); break;

            case "with": s.push($with_statement(l, e)); break;

            case "yield": s.push($yield_expression(l, e)); break;

            case "{":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($block(cp, e));

                if (e.p !== 29) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($object_literal(l, e));

                break;


            case "}": s = $1176(l, e, _s(s, l, e, e.eh, _0)); break;

            case "~": s.push($unary_expression(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180:

                    s = $120(l, e, s);

                    if (e.p < 0) s = $121(l, e, s);

                    break;


                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 177: s = $165(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $44(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 82: s = $182(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 75: s = $1067(l, e, s); break;

                case 74: s = $1175(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                case 66: s = $185(l, e, s); break;

                case 62: s = $186(l, e, s); break;

                case 61: s = $184(l, e, s); break;

                case 57: s = $30(l, e, s); break;

                case 56: s = $40(l, e, s); break;

                case 52: s = $39(l, e, s); break;

                case 50: s = $29(l, e, s); break;

                case 44: s = $170(l, e, s); break;

                case 43: s = $37(l, e, s); break;

                case 42: s = $38(l, e, s); break;

                case 41: s = $36(l, e, s); break;

                case 40: s = $35(l, e, s); break;

                case 39: s = $34(l, e, s); break;

                case 36: s = $169(l, e, s); break;

                case 33: s = $32(l, e, s); break;

                case 31: s = $28(l, e, s); break;

                case 30: s = $31(l, e, s); break;

                case 29: s = $41(l, e, s); break;

                case 28: s = $27(l, e, s); break;

                case 27: s = $33(l, e, s); break;

                case 26: s = $183(l, e, s); break;

                case 25: s = $26(l, e, s); break;

                case 24: s = $25(l, e, s); break;

                case 23: s = $228(l, e, s); break;

                case 22:

                    s = $969(l, e, s);

                    if (e.p < 0) s = $229(l, e, s);

                    break;


                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![87].includes(a)) fail(l, e);

        return s;
    }
    function $1090(l, e, s = []) {

        e.p = -1;


        if (_68.includes(l.tx)) { return $1161(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1091(l, e, s = []) {

        e.p = -1;


        if (_35.includes(l.tx)) { return $1162(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1092(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "!": s.push($unary_expression(l, e)); break;

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($parenthesized(cp, e));

                if (e.p !== 131) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push(
                    $cover_parenthesized_expression_and_arrow_parameter_list(l, e)
                );

                break;


            case "++": s.push($update_expression(l, e)); break;

            case "+": s.push($unary_expression(l, e)); break;

            case "--": s.push($update_expression(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($unary_expression(cp, e));

                if (e.p !== 126) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case ";": s = $167(l, e, _s(s, l, e, e.eh, _0)); break;

            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($arrow_function(cp, e));

                if (e.p !== 78) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "await": s.push($await_expression(l, e)); break;

            case "break": s.push($break_statement(l, e)); break;

            case "class":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($class_expression(cp, e));

                if (e.p !== 83) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($class_declaration(l, e));

                break;


            case "const": s = $188(l, e, _s(s, l, e, e.eh, _0)); break;

            case "continue": s.push($continue_statement(l, e)); break;

            case "debugger": s.push($debugger_statement(l, e)); break;

            case "delete": s.push($unary_expression(l, e)); break;

            case "do": s.push($iteration_statement(l, e)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "for": s.push($iteration_statement(l, e)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "if": s.push($if_statement(l, e)); break;

            case "import":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($import_meta(cp, e));

                if (e.p !== 95) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($import_call(l, e));

                break;


            case "let": s = $187(l, e, _s(s, l, e, e.eh, _0)); break;

            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($new_expression(cp, e));

                if (e.p !== 91) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($new_target(l, e));

                break;


            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "return": s.push($return_statement(l, e)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($super_property(cp, e));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($super_call(l, e));

                break;


            case "switch": s.push($switch_statement(l, e)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "throw": s.push($throw_statement(l, e)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "try": s.push($try_statement(l, e)); break;

            case "typeof": s.push($unary_expression(l, e)); break;

            case "var": s.push($variable_statement(l, e)); break;

            case "void": s.push($unary_expression(l, e)); break;

            case "while": s.push($iteration_statement(l, e)); break;

            case "with": s.push($with_statement(l, e)); break;

            case "yield": s.push($yield_expression(l, e)); break;

            case "{":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($block(cp, e));

                if (e.p !== 29) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($object_literal(l, e));

                break;


            case "}": s = $1183(l, e, _s(s, l, e, e.eh, _0)); break;

            case "~": s.push($unary_expression(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180:

                    s = $120(l, e, s);

                    if (e.p < 0) s = $121(l, e, s);

                    break;


                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 177: s = $165(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $44(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 82: s = $182(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 75: s = $1067(l, e, s); break;

                case 74: s = $1182(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                case 66: s = $185(l, e, s); break;

                case 62: s = $186(l, e, s); break;

                case 61: s = $184(l, e, s); break;

                case 57: s = $30(l, e, s); break;

                case 56: s = $40(l, e, s); break;

                case 52: s = $39(l, e, s); break;

                case 50: s = $29(l, e, s); break;

                case 44: s = $170(l, e, s); break;

                case 43: s = $37(l, e, s); break;

                case 42: s = $38(l, e, s); break;

                case 41: s = $36(l, e, s); break;

                case 40: s = $35(l, e, s); break;

                case 39: s = $34(l, e, s); break;

                case 36: s = $169(l, e, s); break;

                case 33: s = $32(l, e, s); break;

                case 31: s = $28(l, e, s); break;

                case 30: s = $31(l, e, s); break;

                case 29: s = $41(l, e, s); break;

                case 28: s = $27(l, e, s); break;

                case 27: s = $33(l, e, s); break;

                case 26: s = $183(l, e, s); break;

                case 25: s = $26(l, e, s); break;

                case 24: s = $25(l, e, s); break;

                case 23: s = $228(l, e, s); break;

                case 22:

                    s = $969(l, e, s);

                    if (e.p < 0) s = $229(l, e, s);

                    break;


                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![87].includes(a)) fail(l, e);

        return s;
    }
    function $1093(l, e, s = []) {

        e.p = -1;


        if (_68.includes(l.tx)) {

            _s(s, l, e, e.eh, _0);

            e.ASI = true;

            return $1163(l, e, s);
        }

        return s;
    }
    function $1094(l, e, s = []) {

        e.p = -1;


        if (_35.includes(l.tx)) { return $1164(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1095(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "!": s.push($unary_expression(l, e)); break;

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($parenthesized(cp, e));

                if (e.p !== 131) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push(
                    $cover_parenthesized_expression_and_arrow_parameter_list(l, e)
                );

                break;


            case "++": s.push($update_expression(l, e)); break;

            case "+": s.push($unary_expression(l, e)); break;

            case "--": s.push($update_expression(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($unary_expression(cp, e));

                if (e.p !== 126) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case ";": s = $167(l, e, _s(s, l, e, e.eh, _0)); break;

            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($arrow_function(cp, e));

                if (e.p !== 78) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "await": s.push($await_expression(l, e)); break;

            case "break": s.push($break_statement(l, e)); break;

            case "class":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($class_expression(cp, e));

                if (e.p !== 83) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($class_declaration(l, e));

                break;


            case "const": s = $188(l, e, _s(s, l, e, e.eh, _0)); break;

            case "continue": s.push($continue_statement(l, e)); break;

            case "debugger": s.push($debugger_statement(l, e)); break;

            case "delete": s.push($unary_expression(l, e)); break;

            case "do": s.push($iteration_statement(l, e)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "for": s.push($iteration_statement(l, e)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "if": s.push($if_statement(l, e)); break;

            case "import":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($import_meta(cp, e));

                if (e.p !== 95) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($import_call(l, e));

                break;


            case "let": s = $187(l, e, _s(s, l, e, e.eh, _0)); break;

            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($new_expression(cp, e));

                if (e.p !== 91) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($new_target(l, e));

                break;


            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "return": s.push($return_statement(l, e)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($super_property(cp, e));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($super_call(l, e));

                break;


            case "switch": s.push($switch_statement(l, e)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "throw": s.push($throw_statement(l, e)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "try": s.push($try_statement(l, e)); break;

            case "typeof": s.push($unary_expression(l, e)); break;

            case "var": s.push($variable_statement(l, e)); break;

            case "void": s.push($unary_expression(l, e)); break;

            case "while": s.push($iteration_statement(l, e)); break;

            case "with": s.push($with_statement(l, e)); break;

            case "yield": s.push($yield_expression(l, e)); break;

            case "{":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($block(cp, e));

                if (e.p !== 29) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($object_literal(l, e));

                break;


            case "}": s = $1181(l, e, _s(s, l, e, e.eh, _0)); break;

            case "~": s.push($unary_expression(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180:

                    s = $120(l, e, s);

                    if (e.p < 0) s = $121(l, e, s);

                    break;


                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 177: s = $165(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $44(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 82: s = $182(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 75: s = $1067(l, e, s); break;

                case 74: s = $1180(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                case 66: s = $185(l, e, s); break;

                case 62: s = $186(l, e, s); break;

                case 61: s = $184(l, e, s); break;

                case 57: s = $30(l, e, s); break;

                case 56: s = $40(l, e, s); break;

                case 52: s = $39(l, e, s); break;

                case 50: s = $29(l, e, s); break;

                case 44: s = $170(l, e, s); break;

                case 43: s = $37(l, e, s); break;

                case 42: s = $38(l, e, s); break;

                case 41: s = $36(l, e, s); break;

                case 40: s = $35(l, e, s); break;

                case 39: s = $34(l, e, s); break;

                case 36: s = $169(l, e, s); break;

                case 33: s = $32(l, e, s); break;

                case 31: s = $28(l, e, s); break;

                case 30: s = $31(l, e, s); break;

                case 29: s = $41(l, e, s); break;

                case 28: s = $27(l, e, s); break;

                case 27: s = $33(l, e, s); break;

                case 26: s = $183(l, e, s); break;

                case 25: s = $26(l, e, s); break;

                case 24: s = $25(l, e, s); break;

                case 23: s = $228(l, e, s); break;

                case 22:

                    s = $969(l, e, s);

                    if (e.p < 0) s = $229(l, e, s);

                    break;


                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![87].includes(a)) fail(l, e);

        return s;
    }
    function $1096(l, e, s = []) {

        e.p = -1;


        if (_8.includes(l.tx)) { return $1165(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1097(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "!": s.push($unary_expression(l, e)); break;

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($parenthesized(cp, e));

                if (e.p !== 131) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push(
                    $cover_parenthesized_expression_and_arrow_parameter_list(l, e)
                );

                break;


            case ")":

                _s(s, l, e, e.eh, _0);

                e.ASI = true;

                s = $1167(l, e, s);

                break;


            case "++": s.push($update_expression(l, e)); break;

            case "+": s.push($unary_expression(l, e)); break;

            case "--": s.push($update_expression(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($unary_expression(cp, e));

                if (e.p !== 126) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($arrow_function(l, e));

                break;


            case "await": s.push($await_expression(l, e)); break;

            case "class": s.push($class_expression(l, e)); break;

            case "delete": s.push($unary_expression(l, e)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function": s.push($function_expression(l, e)); break;

            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "import":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($import_meta(cp, e));

                if (e.p !== 95) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($import_call(l, e));

                break;


            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($new_expression(cp, e));

                if (e.p !== 91) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($new_target(l, e));

                break;


            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($super_property(cp, e));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($super_call(l, e));

                break;


            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "typeof": s.push($unary_expression(l, e)); break;

            case "void": s.push($unary_expression(l, e)); break;

            case "yield": s.push($yield_expression(l, e)); break;

            case "{": s.push($object_literal(l, e)); break;

            case "~": s.push($unary_expression(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $120(l, e, s); break;

                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $1166(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![36].includes(a)) fail(l, e);

        return s;
    }
    function $1098(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "!": s.push($unary_expression(l, e)); break;

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($parenthesized(cp, e));

                if (e.p !== 131) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push(
                    $cover_parenthesized_expression_and_arrow_parameter_list(l, e)
                );

                break;


            case ")":

                _s(s, l, e, e.eh, _0);

                e.ASI = true;

                s = $1171(l, e, s);

                break;


            case "++": s.push($update_expression(l, e)); break;

            case "+": s.push($unary_expression(l, e)); break;

            case "--": s.push($update_expression(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($unary_expression(cp, e));

                if (e.p !== 126) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($arrow_function(l, e));

                break;


            case "await": s.push($await_expression(l, e)); break;

            case "class": s.push($class_expression(l, e)); break;

            case "delete": s.push($unary_expression(l, e)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function": s.push($function_expression(l, e)); break;

            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "import":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($import_meta(cp, e));

                if (e.p !== 95) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($import_call(l, e));

                break;


            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($new_expression(cp, e));

                if (e.p !== 91) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($new_target(l, e));

                break;


            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($super_property(cp, e));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($super_call(l, e));

                break;


            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "typeof": s.push($unary_expression(l, e)); break;

            case "void": s.push($unary_expression(l, e)); break;

            case "yield": s.push($yield_expression(l, e)); break;

            case "{": s.push($object_literal(l, e)); break;

            case "~": s.push($unary_expression(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $120(l, e, s); break;

                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $1170(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![36].includes(a)) fail(l, e);

        return s;
    }
    function $1099(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "!": s.push($unary_expression(l, e)); break;

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($parenthesized(cp, e));

                if (e.p !== 131) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push(
                    $cover_parenthesized_expression_and_arrow_parameter_list(l, e)
                );

                break;


            case ")":

                _s(s, l, e, e.eh, _0);

                e.ASI = true;

                s = $1169(l, e, s);

                break;


            case "++": s.push($update_expression(l, e)); break;

            case "+": s.push($unary_expression(l, e)); break;

            case "--": s.push($update_expression(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($unary_expression(cp, e));

                if (e.p !== 126) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($arrow_function(l, e));

                break;


            case "await": s.push($await_expression(l, e)); break;

            case "class": s.push($class_expression(l, e)); break;

            case "delete": s.push($unary_expression(l, e)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function": s.push($function_expression(l, e)); break;

            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "import":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($import_meta(cp, e));

                if (e.p !== 95) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($import_call(l, e));

                break;


            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($new_expression(cp, e));

                if (e.p !== 91) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($new_target(l, e));

                break;


            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($super_property(cp, e));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($super_call(l, e));

                break;


            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "typeof": s.push($unary_expression(l, e)); break;

            case "void": s.push($unary_expression(l, e)); break;

            case "yield": s.push($yield_expression(l, e)); break;

            case "{": s.push($object_literal(l, e)); break;

            case "~": s.push($unary_expression(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $120(l, e, s); break;

                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $1168(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![36].includes(a)) fail(l, e);

        return s;
    }
    function $1100(l, e, s = []) {

        e.p = -1;


        if (_68.includes(l.tx)) {

            _s(s, l, e, e.eh, _0);

            e.ASI = true;

            return $1172(l, e, s);
        }

        return s;
    }
    function $1101(l, e, s = []) { s.push($statement(l, e, s)); e.sp++; return s; }
    function $1102(l, e, s = []) {

        e.p = -1;


        if (_68.includes(l.tx)) {

            _s(s, l, e, e.eh, _0);

            e.ASI = true;

            return $1173(l, e, s);
        }

        return s;
    }
    function $1103(l, e, s = []) { s.push($statement(l, e, s)); e.sp++; return s; }
    function $1104(l, e, s = []) {

        e.p = -1;


        if (_52.includes(l.tx)) { return $1184(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1105(l, e, s = []) {

        e.p = -1;


        if (_74.includes(l.tx) || _41.includes(l.ty)) {

            e.sp -= 5;

            var sym = s.slice(-5);

            s.splice(
                -5,
                5,
                {

                    type: "Method",

                    ASYNC: !!null,

                    GENERATOR: !!null,

                    nodes: [sym[0], null, null],

                    pos
                }
            );

            return (e.p = 87, s);
        }

        return s;
    }
    function $1106(l, e, s = []) {

        e.p = -1;


        if (_35.includes(l.tx)) { return $1185(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1107(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "!": s.push($unary_expression(l, e)); break;

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($parenthesized(cp, e));

                if (e.p !== 131) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push(
                    $cover_parenthesized_expression_and_arrow_parameter_list(l, e)
                );

                break;


            case "++": s.push($update_expression(l, e)); break;

            case "+": s.push($unary_expression(l, e)); break;

            case "--": s.push($update_expression(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($unary_expression(cp, e));

                if (e.p !== 126) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case ";": s = $167(l, e, _s(s, l, e, e.eh, _0)); break;

            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($arrow_function(cp, e));

                if (e.p !== 78) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "await": s.push($await_expression(l, e)); break;

            case "break": s.push($break_statement(l, e)); break;

            case "class":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($class_expression(cp, e));

                if (e.p !== 83) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($class_declaration(l, e));

                break;


            case "const": s = $188(l, e, _s(s, l, e, e.eh, _0)); break;

            case "continue": s.push($continue_statement(l, e)); break;

            case "debugger": s.push($debugger_statement(l, e)); break;

            case "delete": s.push($unary_expression(l, e)); break;

            case "do": s.push($iteration_statement(l, e)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "for": s.push($iteration_statement(l, e)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "if": s.push($if_statement(l, e)); break;

            case "import":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($import_meta(cp, e));

                if (e.p !== 95) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($import_call(l, e));

                break;


            case "let": s = $187(l, e, _s(s, l, e, e.eh, _0)); break;

            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($new_expression(cp, e));

                if (e.p !== 91) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($new_target(l, e));

                break;


            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "return": s.push($return_statement(l, e)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($super_property(cp, e));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($super_call(l, e));

                break;


            case "switch": s.push($switch_statement(l, e)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "throw": s.push($throw_statement(l, e)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "try": s.push($try_statement(l, e)); break;

            case "typeof": s.push($unary_expression(l, e)); break;

            case "var": s.push($variable_statement(l, e)); break;

            case "void": s.push($unary_expression(l, e)); break;

            case "while": s.push($iteration_statement(l, e)); break;

            case "with": s.push($with_statement(l, e)); break;

            case "yield": s.push($yield_expression(l, e)); break;

            case "{":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($block(cp, e));

                if (e.p !== 29) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($object_literal(l, e));

                break;


            case "}": s = $1201(l, e, _s(s, l, e, e.eh, _0)); break;

            case "~": s.push($unary_expression(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180:

                    s = $120(l, e, s);

                    if (e.p < 0) s = $121(l, e, s);

                    break;


                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 177: s = $165(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $44(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 82: s = $182(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 75: s = $1067(l, e, s); break;

                case 74: s = $1200(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                case 66: s = $185(l, e, s); break;

                case 62: s = $186(l, e, s); break;

                case 61: s = $184(l, e, s); break;

                case 57: s = $30(l, e, s); break;

                case 56: s = $40(l, e, s); break;

                case 52: s = $39(l, e, s); break;

                case 50: s = $29(l, e, s); break;

                case 44: s = $170(l, e, s); break;

                case 43: s = $37(l, e, s); break;

                case 42: s = $38(l, e, s); break;

                case 41: s = $36(l, e, s); break;

                case 40: s = $35(l, e, s); break;

                case 39: s = $34(l, e, s); break;

                case 36: s = $169(l, e, s); break;

                case 33: s = $32(l, e, s); break;

                case 31: s = $28(l, e, s); break;

                case 30: s = $31(l, e, s); break;

                case 29: s = $41(l, e, s); break;

                case 28: s = $27(l, e, s); break;

                case 27: s = $33(l, e, s); break;

                case 26: s = $183(l, e, s); break;

                case 25: s = $26(l, e, s); break;

                case 24: s = $25(l, e, s); break;

                case 23: s = $228(l, e, s); break;

                case 22:

                    s = $969(l, e, s);

                    if (e.p < 0) s = $229(l, e, s);

                    break;


                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![67].includes(a)) fail(l, e);

        return s;
    }
    function $1108(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "!": s.push($unary_expression(l, e)); break;

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($parenthesized(cp, e));

                if (e.p !== 131) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push(
                    $cover_parenthesized_expression_and_arrow_parameter_list(l, e)
                );

                break;


            case "++": s.push($update_expression(l, e)); break;

            case "+": s.push($unary_expression(l, e)); break;

            case "--": s.push($update_expression(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($unary_expression(cp, e));

                if (e.p !== 126) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case ";": s = $167(l, e, _s(s, l, e, e.eh, _0)); break;

            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($arrow_function(cp, e));

                if (e.p !== 78) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "await": s.push($await_expression(l, e)); break;

            case "break": s.push($break_statement(l, e)); break;

            case "class":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($class_expression(cp, e));

                if (e.p !== 83) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($class_declaration(l, e));

                break;


            case "const": s = $188(l, e, _s(s, l, e, e.eh, _0)); break;

            case "continue": s.push($continue_statement(l, e)); break;

            case "debugger": s.push($debugger_statement(l, e)); break;

            case "delete": s.push($unary_expression(l, e)); break;

            case "do": s.push($iteration_statement(l, e)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "for": s.push($iteration_statement(l, e)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "if": s.push($if_statement(l, e)); break;

            case "import":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($import_meta(cp, e));

                if (e.p !== 95) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($import_call(l, e));

                break;


            case "let": s = $187(l, e, _s(s, l, e, e.eh, _0)); break;

            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($new_expression(cp, e));

                if (e.p !== 91) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($new_target(l, e));

                break;


            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "return": s.push($return_statement(l, e)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($super_property(cp, e));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($super_call(l, e));

                break;


            case "switch": s.push($switch_statement(l, e)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "throw": s.push($throw_statement(l, e)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "try": s.push($try_statement(l, e)); break;

            case "typeof": s.push($unary_expression(l, e)); break;

            case "var": s.push($variable_statement(l, e)); break;

            case "void": s.push($unary_expression(l, e)); break;

            case "while": s.push($iteration_statement(l, e)); break;

            case "with": s.push($with_statement(l, e)); break;

            case "yield": s.push($yield_expression(l, e)); break;

            case "{":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($block(cp, e));

                if (e.p !== 29) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($object_literal(l, e));

                break;


            case "}": s = $1199(l, e, _s(s, l, e, e.eh, _0)); break;

            case "~": s.push($unary_expression(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180:

                    s = $120(l, e, s);

                    if (e.p < 0) s = $121(l, e, s);

                    break;


                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 177: s = $165(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $44(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 82: s = $182(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 75: s = $1067(l, e, s); break;

                case 74: s = $1198(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                case 66: s = $185(l, e, s); break;

                case 62: s = $186(l, e, s); break;

                case 61: s = $184(l, e, s); break;

                case 57: s = $30(l, e, s); break;

                case 56: s = $40(l, e, s); break;

                case 52: s = $39(l, e, s); break;

                case 50: s = $29(l, e, s); break;

                case 44: s = $170(l, e, s); break;

                case 43: s = $37(l, e, s); break;

                case 42: s = $38(l, e, s); break;

                case 41: s = $36(l, e, s); break;

                case 40: s = $35(l, e, s); break;

                case 39: s = $34(l, e, s); break;

                case 36: s = $169(l, e, s); break;

                case 33: s = $32(l, e, s); break;

                case 31: s = $28(l, e, s); break;

                case 30: s = $31(l, e, s); break;

                case 29: s = $41(l, e, s); break;

                case 28: s = $27(l, e, s); break;

                case 27: s = $33(l, e, s); break;

                case 26: s = $183(l, e, s); break;

                case 25: s = $26(l, e, s); break;

                case 24: s = $25(l, e, s); break;

                case 23: s = $228(l, e, s); break;

                case 22:

                    s = $969(l, e, s);

                    if (e.p < 0) s = $229(l, e, s);

                    break;


                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![67].includes(a)) fail(l, e);

        return s;
    }
    function $1109(l, e, s = []) {

        e.p = -1;


        if (_35.includes(l.tx)) { return $1186(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1110(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "!": s.push($unary_expression(l, e)); break;

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($parenthesized(cp, e));

                if (e.p !== 131) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push(
                    $cover_parenthesized_expression_and_arrow_parameter_list(l, e)
                );

                break;


            case "++": s.push($update_expression(l, e)); break;

            case "+": s.push($unary_expression(l, e)); break;

            case "--": s.push($update_expression(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($unary_expression(cp, e));

                if (e.p !== 126) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case ";": s = $167(l, e, _s(s, l, e, e.eh, _0)); break;

            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($arrow_function(cp, e));

                if (e.p !== 78) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "await": s.push($await_expression(l, e)); break;

            case "break": s.push($break_statement(l, e)); break;

            case "class":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($class_expression(cp, e));

                if (e.p !== 83) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($class_declaration(l, e));

                break;


            case "const": s = $188(l, e, _s(s, l, e, e.eh, _0)); break;

            case "continue": s.push($continue_statement(l, e)); break;

            case "debugger": s.push($debugger_statement(l, e)); break;

            case "delete": s.push($unary_expression(l, e)); break;

            case "do": s.push($iteration_statement(l, e)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "for": s.push($iteration_statement(l, e)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "if": s.push($if_statement(l, e)); break;

            case "import":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($import_meta(cp, e));

                if (e.p !== 95) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($import_call(l, e));

                break;


            case "let": s = $187(l, e, _s(s, l, e, e.eh, _0)); break;

            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($new_expression(cp, e));

                if (e.p !== 91) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($new_target(l, e));

                break;


            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "return": s.push($return_statement(l, e)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($super_property(cp, e));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($super_call(l, e));

                break;


            case "switch": s.push($switch_statement(l, e)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "throw": s.push($throw_statement(l, e)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "try": s.push($try_statement(l, e)); break;

            case "typeof": s.push($unary_expression(l, e)); break;

            case "var": s.push($variable_statement(l, e)); break;

            case "void": s.push($unary_expression(l, e)); break;

            case "while": s.push($iteration_statement(l, e)); break;

            case "with": s.push($with_statement(l, e)); break;

            case "yield": s.push($yield_expression(l, e)); break;

            case "{":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($block(cp, e));

                if (e.p !== 29) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($object_literal(l, e));

                break;


            case "}": s = $1194(l, e, _s(s, l, e, e.eh, _0)); break;

            case "~": s.push($unary_expression(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180:

                    s = $120(l, e, s);

                    if (e.p < 0) s = $121(l, e, s);

                    break;


                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 177: s = $165(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $44(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 82: s = $182(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 75: s = $1067(l, e, s); break;

                case 74: s = $1193(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                case 66: s = $185(l, e, s); break;

                case 62: s = $186(l, e, s); break;

                case 61: s = $184(l, e, s); break;

                case 57: s = $30(l, e, s); break;

                case 56: s = $40(l, e, s); break;

                case 52: s = $39(l, e, s); break;

                case 50: s = $29(l, e, s); break;

                case 44: s = $170(l, e, s); break;

                case 43: s = $37(l, e, s); break;

                case 42: s = $38(l, e, s); break;

                case 41: s = $36(l, e, s); break;

                case 40: s = $35(l, e, s); break;

                case 39: s = $34(l, e, s); break;

                case 36: s = $169(l, e, s); break;

                case 33: s = $32(l, e, s); break;

                case 31: s = $28(l, e, s); break;

                case 30: s = $31(l, e, s); break;

                case 29: s = $41(l, e, s); break;

                case 28: s = $27(l, e, s); break;

                case 27: s = $33(l, e, s); break;

                case 26: s = $183(l, e, s); break;

                case 25: s = $26(l, e, s); break;

                case 24: s = $25(l, e, s); break;

                case 23: s = $228(l, e, s); break;

                case 22:

                    s = $969(l, e, s);

                    if (e.p < 0) s = $229(l, e, s);

                    break;


                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![67].includes(a)) fail(l, e);

        return s;
    }
    function $1111(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "!": s.push($unary_expression(l, e)); break;

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($parenthesized(cp, e));

                if (e.p !== 131) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push(
                    $cover_parenthesized_expression_and_arrow_parameter_list(l, e)
                );

                break;


            case "++": s.push($update_expression(l, e)); break;

            case "+": s.push($unary_expression(l, e)); break;

            case "--": s.push($update_expression(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($unary_expression(cp, e));

                if (e.p !== 126) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case ";": s = $167(l, e, _s(s, l, e, e.eh, _0)); break;

            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($arrow_function(cp, e));

                if (e.p !== 78) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "await": s.push($await_expression(l, e)); break;

            case "break": s.push($break_statement(l, e)); break;

            case "class":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($class_expression(cp, e));

                if (e.p !== 83) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($class_declaration(l, e));

                break;


            case "const": s = $188(l, e, _s(s, l, e, e.eh, _0)); break;

            case "continue": s.push($continue_statement(l, e)); break;

            case "debugger": s.push($debugger_statement(l, e)); break;

            case "delete": s.push($unary_expression(l, e)); break;

            case "do": s.push($iteration_statement(l, e)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "for": s.push($iteration_statement(l, e)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "if": s.push($if_statement(l, e)); break;

            case "import":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($import_meta(cp, e));

                if (e.p !== 95) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($import_call(l, e));

                break;


            case "let": s = $187(l, e, _s(s, l, e, e.eh, _0)); break;

            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($new_expression(cp, e));

                if (e.p !== 91) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($new_target(l, e));

                break;


            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "return": s.push($return_statement(l, e)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($super_property(cp, e));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($super_call(l, e));

                break;


            case "switch": s.push($switch_statement(l, e)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "throw": s.push($throw_statement(l, e)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "try": s.push($try_statement(l, e)); break;

            case "typeof": s.push($unary_expression(l, e)); break;

            case "var": s.push($variable_statement(l, e)); break;

            case "void": s.push($unary_expression(l, e)); break;

            case "while": s.push($iteration_statement(l, e)); break;

            case "with": s.push($with_statement(l, e)); break;

            case "yield": s.push($yield_expression(l, e)); break;

            case "{":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($block(cp, e));

                if (e.p !== 29) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($object_literal(l, e));

                break;


            case "}": s = $1196(l, e, _s(s, l, e, e.eh, _0)); break;

            case "~": s.push($unary_expression(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180:

                    s = $120(l, e, s);

                    if (e.p < 0) s = $121(l, e, s);

                    break;


                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 177: s = $165(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $44(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 82: s = $182(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 75: s = $1067(l, e, s); break;

                case 74: s = $1195(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                case 66: s = $185(l, e, s); break;

                case 62: s = $186(l, e, s); break;

                case 61: s = $184(l, e, s); break;

                case 57: s = $30(l, e, s); break;

                case 56: s = $40(l, e, s); break;

                case 52: s = $39(l, e, s); break;

                case 50: s = $29(l, e, s); break;

                case 44: s = $170(l, e, s); break;

                case 43: s = $37(l, e, s); break;

                case 42: s = $38(l, e, s); break;

                case 41: s = $36(l, e, s); break;

                case 40: s = $35(l, e, s); break;

                case 39: s = $34(l, e, s); break;

                case 36: s = $169(l, e, s); break;

                case 33: s = $32(l, e, s); break;

                case 31: s = $28(l, e, s); break;

                case 30: s = $31(l, e, s); break;

                case 29: s = $41(l, e, s); break;

                case 28: s = $27(l, e, s); break;

                case 27: s = $33(l, e, s); break;

                case 26: s = $183(l, e, s); break;

                case 25: s = $26(l, e, s); break;

                case 24: s = $25(l, e, s); break;

                case 23: s = $228(l, e, s); break;

                case 22:

                    s = $969(l, e, s);

                    if (e.p < 0) s = $229(l, e, s);

                    break;


                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![67].includes(a)) fail(l, e);

        return s;
    }
    function $1112(l, e, s = []) {

        e.p = -1;


        if (_68.includes(l.tx)) { return $1187(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1113(l, e, s = []) {

        e.p = -1;


        if (_35.includes(l.tx)) { return $1188(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1114(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "!": s.push($unary_expression(l, e)); break;

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($parenthesized(cp, e));

                if (e.p !== 131) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push(
                    $cover_parenthesized_expression_and_arrow_parameter_list(l, e)
                );

                break;


            case "++": s.push($update_expression(l, e)); break;

            case "+": s.push($unary_expression(l, e)); break;

            case "--": s.push($update_expression(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($unary_expression(cp, e));

                if (e.p !== 126) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case ";": s = $167(l, e, _s(s, l, e, e.eh, _0)); break;

            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($arrow_function(cp, e));

                if (e.p !== 78) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "await": s.push($await_expression(l, e)); break;

            case "break": s.push($break_statement(l, e)); break;

            case "class":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($class_expression(cp, e));

                if (e.p !== 83) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($class_declaration(l, e));

                break;


            case "const": s = $188(l, e, _s(s, l, e, e.eh, _0)); break;

            case "continue": s.push($continue_statement(l, e)); break;

            case "debugger": s.push($debugger_statement(l, e)); break;

            case "delete": s.push($unary_expression(l, e)); break;

            case "do": s.push($iteration_statement(l, e)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "for": s.push($iteration_statement(l, e)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "if": s.push($if_statement(l, e)); break;

            case "import":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($import_meta(cp, e));

                if (e.p !== 95) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($import_call(l, e));

                break;


            case "let": s = $187(l, e, _s(s, l, e, e.eh, _0)); break;

            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($new_expression(cp, e));

                if (e.p !== 91) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($new_target(l, e));

                break;


            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "return": s.push($return_statement(l, e)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($super_property(cp, e));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($super_call(l, e));

                break;


            case "switch": s.push($switch_statement(l, e)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "throw": s.push($throw_statement(l, e)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "try": s.push($try_statement(l, e)); break;

            case "typeof": s.push($unary_expression(l, e)); break;

            case "var": s.push($variable_statement(l, e)); break;

            case "void": s.push($unary_expression(l, e)); break;

            case "while": s.push($iteration_statement(l, e)); break;

            case "with": s.push($with_statement(l, e)); break;

            case "yield": s.push($yield_expression(l, e)); break;

            case "{":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($block(cp, e));

                if (e.p !== 29) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($object_literal(l, e));

                break;


            case "}": s = $1211(l, e, _s(s, l, e, e.eh, _0)); break;

            case "~": s.push($unary_expression(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180:

                    s = $120(l, e, s);

                    if (e.p < 0) s = $121(l, e, s);

                    break;


                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 177: s = $165(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $44(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 82: s = $182(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 75: s = $1067(l, e, s); break;

                case 74: s = $1210(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                case 66: s = $185(l, e, s); break;

                case 62: s = $186(l, e, s); break;

                case 61: s = $184(l, e, s); break;

                case 57: s = $30(l, e, s); break;

                case 56: s = $40(l, e, s); break;

                case 52: s = $39(l, e, s); break;

                case 50: s = $29(l, e, s); break;

                case 44: s = $170(l, e, s); break;

                case 43: s = $37(l, e, s); break;

                case 42: s = $38(l, e, s); break;

                case 41: s = $36(l, e, s); break;

                case 40: s = $35(l, e, s); break;

                case 39: s = $34(l, e, s); break;

                case 36: s = $169(l, e, s); break;

                case 33: s = $32(l, e, s); break;

                case 31: s = $28(l, e, s); break;

                case 30: s = $31(l, e, s); break;

                case 29: s = $41(l, e, s); break;

                case 28: s = $27(l, e, s); break;

                case 27: s = $33(l, e, s); break;

                case 26: s = $183(l, e, s); break;

                case 25: s = $26(l, e, s); break;

                case 24: s = $25(l, e, s); break;

                case 23: s = $228(l, e, s); break;

                case 22:

                    s = $969(l, e, s);

                    if (e.p < 0) s = $229(l, e, s);

                    break;


                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![66].includes(a)) fail(l, e);

        return s;
    }
    function $1115(l, e, s = []) {

        e.p = -1;


        if (_68.includes(l.tx)) { return $1189(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1116(l, e, s = []) {

        e.p = -1;


        if (_35.includes(l.tx)) { return $1190(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1117(l, e, s = []) {

        e.p = -1;


        if (_35.includes(l.tx)) { return $1191(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1118(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "!": s.push($unary_expression(l, e)); break;

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($parenthesized(cp, e));

                if (e.p !== 131) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push(
                    $cover_parenthesized_expression_and_arrow_parameter_list(l, e)
                );

                break;


            case "++": s.push($update_expression(l, e)); break;

            case "+": s.push($unary_expression(l, e)); break;

            case "--": s.push($update_expression(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($unary_expression(cp, e));

                if (e.p !== 126) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case ";": s = $167(l, e, _s(s, l, e, e.eh, _0)); break;

            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($arrow_function(cp, e));

                if (e.p !== 78) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "await": s.push($await_expression(l, e)); break;

            case "break": s.push($break_statement(l, e)); break;

            case "class":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($class_expression(cp, e));

                if (e.p !== 83) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($class_declaration(l, e));

                break;


            case "const": s = $188(l, e, _s(s, l, e, e.eh, _0)); break;

            case "continue": s.push($continue_statement(l, e)); break;

            case "debugger": s.push($debugger_statement(l, e)); break;

            case "delete": s.push($unary_expression(l, e)); break;

            case "do": s.push($iteration_statement(l, e)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "for": s.push($iteration_statement(l, e)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "if": s.push($if_statement(l, e)); break;

            case "import":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($import_meta(cp, e));

                if (e.p !== 95) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($import_call(l, e));

                break;


            case "let": s = $187(l, e, _s(s, l, e, e.eh, _0)); break;

            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($new_expression(cp, e));

                if (e.p !== 91) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($new_target(l, e));

                break;


            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "return": s.push($return_statement(l, e)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($super_property(cp, e));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($super_call(l, e));

                break;


            case "switch": s.push($switch_statement(l, e)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "throw": s.push($throw_statement(l, e)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "try": s.push($try_statement(l, e)); break;

            case "typeof": s.push($unary_expression(l, e)); break;

            case "var": s.push($variable_statement(l, e)); break;

            case "void": s.push($unary_expression(l, e)); break;

            case "while": s.push($iteration_statement(l, e)); break;

            case "with": s.push($with_statement(l, e)); break;

            case "yield": s.push($yield_expression(l, e)); break;

            case "{":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($block(cp, e));

                if (e.p !== 29) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($object_literal(l, e));

                break;


            case "}": s = $1213(l, e, _s(s, l, e, e.eh, _0)); break;

            case "~": s.push($unary_expression(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180:

                    s = $120(l, e, s);

                    if (e.p < 0) s = $121(l, e, s);

                    break;


                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 177: s = $165(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $44(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 82: s = $182(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 75: s = $1067(l, e, s); break;

                case 74: s = $1212(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                case 66: s = $185(l, e, s); break;

                case 62: s = $186(l, e, s); break;

                case 61: s = $184(l, e, s); break;

                case 57: s = $30(l, e, s); break;

                case 56: s = $40(l, e, s); break;

                case 52: s = $39(l, e, s); break;

                case 50: s = $29(l, e, s); break;

                case 44: s = $170(l, e, s); break;

                case 43: s = $37(l, e, s); break;

                case 42: s = $38(l, e, s); break;

                case 41: s = $36(l, e, s); break;

                case 40: s = $35(l, e, s); break;

                case 39: s = $34(l, e, s); break;

                case 36: s = $169(l, e, s); break;

                case 33: s = $32(l, e, s); break;

                case 31: s = $28(l, e, s); break;

                case 30: s = $31(l, e, s); break;

                case 29: s = $41(l, e, s); break;

                case 28: s = $27(l, e, s); break;

                case 27: s = $33(l, e, s); break;

                case 26: s = $183(l, e, s); break;

                case 25: s = $26(l, e, s); break;

                case 24: s = $25(l, e, s); break;

                case 23: s = $228(l, e, s); break;

                case 22:

                    s = $969(l, e, s);

                    if (e.p < 0) s = $229(l, e, s);

                    break;


                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![66].includes(a)) fail(l, e);

        return s;
    }
    function $1119(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "!": s.push($unary_expression(l, e)); break;

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($parenthesized(cp, e));

                if (e.p !== 131) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push(
                    $cover_parenthesized_expression_and_arrow_parameter_list(l, e)
                );

                break;


            case "++": s.push($update_expression(l, e)); break;

            case "+": s.push($unary_expression(l, e)); break;

            case "--": s.push($update_expression(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($unary_expression(cp, e));

                if (e.p !== 126) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case ";": s = $167(l, e, _s(s, l, e, e.eh, _0)); break;

            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($arrow_function(cp, e));

                if (e.p !== 78) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "await": s.push($await_expression(l, e)); break;

            case "break": s.push($break_statement(l, e)); break;

            case "class":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($class_expression(cp, e));

                if (e.p !== 83) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($class_declaration(l, e));

                break;


            case "const": s = $188(l, e, _s(s, l, e, e.eh, _0)); break;

            case "continue": s.push($continue_statement(l, e)); break;

            case "debugger": s.push($debugger_statement(l, e)); break;

            case "delete": s.push($unary_expression(l, e)); break;

            case "do": s.push($iteration_statement(l, e)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "for": s.push($iteration_statement(l, e)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "if": s.push($if_statement(l, e)); break;

            case "import":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($import_meta(cp, e));

                if (e.p !== 95) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($import_call(l, e));

                break;


            case "let": s = $187(l, e, _s(s, l, e, e.eh, _0)); break;

            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($new_expression(cp, e));

                if (e.p !== 91) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($new_target(l, e));

                break;


            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "return": s.push($return_statement(l, e)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($super_property(cp, e));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($super_call(l, e));

                break;


            case "switch": s.push($switch_statement(l, e)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "throw": s.push($throw_statement(l, e)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "try": s.push($try_statement(l, e)); break;

            case "typeof": s.push($unary_expression(l, e)); break;

            case "var": s.push($variable_statement(l, e)); break;

            case "void": s.push($unary_expression(l, e)); break;

            case "while": s.push($iteration_statement(l, e)); break;

            case "with": s.push($with_statement(l, e)); break;

            case "yield": s.push($yield_expression(l, e)); break;

            case "{":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($block(cp, e));

                if (e.p !== 29) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($object_literal(l, e));

                break;


            case "}": s = $1205(l, e, _s(s, l, e, e.eh, _0)); break;

            case "~": s.push($unary_expression(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180:

                    s = $120(l, e, s);

                    if (e.p < 0) s = $121(l, e, s);

                    break;


                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 177: s = $165(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $44(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 82: s = $182(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 75: s = $1067(l, e, s); break;

                case 74: s = $1204(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                case 66: s = $185(l, e, s); break;

                case 62: s = $186(l, e, s); break;

                case 61: s = $184(l, e, s); break;

                case 57: s = $30(l, e, s); break;

                case 56: s = $40(l, e, s); break;

                case 52: s = $39(l, e, s); break;

                case 50: s = $29(l, e, s); break;

                case 44: s = $170(l, e, s); break;

                case 43: s = $37(l, e, s); break;

                case 42: s = $38(l, e, s); break;

                case 41: s = $36(l, e, s); break;

                case 40: s = $35(l, e, s); break;

                case 39: s = $34(l, e, s); break;

                case 36: s = $169(l, e, s); break;

                case 33: s = $32(l, e, s); break;

                case 31: s = $28(l, e, s); break;

                case 30: s = $31(l, e, s); break;

                case 29: s = $41(l, e, s); break;

                case 28: s = $27(l, e, s); break;

                case 27: s = $33(l, e, s); break;

                case 26: s = $183(l, e, s); break;

                case 25: s = $26(l, e, s); break;

                case 24: s = $25(l, e, s); break;

                case 23: s = $228(l, e, s); break;

                case 22:

                    s = $969(l, e, s);

                    if (e.p < 0) s = $229(l, e, s);

                    break;


                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![67].includes(a)) fail(l, e);

        return s;
    }
    function $1120(l, e, s = []) {

        e.p = -1;


        if (_35.includes(l.tx)) { return $1192(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1121(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "!": s.push($unary_expression(l, e)); break;

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($parenthesized(cp, e));

                if (e.p !== 131) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push(
                    $cover_parenthesized_expression_and_arrow_parameter_list(l, e)
                );

                break;


            case "++": s.push($update_expression(l, e)); break;

            case "+": s.push($unary_expression(l, e)); break;

            case "--": s.push($update_expression(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($unary_expression(cp, e));

                if (e.p !== 126) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case ";": s = $167(l, e, _s(s, l, e, e.eh, _0)); break;

            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($arrow_function(cp, e));

                if (e.p !== 78) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "await": s.push($await_expression(l, e)); break;

            case "break": s.push($break_statement(l, e)); break;

            case "class":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($class_expression(cp, e));

                if (e.p !== 83) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($class_declaration(l, e));

                break;


            case "const": s = $188(l, e, _s(s, l, e, e.eh, _0)); break;

            case "continue": s.push($continue_statement(l, e)); break;

            case "debugger": s.push($debugger_statement(l, e)); break;

            case "delete": s.push($unary_expression(l, e)); break;

            case "do": s.push($iteration_statement(l, e)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "for": s.push($iteration_statement(l, e)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "if": s.push($if_statement(l, e)); break;

            case "import":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($import_meta(cp, e));

                if (e.p !== 95) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($import_call(l, e));

                break;


            case "let": s = $187(l, e, _s(s, l, e, e.eh, _0)); break;

            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($new_expression(cp, e));

                if (e.p !== 91) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($new_target(l, e));

                break;


            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "return": s.push($return_statement(l, e)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($super_property(cp, e));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($super_call(l, e));

                break;


            case "switch": s.push($switch_statement(l, e)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "throw": s.push($throw_statement(l, e)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "try": s.push($try_statement(l, e)); break;

            case "typeof": s.push($unary_expression(l, e)); break;

            case "var": s.push($variable_statement(l, e)); break;

            case "void": s.push($unary_expression(l, e)); break;

            case "while": s.push($iteration_statement(l, e)); break;

            case "with": s.push($with_statement(l, e)); break;

            case "yield": s.push($yield_expression(l, e)); break;

            case "{":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($block(cp, e));

                if (e.p !== 29) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($object_literal(l, e));

                break;


            case "}": s = $1209(l, e, _s(s, l, e, e.eh, _0)); break;

            case "~": s.push($unary_expression(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180:

                    s = $120(l, e, s);

                    if (e.p < 0) s = $121(l, e, s);

                    break;


                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 177: s = $165(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $44(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 82: s = $182(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 75: s = $1067(l, e, s); break;

                case 74: s = $1208(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                case 66: s = $185(l, e, s); break;

                case 62: s = $186(l, e, s); break;

                case 61: s = $184(l, e, s); break;

                case 57: s = $30(l, e, s); break;

                case 56: s = $40(l, e, s); break;

                case 52: s = $39(l, e, s); break;

                case 50: s = $29(l, e, s); break;

                case 44: s = $170(l, e, s); break;

                case 43: s = $37(l, e, s); break;

                case 42: s = $38(l, e, s); break;

                case 41: s = $36(l, e, s); break;

                case 40: s = $35(l, e, s); break;

                case 39: s = $34(l, e, s); break;

                case 36: s = $169(l, e, s); break;

                case 33: s = $32(l, e, s); break;

                case 31: s = $28(l, e, s); break;

                case 30: s = $31(l, e, s); break;

                case 29: s = $41(l, e, s); break;

                case 28: s = $27(l, e, s); break;

                case 27: s = $33(l, e, s); break;

                case 26: s = $183(l, e, s); break;

                case 25: s = $26(l, e, s); break;

                case 24: s = $25(l, e, s); break;

                case 23: s = $228(l, e, s); break;

                case 22:

                    s = $969(l, e, s);

                    if (e.p < 0) s = $229(l, e, s);

                    break;


                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![67].includes(a)) fail(l, e);

        return s;
    }
    function $1122(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "!": s.push($unary_expression(l, e)); break;

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($parenthesized(cp, e));

                if (e.p !== 131) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push(
                    $cover_parenthesized_expression_and_arrow_parameter_list(l, e)
                );

                break;


            case "++": s.push($update_expression(l, e)); break;

            case "+": s.push($unary_expression(l, e)); break;

            case "--": s.push($update_expression(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($unary_expression(cp, e));

                if (e.p !== 126) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case ";": s = $167(l, e, _s(s, l, e, e.eh, _0)); break;

            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($arrow_function(cp, e));

                if (e.p !== 78) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "await": s.push($await_expression(l, e)); break;

            case "break": s.push($break_statement(l, e)); break;

            case "class":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($class_expression(cp, e));

                if (e.p !== 83) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($class_declaration(l, e));

                break;


            case "const": s = $188(l, e, _s(s, l, e, e.eh, _0)); break;

            case "continue": s.push($continue_statement(l, e)); break;

            case "debugger": s.push($debugger_statement(l, e)); break;

            case "delete": s.push($unary_expression(l, e)); break;

            case "do": s.push($iteration_statement(l, e)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "for": s.push($iteration_statement(l, e)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "if": s.push($if_statement(l, e)); break;

            case "import":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($import_meta(cp, e));

                if (e.p !== 95) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($import_call(l, e));

                break;


            case "let": s = $187(l, e, _s(s, l, e, e.eh, _0)); break;

            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($new_expression(cp, e));

                if (e.p !== 91) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($new_target(l, e));

                break;


            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "return": s.push($return_statement(l, e)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($super_property(cp, e));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($super_call(l, e));

                break;


            case "switch": s.push($switch_statement(l, e)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "throw": s.push($throw_statement(l, e)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "try": s.push($try_statement(l, e)); break;

            case "typeof": s.push($unary_expression(l, e)); break;

            case "var": s.push($variable_statement(l, e)); break;

            case "void": s.push($unary_expression(l, e)); break;

            case "while": s.push($iteration_statement(l, e)); break;

            case "with": s.push($with_statement(l, e)); break;

            case "yield": s.push($yield_expression(l, e)); break;

            case "{":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($block(cp, e));

                if (e.p !== 29) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($object_literal(l, e));

                break;


            case "}": s = $1231(l, e, _s(s, l, e, e.eh, _0)); break;

            case "~": s.push($unary_expression(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180:

                    s = $120(l, e, s);

                    if (e.p < 0) s = $121(l, e, s);

                    break;


                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 177: s = $165(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $44(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 82: s = $182(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 75: s = $1067(l, e, s); break;

                case 74: s = $1230(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                case 66: s = $185(l, e, s); break;

                case 62: s = $186(l, e, s); break;

                case 61: s = $184(l, e, s); break;

                case 57: s = $30(l, e, s); break;

                case 56: s = $40(l, e, s); break;

                case 52: s = $39(l, e, s); break;

                case 50: s = $29(l, e, s); break;

                case 44: s = $170(l, e, s); break;

                case 43: s = $37(l, e, s); break;

                case 42: s = $38(l, e, s); break;

                case 41: s = $36(l, e, s); break;

                case 40: s = $35(l, e, s); break;

                case 39: s = $34(l, e, s); break;

                case 36: s = $169(l, e, s); break;

                case 33: s = $32(l, e, s); break;

                case 31: s = $28(l, e, s); break;

                case 30: s = $31(l, e, s); break;

                case 29: s = $41(l, e, s); break;

                case 28: s = $27(l, e, s); break;

                case 27: s = $33(l, e, s); break;

                case 26: s = $183(l, e, s); break;

                case 25: s = $26(l, e, s); break;

                case 24: s = $25(l, e, s); break;

                case 23: s = $228(l, e, s); break;

                case 22:

                    s = $969(l, e, s);

                    if (e.p < 0) s = $229(l, e, s);

                    break;


                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![66].includes(a)) fail(l, e);

        return s;
    }
    function $1123(l, e, s = []) {

        e.p = -1;


        if (_35.includes(l.tx)) { return $1197(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1124(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "!": s.push($unary_expression(l, e)); break;

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($parenthesized(cp, e));

                if (e.p !== 131) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push(
                    $cover_parenthesized_expression_and_arrow_parameter_list(l, e)
                );

                break;


            case "++": s.push($update_expression(l, e)); break;

            case "+": s.push($unary_expression(l, e)); break;

            case "--": s.push($update_expression(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($unary_expression(cp, e));

                if (e.p !== 126) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case ";": s = $167(l, e, _s(s, l, e, e.eh, _0)); break;

            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($arrow_function(cp, e));

                if (e.p !== 78) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "await": s.push($await_expression(l, e)); break;

            case "break": s.push($break_statement(l, e)); break;

            case "class":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($class_expression(cp, e));

                if (e.p !== 83) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($class_declaration(l, e));

                break;


            case "const": s = $188(l, e, _s(s, l, e, e.eh, _0)); break;

            case "continue": s.push($continue_statement(l, e)); break;

            case "debugger": s.push($debugger_statement(l, e)); break;

            case "delete": s.push($unary_expression(l, e)); break;

            case "do": s.push($iteration_statement(l, e)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "for": s.push($iteration_statement(l, e)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "if": s.push($if_statement(l, e)); break;

            case "import":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($import_meta(cp, e));

                if (e.p !== 95) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($import_call(l, e));

                break;


            case "let": s = $187(l, e, _s(s, l, e, e.eh, _0)); break;

            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($new_expression(cp, e));

                if (e.p !== 91) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($new_target(l, e));

                break;


            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "return": s.push($return_statement(l, e)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($super_property(cp, e));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($super_call(l, e));

                break;


            case "switch": s.push($switch_statement(l, e)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "throw": s.push($throw_statement(l, e)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "try": s.push($try_statement(l, e)); break;

            case "typeof": s.push($unary_expression(l, e)); break;

            case "var": s.push($variable_statement(l, e)); break;

            case "void": s.push($unary_expression(l, e)); break;

            case "while": s.push($iteration_statement(l, e)); break;

            case "with": s.push($with_statement(l, e)); break;

            case "yield": s.push($yield_expression(l, e)); break;

            case "{":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($block(cp, e));

                if (e.p !== 29) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($object_literal(l, e));

                break;


            case "}": s = $1227(l, e, _s(s, l, e, e.eh, _0)); break;

            case "~": s.push($unary_expression(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180:

                    s = $120(l, e, s);

                    if (e.p < 0) s = $121(l, e, s);

                    break;


                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 177: s = $165(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $44(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 82: s = $182(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 75: s = $1067(l, e, s); break;

                case 74: s = $1226(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                case 66: s = $185(l, e, s); break;

                case 62: s = $186(l, e, s); break;

                case 61: s = $184(l, e, s); break;

                case 57: s = $30(l, e, s); break;

                case 56: s = $40(l, e, s); break;

                case 52: s = $39(l, e, s); break;

                case 50: s = $29(l, e, s); break;

                case 44: s = $170(l, e, s); break;

                case 43: s = $37(l, e, s); break;

                case 42: s = $38(l, e, s); break;

                case 41: s = $36(l, e, s); break;

                case 40: s = $35(l, e, s); break;

                case 39: s = $34(l, e, s); break;

                case 36: s = $169(l, e, s); break;

                case 33: s = $32(l, e, s); break;

                case 31: s = $28(l, e, s); break;

                case 30: s = $31(l, e, s); break;

                case 29: s = $41(l, e, s); break;

                case 28: s = $27(l, e, s); break;

                case 27: s = $33(l, e, s); break;

                case 26: s = $183(l, e, s); break;

                case 25: s = $26(l, e, s); break;

                case 24: s = $25(l, e, s); break;

                case 23: s = $228(l, e, s); break;

                case 22:

                    s = $969(l, e, s);

                    if (e.p < 0) s = $229(l, e, s);

                    break;


                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![66].includes(a)) fail(l, e);

        return s;
    }
    function $1125(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "!": s.push($unary_expression(l, e)); break;

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($parenthesized(cp, e));

                if (e.p !== 131) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push(
                    $cover_parenthesized_expression_and_arrow_parameter_list(l, e)
                );

                break;


            case "++": s.push($update_expression(l, e)); break;

            case "+": s.push($unary_expression(l, e)); break;

            case "--": s.push($update_expression(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($unary_expression(cp, e));

                if (e.p !== 126) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case ";": s = $167(l, e, _s(s, l, e, e.eh, _0)); break;

            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($arrow_function(cp, e));

                if (e.p !== 78) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "await": s.push($await_expression(l, e)); break;

            case "break": s.push($break_statement(l, e)); break;

            case "class":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($class_expression(cp, e));

                if (e.p !== 83) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($class_declaration(l, e));

                break;


            case "const": s = $188(l, e, _s(s, l, e, e.eh, _0)); break;

            case "continue": s.push($continue_statement(l, e)); break;

            case "debugger": s.push($debugger_statement(l, e)); break;

            case "delete": s.push($unary_expression(l, e)); break;

            case "do": s.push($iteration_statement(l, e)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "for": s.push($iteration_statement(l, e)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "if": s.push($if_statement(l, e)); break;

            case "import":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($import_meta(cp, e));

                if (e.p !== 95) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($import_call(l, e));

                break;


            case "let": s = $187(l, e, _s(s, l, e, e.eh, _0)); break;

            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($new_expression(cp, e));

                if (e.p !== 91) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($new_target(l, e));

                break;


            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "return": s.push($return_statement(l, e)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($super_property(cp, e));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($super_call(l, e));

                break;


            case "switch": s.push($switch_statement(l, e)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "throw": s.push($throw_statement(l, e)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "try": s.push($try_statement(l, e)); break;

            case "typeof": s.push($unary_expression(l, e)); break;

            case "var": s.push($variable_statement(l, e)); break;

            case "void": s.push($unary_expression(l, e)); break;

            case "while": s.push($iteration_statement(l, e)); break;

            case "with": s.push($with_statement(l, e)); break;

            case "yield": s.push($yield_expression(l, e)); break;

            case "{":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($block(cp, e));

                if (e.p !== 29) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($object_literal(l, e));

                break;


            case "}": s = $1234(l, e, _s(s, l, e, e.eh, _0)); break;

            case "~": s.push($unary_expression(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180:

                    s = $120(l, e, s);

                    if (e.p < 0) s = $121(l, e, s);

                    break;


                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 177: s = $165(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $44(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 82: s = $182(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 75: s = $1067(l, e, s); break;

                case 74: s = $1233(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                case 66: s = $185(l, e, s); break;

                case 62: s = $186(l, e, s); break;

                case 61: s = $184(l, e, s); break;

                case 57: s = $30(l, e, s); break;

                case 56: s = $40(l, e, s); break;

                case 52: s = $39(l, e, s); break;

                case 50: s = $29(l, e, s); break;

                case 44: s = $170(l, e, s); break;

                case 43: s = $37(l, e, s); break;

                case 42: s = $38(l, e, s); break;

                case 41: s = $36(l, e, s); break;

                case 40: s = $35(l, e, s); break;

                case 39: s = $34(l, e, s); break;

                case 36: s = $169(l, e, s); break;

                case 33: s = $32(l, e, s); break;

                case 31: s = $28(l, e, s); break;

                case 30: s = $31(l, e, s); break;

                case 29: s = $41(l, e, s); break;

                case 28: s = $27(l, e, s); break;

                case 27: s = $33(l, e, s); break;

                case 26: s = $183(l, e, s); break;

                case 25: s = $26(l, e, s); break;

                case 24: s = $25(l, e, s); break;

                case 23: s = $228(l, e, s); break;

                case 22:

                    s = $969(l, e, s);

                    if (e.p < 0) s = $229(l, e, s);

                    break;


                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![66].includes(a)) fail(l, e);

        return s;
    }
    function $1126(l, e, s = []) {

        e.p = -1;


        if (_52.includes(l.tx)) { return $1202(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1127(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 6;

            var sym = s.slice(-6);

            s.splice(
                -6,
                6,
                {

                    type: "FunctionExpression",

                    ASYNC: !!sym[0],

                    GENERATOR: !!null,

                    nodes: [null, null, null],

                    pos
                }
            );

            return (e.p = 67, s);
        }

        return s;
    }
    function $1128(l, e, s = []) {

        e.p = -1;


        if (_35.includes(l.tx)) { return $1203(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1129(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "!": s.push($unary_expression(l, e)); break;

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($parenthesized(cp, e));

                if (e.p !== 131) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push(
                    $cover_parenthesized_expression_and_arrow_parameter_list(l, e)
                );

                break;


            case "++": s.push($update_expression(l, e)); break;

            case "+": s.push($unary_expression(l, e)); break;

            case "--": s.push($update_expression(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($unary_expression(cp, e));

                if (e.p !== 126) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case ";": s = $167(l, e, _s(s, l, e, e.eh, _0)); break;

            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($arrow_function(cp, e));

                if (e.p !== 78) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "await": s.push($await_expression(l, e)); break;

            case "break": s.push($break_statement(l, e)); break;

            case "class":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($class_expression(cp, e));

                if (e.p !== 83) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($class_declaration(l, e));

                break;


            case "const": s = $188(l, e, _s(s, l, e, e.eh, _0)); break;

            case "continue": s.push($continue_statement(l, e)); break;

            case "debugger": s.push($debugger_statement(l, e)); break;

            case "delete": s.push($unary_expression(l, e)); break;

            case "do": s.push($iteration_statement(l, e)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "for": s.push($iteration_statement(l, e)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "if": s.push($if_statement(l, e)); break;

            case "import":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($import_meta(cp, e));

                if (e.p !== 95) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($import_call(l, e));

                break;


            case "let": s = $187(l, e, _s(s, l, e, e.eh, _0)); break;

            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($new_expression(cp, e));

                if (e.p !== 91) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($new_target(l, e));

                break;


            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "return": s.push($return_statement(l, e)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($super_property(cp, e));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($super_call(l, e));

                break;


            case "switch": s.push($switch_statement(l, e)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "throw": s.push($throw_statement(l, e)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "try": s.push($try_statement(l, e)); break;

            case "typeof": s.push($unary_expression(l, e)); break;

            case "var": s.push($variable_statement(l, e)); break;

            case "void": s.push($unary_expression(l, e)); break;

            case "while": s.push($iteration_statement(l, e)); break;

            case "with": s.push($with_statement(l, e)); break;

            case "yield": s.push($yield_expression(l, e)); break;

            case "{":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($block(cp, e));

                if (e.p !== 29) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($object_literal(l, e));

                break;


            case "}": s = $1229(l, e, _s(s, l, e, e.eh, _0)); break;

            case "~": s.push($unary_expression(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180:

                    s = $120(l, e, s);

                    if (e.p < 0) s = $121(l, e, s);

                    break;


                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 177: s = $165(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $44(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 82: s = $182(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 75: s = $1067(l, e, s); break;

                case 74: s = $1228(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                case 66: s = $185(l, e, s); break;

                case 62: s = $186(l, e, s); break;

                case 61: s = $184(l, e, s); break;

                case 57: s = $30(l, e, s); break;

                case 56: s = $40(l, e, s); break;

                case 52: s = $39(l, e, s); break;

                case 50: s = $29(l, e, s); break;

                case 44: s = $170(l, e, s); break;

                case 43: s = $37(l, e, s); break;

                case 42: s = $38(l, e, s); break;

                case 41: s = $36(l, e, s); break;

                case 40: s = $35(l, e, s); break;

                case 39: s = $34(l, e, s); break;

                case 36: s = $169(l, e, s); break;

                case 33: s = $32(l, e, s); break;

                case 31: s = $28(l, e, s); break;

                case 30: s = $31(l, e, s); break;

                case 29: s = $41(l, e, s); break;

                case 28: s = $27(l, e, s); break;

                case 27: s = $33(l, e, s); break;

                case 26: s = $183(l, e, s); break;

                case 25: s = $26(l, e, s); break;

                case 24: s = $25(l, e, s); break;

                case 23: s = $228(l, e, s); break;

                case 22:

                    s = $969(l, e, s);

                    if (e.p < 0) s = $229(l, e, s);

                    break;


                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![66].includes(a)) fail(l, e);

        return s;
    }
    function $1130(l, e, s = []) {

        e.p = -1;


        if (_52.includes(l.tx)) { return $1206(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1131(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 6;

            var sym = s.slice(-6);

            s.splice(
                -6,
                6,
                {

                    type: "FunctionExpression",

                    ASYNC: !!null,

                    GENERATOR: !!null,

                    nodes: [sym[1], null, null],

                    pos
                }
            );

            return (e.p = 67, s);
        }

        return s;
    }
    function $1132(l, e, s = []) {

        e.p = -1;


        if (_52.includes(l.tx)) { return $1207(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1133(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 6;

            var sym = s.slice(-6);

            s.splice(
                -6,
                6,
                {

                    type: "FunctionExpression",

                    ASYNC: !!null,

                    GENERATOR: !!null,

                    nodes: [null, sym[2], null],

                    pos
                }
            );

            return (e.p = 67, s);
        }

        return s;
    }
    function $1134(l, e, s = []) {

        e.p = -1;


        if (_52.includes(l.tx)) { return $1214(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1135(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 6;

            var sym = s.slice(-6);

            s.splice(
                -6,
                6,
                {

                    type: "FunctionExpression",

                    ASYNC: !!null,

                    GENERATOR: !!sym[1],

                    nodes: [null, null, null],

                    pos
                }
            );

            return (e.p = 67, s);
        }

        return s;
    }
    function $1136(l, e, s = []) {

        e.p = -1;


        if (_52.includes(l.tx)) { return $1215(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1137(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 6;

            var sym = s.slice(-6);

            s.splice(
                -6,
                6,
                {

                    type: "FunctionDeclaration",

                    ASYNC: !!null,

                    GENERATOR: !!null,

                    nodes: [sym[1], null, null],

                    pos
                }
            );

            return (e.p = 66, s);
        }

        return s;
    }
    function $1138(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 6;

            var sym = s.slice(-6);

            s.splice(
                -6,
                6,
                { type: "Class", nodes: [sym[1], sym[2], ...sym[4]], pos }
            );

            return (e.p = 83, s);
        }

        return s;
    }
    function $1139(l, e, s = []) {

        e.p = -1;


        if (l.END || _5.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 6;

            var sym = s.slice(-6);

            s.splice(
                -6,
                6,
                { type: "Class", nodes: [sym[1], sym[2], ...sym[4]], pos }
            );

            return (e.p = 82, s);
        }

        return s;
    }
    function $1140(l, e, s = []) {

        e.p = -1;


        if (_52.includes(l.tx)) { return $1216(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1141(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 6;

            var sym = s.slice(-6);

            s.splice(
                -6,
                6,
                {

                    type: "FunctionDeclaration",

                    ASYNC: !!null,

                    GENERATOR: !!sym[1],

                    nodes: [null, null, null],

                    pos
                }
            );

            return (e.p = 66, s);
        }

        return s;
    }
    function $1142(l, e, s = []) {

        e.p = -1;


        if (_52.includes(l.tx)) { return $1217(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1143(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 6;

            var sym = s.slice(-6);

            s.splice(
                -6,
                6,
                {

                    type: "FunctionDeclaration",

                    ASYNC: !!sym[0],

                    GENERATOR: !!null,

                    nodes: [null, null, null],

                    pos
                }
            );

            return (e.p = 66, s);
        }

        return s;
    }
    function $1144(l, e, s = []) {

        e.p = -1;


        if (_52.includes(l.tx)) { return $1218(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1145(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 6;

            var sym = s.slice(-6);

            s.splice(
                -6,
                6,
                {

                    type: "FunctionDeclaration",

                    ASYNC: !!null,

                    GENERATOR: !!null,

                    nodes: [null, sym[2], null],

                    pos
                }
            );

            return (e.p = 66, s);
        }

        return s;
    }
    function $1146(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 6;

            var sym = s.slice(-6);

            s.splice(
                -6,
                6,
                {

                    type: "FunctionExpression",

                    ASYNC: !!null,

                    GENERATOR: !!null,

                    nodes: [null, null, sym[4]],

                    pos
                }
            );

            return (e.p = 67, s);
        }

        return s;
    }
    function $1147(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 6;

            var sym = s.slice(-6);

            s.splice(
                -6,
                6,
                {

                    type: "FunctionDeclaration",

                    ASYNC: !!null,

                    GENERATOR: !!null,

                    nodes: [null, null, sym[4]],

                    pos
                }
            );

            return (e.p = 66, s);
        }

        return s;
    }
    function $1148(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "case": s.push($case_clause(l, e)); break;

            case "default": s.push($default_clause(l, e)); break;

            case "}": s = $1221(l, e, _s(s, l, e, e.eh, _0)); break;
        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 49: s = $1219(l, e, s); break;

                case 48: s = $202(l, e, s); break;

                case 47:

                    s = $1220(l, e, s);

                    if (e.p < 0) s = $201(l, e, s);

                    break;


                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![45].includes(a)) fail(l, e);

        return s;
    }
    function $1149(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "case": s.push($case_clause(l, e)); break;

            case "}": s = $1223(l, e, _s(s, l, e, e.eh, _0)); break;
        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 48: s = $202(l, e, s); break;

                case 47:

                    s = $1222(l, e, s);

                    if (e.p < 0) s = $201(l, e, s);

                    break;


                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![45].includes(a)) fail(l, e);

        return s;
    }
    function $1150(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 2;

            var sym = s.slice(-2);

            s.splice(-2, 2, { type: "CaseBlock", nodes: [], pos });

            return (e.p = 45, s);
        }

        return s;
    }
    function $1152(l, e, s = []) { s.push($block(l, e, s)); e.sp++; return s; }
    function $1153(l, e, s = []) {

        e.p = -1;


        if (_68.includes(l.tx)) {

            _s(s, l, e, e.eh, _0);

            e.ASI = true;

            return $1232(l, e, s);
        }

        return s;
    }
    function $1154(l, e, s = []) {

        e.p = -1;


        if (_8.includes(l.tx)) { return $1235(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1155(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 6;

            var sym = s.slice(-6);

            s.splice(
                -6,
                6,
                {

                    type: "IfStatement",

                    nodes: [sym[2], sym[4], sym[5]],

                    pos
                }
            );

            return (e.p = 33, s);
        }

        return s;
    }
    function $1157(l, e, s = []) {

        e.p = -1;


        if (_42.includes(l.tx)) {

            e.sp -= 6;

            var sym = s.slice(-6);

            s.splice(
                -6,
                6,
                {

                    type: "ArrayBinding",

                    nodes: [...sym[1], sym[3], sym[4]],

                    pos
                }
            );

            return (e.p = 134, s);
        }

        return s;
    }
    function $1158(l, e, s = []) { s.push($statement(l, e, s)); e.sp++; return s; }
    function $1159(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "!": s.push($unary_expression(l, e)); break;

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($parenthesized(cp, e));

                if (e.p !== 131) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push(
                    $cover_parenthesized_expression_and_arrow_parameter_list(l, e)
                );

                break;


            case "++": s.push($update_expression(l, e)); break;

            case "+": s.push($unary_expression(l, e)); break;

            case "--": s.push($update_expression(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($unary_expression(cp, e));

                if (e.p !== 126) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case ";": s = $167(l, e, _s(s, l, e, e.eh, _0)); break;

            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($arrow_function(cp, e));

                if (e.p !== 78) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "await": s.push($await_expression(l, e)); break;

            case "break": s.push($break_statement(l, e)); break;

            case "class":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($class_expression(cp, e));

                if (e.p !== 83) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($class_declaration(l, e));

                break;


            case "const": s = $188(l, e, _s(s, l, e, e.eh, _0)); break;

            case "continue": s.push($continue_statement(l, e)); break;

            case "debugger": s.push($debugger_statement(l, e)); break;

            case "delete": s.push($unary_expression(l, e)); break;

            case "do": s.push($iteration_statement(l, e)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "for": s.push($iteration_statement(l, e)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "if": s.push($if_statement(l, e)); break;

            case "import":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($import_meta(cp, e));

                if (e.p !== 95) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($import_call(l, e));

                break;


            case "let": s = $187(l, e, _s(s, l, e, e.eh, _0)); break;

            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($new_expression(cp, e));

                if (e.p !== 91) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($new_target(l, e));

                break;


            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "return": s.push($return_statement(l, e)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($super_property(cp, e));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($super_call(l, e));

                break;


            case "switch": s.push($switch_statement(l, e)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "throw": s.push($throw_statement(l, e)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "try": s.push($try_statement(l, e)); break;

            case "typeof": s.push($unary_expression(l, e)); break;

            case "var": s.push($variable_statement(l, e)); break;

            case "void": s.push($unary_expression(l, e)); break;

            case "while": s.push($iteration_statement(l, e)); break;

            case "with": s.push($with_statement(l, e)); break;

            case "yield": s.push($yield_expression(l, e)); break;

            case "{":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($block(cp, e));

                if (e.p !== 29) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($object_literal(l, e));

                break;


            case "}": s = $1257(l, e, _s(s, l, e, e.eh, _0)); break;

            case "~": s.push($unary_expression(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180:

                    s = $120(l, e, s);

                    if (e.p < 0) s = $121(l, e, s);

                    break;


                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 177: s = $165(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $44(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 82: s = $182(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 75: s = $1067(l, e, s); break;

                case 74: s = $1256(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                case 66: s = $185(l, e, s); break;

                case 62: s = $186(l, e, s); break;

                case 61: s = $184(l, e, s); break;

                case 57: s = $30(l, e, s); break;

                case 56: s = $40(l, e, s); break;

                case 52: s = $39(l, e, s); break;

                case 50: s = $29(l, e, s); break;

                case 44: s = $170(l, e, s); break;

                case 43: s = $37(l, e, s); break;

                case 42: s = $38(l, e, s); break;

                case 41: s = $36(l, e, s); break;

                case 40: s = $35(l, e, s); break;

                case 39: s = $34(l, e, s); break;

                case 36: s = $169(l, e, s); break;

                case 33: s = $32(l, e, s); break;

                case 31: s = $28(l, e, s); break;

                case 30: s = $31(l, e, s); break;

                case 29: s = $41(l, e, s); break;

                case 28: s = $27(l, e, s); break;

                case 27: s = $33(l, e, s); break;

                case 26: s = $183(l, e, s); break;

                case 25: s = $26(l, e, s); break;

                case 24: s = $25(l, e, s); break;

                case 23: s = $228(l, e, s); break;

                case 22:

                    s = $969(l, e, s);

                    if (e.p < 0) s = $229(l, e, s);

                    break;


                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![87].includes(a)) fail(l, e);

        return s;
    }
    function $1160(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "!": s.push($unary_expression(l, e)); break;

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($parenthesized(cp, e));

                if (e.p !== 131) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push(
                    $cover_parenthesized_expression_and_arrow_parameter_list(l, e)
                );

                break;


            case "++": s.push($update_expression(l, e)); break;

            case "+": s.push($unary_expression(l, e)); break;

            case "--": s.push($update_expression(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($unary_expression(cp, e));

                if (e.p !== 126) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case ";": s = $167(l, e, _s(s, l, e, e.eh, _0)); break;

            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($arrow_function(cp, e));

                if (e.p !== 78) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "await": s.push($await_expression(l, e)); break;

            case "break": s.push($break_statement(l, e)); break;

            case "class":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($class_expression(cp, e));

                if (e.p !== 83) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($class_declaration(l, e));

                break;


            case "const": s = $188(l, e, _s(s, l, e, e.eh, _0)); break;

            case "continue": s.push($continue_statement(l, e)); break;

            case "debugger": s.push($debugger_statement(l, e)); break;

            case "delete": s.push($unary_expression(l, e)); break;

            case "do": s.push($iteration_statement(l, e)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "for": s.push($iteration_statement(l, e)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "if": s.push($if_statement(l, e)); break;

            case "import":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($import_meta(cp, e));

                if (e.p !== 95) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($import_call(l, e));

                break;


            case "let": s = $187(l, e, _s(s, l, e, e.eh, _0)); break;

            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($new_expression(cp, e));

                if (e.p !== 91) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($new_target(l, e));

                break;


            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "return": s.push($return_statement(l, e)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($super_property(cp, e));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($super_call(l, e));

                break;


            case "switch": s.push($switch_statement(l, e)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "throw": s.push($throw_statement(l, e)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "try": s.push($try_statement(l, e)); break;

            case "typeof": s.push($unary_expression(l, e)); break;

            case "var": s.push($variable_statement(l, e)); break;

            case "void": s.push($unary_expression(l, e)); break;

            case "while": s.push($iteration_statement(l, e)); break;

            case "with": s.push($with_statement(l, e)); break;

            case "yield": s.push($yield_expression(l, e)); break;

            case "{":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($block(cp, e));

                if (e.p !== 29) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($object_literal(l, e));

                break;


            case "}": s = $1250(l, e, _s(s, l, e, e.eh, _0)); break;

            case "~": s.push($unary_expression(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180:

                    s = $120(l, e, s);

                    if (e.p < 0) s = $121(l, e, s);

                    break;


                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 177: s = $165(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $44(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 82: s = $182(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 75: s = $1067(l, e, s); break;

                case 74: s = $1249(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                case 66: s = $185(l, e, s); break;

                case 62: s = $186(l, e, s); break;

                case 61: s = $184(l, e, s); break;

                case 57: s = $30(l, e, s); break;

                case 56: s = $40(l, e, s); break;

                case 52: s = $39(l, e, s); break;

                case 50: s = $29(l, e, s); break;

                case 44: s = $170(l, e, s); break;

                case 43: s = $37(l, e, s); break;

                case 42: s = $38(l, e, s); break;

                case 41: s = $36(l, e, s); break;

                case 40: s = $35(l, e, s); break;

                case 39: s = $34(l, e, s); break;

                case 36: s = $169(l, e, s); break;

                case 33: s = $32(l, e, s); break;

                case 31: s = $28(l, e, s); break;

                case 30: s = $31(l, e, s); break;

                case 29: s = $41(l, e, s); break;

                case 28: s = $27(l, e, s); break;

                case 27: s = $33(l, e, s); break;

                case 26: s = $183(l, e, s); break;

                case 25: s = $26(l, e, s); break;

                case 24: s = $25(l, e, s); break;

                case 23: s = $228(l, e, s); break;

                case 22:

                    s = $969(l, e, s);

                    if (e.p < 0) s = $229(l, e, s);

                    break;


                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![87].includes(a)) fail(l, e);

        return s;
    }
    function $1161(l, e, s = []) {

        e.p = -1;


        if (_35.includes(l.tx)) { return $1237(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1162(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "!": s.push($unary_expression(l, e)); break;

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($parenthesized(cp, e));

                if (e.p !== 131) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push(
                    $cover_parenthesized_expression_and_arrow_parameter_list(l, e)
                );

                break;


            case "++": s.push($update_expression(l, e)); break;

            case "+": s.push($unary_expression(l, e)); break;

            case "--": s.push($update_expression(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($unary_expression(cp, e));

                if (e.p !== 126) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case ";": s = $167(l, e, _s(s, l, e, e.eh, _0)); break;

            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($arrow_function(cp, e));

                if (e.p !== 78) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "await": s.push($await_expression(l, e)); break;

            case "break": s.push($break_statement(l, e)); break;

            case "class":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($class_expression(cp, e));

                if (e.p !== 83) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($class_declaration(l, e));

                break;


            case "const": s = $188(l, e, _s(s, l, e, e.eh, _0)); break;

            case "continue": s.push($continue_statement(l, e)); break;

            case "debugger": s.push($debugger_statement(l, e)); break;

            case "delete": s.push($unary_expression(l, e)); break;

            case "do": s.push($iteration_statement(l, e)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "for": s.push($iteration_statement(l, e)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "if": s.push($if_statement(l, e)); break;

            case "import":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($import_meta(cp, e));

                if (e.p !== 95) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($import_call(l, e));

                break;


            case "let": s = $187(l, e, _s(s, l, e, e.eh, _0)); break;

            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($new_expression(cp, e));

                if (e.p !== 91) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($new_target(l, e));

                break;


            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "return": s.push($return_statement(l, e)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($super_property(cp, e));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($super_call(l, e));

                break;


            case "switch": s.push($switch_statement(l, e)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "throw": s.push($throw_statement(l, e)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "try": s.push($try_statement(l, e)); break;

            case "typeof": s.push($unary_expression(l, e)); break;

            case "var": s.push($variable_statement(l, e)); break;

            case "void": s.push($unary_expression(l, e)); break;

            case "while": s.push($iteration_statement(l, e)); break;

            case "with": s.push($with_statement(l, e)); break;

            case "yield": s.push($yield_expression(l, e)); break;

            case "{":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($block(cp, e));

                if (e.p !== 29) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($object_literal(l, e));

                break;


            case "}": s = $1254(l, e, _s(s, l, e, e.eh, _0)); break;

            case "~": s.push($unary_expression(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180:

                    s = $120(l, e, s);

                    if (e.p < 0) s = $121(l, e, s);

                    break;


                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 177: s = $165(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $44(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 82: s = $182(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 75: s = $1067(l, e, s); break;

                case 74: s = $1253(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                case 66: s = $185(l, e, s); break;

                case 62: s = $186(l, e, s); break;

                case 61: s = $184(l, e, s); break;

                case 57: s = $30(l, e, s); break;

                case 56: s = $40(l, e, s); break;

                case 52: s = $39(l, e, s); break;

                case 50: s = $29(l, e, s); break;

                case 44: s = $170(l, e, s); break;

                case 43: s = $37(l, e, s); break;

                case 42: s = $38(l, e, s); break;

                case 41: s = $36(l, e, s); break;

                case 40: s = $35(l, e, s); break;

                case 39: s = $34(l, e, s); break;

                case 36: s = $169(l, e, s); break;

                case 33: s = $32(l, e, s); break;

                case 31: s = $28(l, e, s); break;

                case 30: s = $31(l, e, s); break;

                case 29: s = $41(l, e, s); break;

                case 28: s = $27(l, e, s); break;

                case 27: s = $33(l, e, s); break;

                case 26: s = $183(l, e, s); break;

                case 25: s = $26(l, e, s); break;

                case 24: s = $25(l, e, s); break;

                case 23: s = $228(l, e, s); break;

                case 22:

                    s = $969(l, e, s);

                    if (e.p < 0) s = $229(l, e, s);

                    break;


                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![87].includes(a)) fail(l, e);

        return s;
    }
    function $1163(l, e, s = []) { s.push($statement(l, e, s)); e.sp++; return s; }
    function $1164(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "!": s.push($unary_expression(l, e)); break;

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($parenthesized(cp, e));

                if (e.p !== 131) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push(
                    $cover_parenthesized_expression_and_arrow_parameter_list(l, e)
                );

                break;


            case "++": s.push($update_expression(l, e)); break;

            case "+": s.push($unary_expression(l, e)); break;

            case "--": s.push($update_expression(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($unary_expression(cp, e));

                if (e.p !== 126) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case ";": s = $167(l, e, _s(s, l, e, e.eh, _0)); break;

            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($arrow_function(cp, e));

                if (e.p !== 78) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "await": s.push($await_expression(l, e)); break;

            case "break": s.push($break_statement(l, e)); break;

            case "class":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($class_expression(cp, e));

                if (e.p !== 83) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($class_declaration(l, e));

                break;


            case "const": s = $188(l, e, _s(s, l, e, e.eh, _0)); break;

            case "continue": s.push($continue_statement(l, e)); break;

            case "debugger": s.push($debugger_statement(l, e)); break;

            case "delete": s.push($unary_expression(l, e)); break;

            case "do": s.push($iteration_statement(l, e)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "for": s.push($iteration_statement(l, e)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "if": s.push($if_statement(l, e)); break;

            case "import":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($import_meta(cp, e));

                if (e.p !== 95) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($import_call(l, e));

                break;


            case "let": s = $187(l, e, _s(s, l, e, e.eh, _0)); break;

            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($new_expression(cp, e));

                if (e.p !== 91) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($new_target(l, e));

                break;


            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "return": s.push($return_statement(l, e)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($super_property(cp, e));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($super_call(l, e));

                break;


            case "switch": s.push($switch_statement(l, e)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "throw": s.push($throw_statement(l, e)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "try": s.push($try_statement(l, e)); break;

            case "typeof": s.push($unary_expression(l, e)); break;

            case "var": s.push($variable_statement(l, e)); break;

            case "void": s.push($unary_expression(l, e)); break;

            case "while": s.push($iteration_statement(l, e)); break;

            case "with": s.push($with_statement(l, e)); break;

            case "yield": s.push($yield_expression(l, e)); break;

            case "{":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($block(cp, e));

                if (e.p !== 29) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($object_literal(l, e));

                break;


            case "}": s = $1259(l, e, _s(s, l, e, e.eh, _0)); break;

            case "~": s.push($unary_expression(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180:

                    s = $120(l, e, s);

                    if (e.p < 0) s = $121(l, e, s);

                    break;


                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 177: s = $165(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $44(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 82: s = $182(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 75: s = $1067(l, e, s); break;

                case 74: s = $1258(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                case 66: s = $185(l, e, s); break;

                case 62: s = $186(l, e, s); break;

                case 61: s = $184(l, e, s); break;

                case 57: s = $30(l, e, s); break;

                case 56: s = $40(l, e, s); break;

                case 52: s = $39(l, e, s); break;

                case 50: s = $29(l, e, s); break;

                case 44: s = $170(l, e, s); break;

                case 43: s = $37(l, e, s); break;

                case 42: s = $38(l, e, s); break;

                case 41: s = $36(l, e, s); break;

                case 40: s = $35(l, e, s); break;

                case 39: s = $34(l, e, s); break;

                case 36: s = $169(l, e, s); break;

                case 33: s = $32(l, e, s); break;

                case 31: s = $28(l, e, s); break;

                case 30: s = $31(l, e, s); break;

                case 29: s = $41(l, e, s); break;

                case 28: s = $27(l, e, s); break;

                case 27: s = $33(l, e, s); break;

                case 26: s = $183(l, e, s); break;

                case 25: s = $26(l, e, s); break;

                case 24: s = $25(l, e, s); break;

                case 23: s = $228(l, e, s); break;

                case 22:

                    s = $969(l, e, s);

                    if (e.p < 0) s = $229(l, e, s);

                    break;


                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![87].includes(a)) fail(l, e);

        return s;
    }
    function $1165(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "!": s.push($unary_expression(l, e)); break;

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($parenthesized(cp, e));

                if (e.p !== 131) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push(
                    $cover_parenthesized_expression_and_arrow_parameter_list(l, e)
                );

                break;


            case ")":

                _s(s, l, e, e.eh, _0);

                e.ASI = true;

                s = $1244(l, e, s);

                break;


            case "++": s.push($update_expression(l, e)); break;

            case "+": s.push($unary_expression(l, e)); break;

            case "--": s.push($update_expression(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($unary_expression(cp, e));

                if (e.p !== 126) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($arrow_function(l, e));

                break;


            case "await": s.push($await_expression(l, e)); break;

            case "class": s.push($class_expression(l, e)); break;

            case "delete": s.push($unary_expression(l, e)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function": s.push($function_expression(l, e)); break;

            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "import":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($import_meta(cp, e));

                if (e.p !== 95) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($import_call(l, e));

                break;


            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($new_expression(cp, e));

                if (e.p !== 91) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($new_target(l, e));

                break;


            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($super_property(cp, e));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($super_call(l, e));

                break;


            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "typeof": s.push($unary_expression(l, e)); break;

            case "void": s.push($unary_expression(l, e)); break;

            case "yield": s.push($yield_expression(l, e)); break;

            case "{": s.push($object_literal(l, e)); break;

            case "~": s.push($unary_expression(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180: s = $120(l, e, s); break;

                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $1243(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![36].includes(a)) fail(l, e);

        return s;
    }
    function $1166(l, e, s = []) {

        e.p = -1;


        if (_68.includes(l.tx)) {

            _s(s, l, e, e.eh, _0);

            e.ASI = true;

            return $1240(l, e, s);
        }

        return s;
    }
    function $1167(l, e, s = []) { s.push($statement(l, e, s)); e.sp++; return s; }
    function $1168(l, e, s = []) {

        e.p = -1;


        if (_68.includes(l.tx)) {

            _s(s, l, e, e.eh, _0);

            e.ASI = true;

            return $1241(l, e, s);
        }

        return s;
    }
    function $1169(l, e, s = []) { s.push($statement(l, e, s)); e.sp++; return s; }
    function $1170(l, e, s = []) {

        e.p = -1;


        if (_68.includes(l.tx)) {

            _s(s, l, e, e.eh, _0);

            e.ASI = true;

            return $1242(l, e, s);
        }

        return s;
    }
    function $1171(l, e, s = []) { s.push($statement(l, e, s)); e.sp++; return s; }
    function $1172(l, e, s = []) { s.push($statement(l, e, s)); e.sp++; return s; }
    function $1173(l, e, s = []) { s.push($statement(l, e, s)); e.sp++; return s; }
    function $1174(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 6;

            var sym = s.slice(-6);

            s.splice(
                -6,
                6,
                {

                    type: "ForStatement",

                    nodes: [null, null, null, sym[5]],

                    LEX: false,

                    pos
                }
            );

            return (e.p = 36, s);
        }

        return s;
    }
    function $1175(l, e, s = []) {

        e.p = -1;


        if (_52.includes(l.tx)) { return $1251(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1176(l, e, s = []) {

        e.p = -1;


        if (_74.includes(l.tx) || _41.includes(l.ty)) {

            e.sp -= 6;

            var sym = s.slice(-6);

            s.splice(
                -6,
                6,
                {

                    type: "Method",

                    ASYNC: !!sym[0],

                    GENERATOR: !!null,

                    nodes: [sym[1], null, null],

                    pos
                }
            );

            return (e.p = 87, s);
        }

        return s;
    }
    function $1177(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 6;

            var sym = s.slice(-6);

            s.splice(
                -6,
                6,
                {

                    type: "ForStatement",

                    nodes: [sym[2], null, null, sym[5]],

                    LEX: true,

                    pos
                }
            );

            return (e.p = 36, s);
        }

        return s;
    }
    function $1178(l, e, s = []) {

        e.p = -1;


        if (_52.includes(l.tx)) { return $1252(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1179(l, e, s = []) {

        e.p = -1;


        if (_74.includes(l.tx) || _41.includes(l.ty)) {

            e.sp -= 6;

            var sym = s.slice(-6);

            s.splice(-6, 6, { type: "GetterMethod", nodes: [sym[1]], pos });

            return (e.p = 87, s);
        }

        return s;
    }
    function $1180(l, e, s = []) {

        e.p = -1;


        if (_52.includes(l.tx)) { return $1260(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1181(l, e, s = []) {

        e.p = -1;


        if (_74.includes(l.tx) || _41.includes(l.ty)) {

            e.sp -= 6;

            var sym = s.slice(-6);

            s.splice(
                -6,
                6,
                {

                    type: "Method",

                    ASYNC: !!null,

                    GENERATOR: !!sym[0],

                    nodes: [sym[1], null, null],

                    pos
                }
            );

            return (e.p = 87, s);
        }

        return s;
    }
    function $1182(l, e, s = []) {

        e.p = -1;


        if (_52.includes(l.tx)) { return $1261(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1183(l, e, s = []) {

        e.p = -1;


        if (_74.includes(l.tx) || _41.includes(l.ty)) {

            e.sp -= 6;

            var sym = s.slice(-6);

            s.splice(
                -6,
                6,
                {

                    type: "Method",

                    ASYNC: !!null,

                    GENERATOR: !!null,

                    nodes: [sym[0], sym[2], null],

                    pos
                }
            );

            return (e.p = 87, s);
        }

        return s;
    }
    function $1184(l, e, s = []) {

        e.p = -1;


        if (_74.includes(l.tx) || _41.includes(l.ty)) {

            e.sp -= 6;

            var sym = s.slice(-6);

            s.splice(
                -6,
                6,
                {

                    type: "Method",

                    ASYNC: !!null,

                    GENERATOR: !!null,

                    nodes: [sym[0], null, sym[4]],

                    pos
                }
            );

            return (e.p = 87, s);
        }

        return s;
    }
    function $1185(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "!": s.push($unary_expression(l, e)); break;

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($parenthesized(cp, e));

                if (e.p !== 131) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push(
                    $cover_parenthesized_expression_and_arrow_parameter_list(l, e)
                );

                break;


            case "++": s.push($update_expression(l, e)); break;

            case "+": s.push($unary_expression(l, e)); break;

            case "--": s.push($update_expression(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($unary_expression(cp, e));

                if (e.p !== 126) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case ";": s = $167(l, e, _s(s, l, e, e.eh, _0)); break;

            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($arrow_function(cp, e));

                if (e.p !== 78) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "await": s.push($await_expression(l, e)); break;

            case "break": s.push($break_statement(l, e)); break;

            case "class":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($class_expression(cp, e));

                if (e.p !== 83) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($class_declaration(l, e));

                break;


            case "const": s = $188(l, e, _s(s, l, e, e.eh, _0)); break;

            case "continue": s.push($continue_statement(l, e)); break;

            case "debugger": s.push($debugger_statement(l, e)); break;

            case "delete": s.push($unary_expression(l, e)); break;

            case "do": s.push($iteration_statement(l, e)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "for": s.push($iteration_statement(l, e)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "if": s.push($if_statement(l, e)); break;

            case "import":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($import_meta(cp, e));

                if (e.p !== 95) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($import_call(l, e));

                break;


            case "let": s = $187(l, e, _s(s, l, e, e.eh, _0)); break;

            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($new_expression(cp, e));

                if (e.p !== 91) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($new_target(l, e));

                break;


            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "return": s.push($return_statement(l, e)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($super_property(cp, e));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($super_call(l, e));

                break;


            case "switch": s.push($switch_statement(l, e)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "throw": s.push($throw_statement(l, e)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "try": s.push($try_statement(l, e)); break;

            case "typeof": s.push($unary_expression(l, e)); break;

            case "var": s.push($variable_statement(l, e)); break;

            case "void": s.push($unary_expression(l, e)); break;

            case "while": s.push($iteration_statement(l, e)); break;

            case "with": s.push($with_statement(l, e)); break;

            case "yield": s.push($yield_expression(l, e)); break;

            case "{":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($block(cp, e));

                if (e.p !== 29) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($object_literal(l, e));

                break;


            case "}": s = $1269(l, e, _s(s, l, e, e.eh, _0)); break;

            case "~": s.push($unary_expression(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180:

                    s = $120(l, e, s);

                    if (e.p < 0) s = $121(l, e, s);

                    break;


                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 177: s = $165(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $44(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 82: s = $182(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 75: s = $1067(l, e, s); break;

                case 74: s = $1268(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                case 66: s = $185(l, e, s); break;

                case 62: s = $186(l, e, s); break;

                case 61: s = $184(l, e, s); break;

                case 57: s = $30(l, e, s); break;

                case 56: s = $40(l, e, s); break;

                case 52: s = $39(l, e, s); break;

                case 50: s = $29(l, e, s); break;

                case 44: s = $170(l, e, s); break;

                case 43: s = $37(l, e, s); break;

                case 42: s = $38(l, e, s); break;

                case 41: s = $36(l, e, s); break;

                case 40: s = $35(l, e, s); break;

                case 39: s = $34(l, e, s); break;

                case 36: s = $169(l, e, s); break;

                case 33: s = $32(l, e, s); break;

                case 31: s = $28(l, e, s); break;

                case 30: s = $31(l, e, s); break;

                case 29: s = $41(l, e, s); break;

                case 28: s = $27(l, e, s); break;

                case 27: s = $33(l, e, s); break;

                case 26: s = $183(l, e, s); break;

                case 25: s = $26(l, e, s); break;

                case 24: s = $25(l, e, s); break;

                case 23: s = $228(l, e, s); break;

                case 22:

                    s = $969(l, e, s);

                    if (e.p < 0) s = $229(l, e, s);

                    break;


                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![67].includes(a)) fail(l, e);

        return s;
    }
    function $1186(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "!": s.push($unary_expression(l, e)); break;

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($parenthesized(cp, e));

                if (e.p !== 131) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push(
                    $cover_parenthesized_expression_and_arrow_parameter_list(l, e)
                );

                break;


            case "++": s.push($update_expression(l, e)); break;

            case "+": s.push($unary_expression(l, e)); break;

            case "--": s.push($update_expression(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($unary_expression(cp, e));

                if (e.p !== 126) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case ";": s = $167(l, e, _s(s, l, e, e.eh, _0)); break;

            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($arrow_function(cp, e));

                if (e.p !== 78) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "await": s.push($await_expression(l, e)); break;

            case "break": s.push($break_statement(l, e)); break;

            case "class":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($class_expression(cp, e));

                if (e.p !== 83) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($class_declaration(l, e));

                break;


            case "const": s = $188(l, e, _s(s, l, e, e.eh, _0)); break;

            case "continue": s.push($continue_statement(l, e)); break;

            case "debugger": s.push($debugger_statement(l, e)); break;

            case "delete": s.push($unary_expression(l, e)); break;

            case "do": s.push($iteration_statement(l, e)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "for": s.push($iteration_statement(l, e)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "if": s.push($if_statement(l, e)); break;

            case "import":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($import_meta(cp, e));

                if (e.p !== 95) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($import_call(l, e));

                break;


            case "let": s = $187(l, e, _s(s, l, e, e.eh, _0)); break;

            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($new_expression(cp, e));

                if (e.p !== 91) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($new_target(l, e));

                break;


            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "return": s.push($return_statement(l, e)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($super_property(cp, e));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($super_call(l, e));

                break;


            case "switch": s.push($switch_statement(l, e)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "throw": s.push($throw_statement(l, e)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "try": s.push($try_statement(l, e)); break;

            case "typeof": s.push($unary_expression(l, e)); break;

            case "var": s.push($variable_statement(l, e)); break;

            case "void": s.push($unary_expression(l, e)); break;

            case "while": s.push($iteration_statement(l, e)); break;

            case "with": s.push($with_statement(l, e)); break;

            case "yield": s.push($yield_expression(l, e)); break;

            case "{":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($block(cp, e));

                if (e.p !== 29) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($object_literal(l, e));

                break;


            case "}": s = $1277(l, e, _s(s, l, e, e.eh, _0)); break;

            case "~": s.push($unary_expression(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180:

                    s = $120(l, e, s);

                    if (e.p < 0) s = $121(l, e, s);

                    break;


                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 177: s = $165(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $44(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 82: s = $182(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 75: s = $1067(l, e, s); break;

                case 74: s = $1276(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                case 66: s = $185(l, e, s); break;

                case 62: s = $186(l, e, s); break;

                case 61: s = $184(l, e, s); break;

                case 57: s = $30(l, e, s); break;

                case 56: s = $40(l, e, s); break;

                case 52: s = $39(l, e, s); break;

                case 50: s = $29(l, e, s); break;

                case 44: s = $170(l, e, s); break;

                case 43: s = $37(l, e, s); break;

                case 42: s = $38(l, e, s); break;

                case 41: s = $36(l, e, s); break;

                case 40: s = $35(l, e, s); break;

                case 39: s = $34(l, e, s); break;

                case 36: s = $169(l, e, s); break;

                case 33: s = $32(l, e, s); break;

                case 31: s = $28(l, e, s); break;

                case 30: s = $31(l, e, s); break;

                case 29: s = $41(l, e, s); break;

                case 28: s = $27(l, e, s); break;

                case 27: s = $33(l, e, s); break;

                case 26: s = $183(l, e, s); break;

                case 25: s = $26(l, e, s); break;

                case 24: s = $25(l, e, s); break;

                case 23: s = $228(l, e, s); break;

                case 22:

                    s = $969(l, e, s);

                    if (e.p < 0) s = $229(l, e, s);

                    break;


                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![67].includes(a)) fail(l, e);

        return s;
    }
    function $1187(l, e, s = []) {

        e.p = -1;


        if (_35.includes(l.tx)) { return $1262(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1188(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "!": s.push($unary_expression(l, e)); break;

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($parenthesized(cp, e));

                if (e.p !== 131) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push(
                    $cover_parenthesized_expression_and_arrow_parameter_list(l, e)
                );

                break;


            case "++": s.push($update_expression(l, e)); break;

            case "+": s.push($unary_expression(l, e)); break;

            case "--": s.push($update_expression(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($unary_expression(cp, e));

                if (e.p !== 126) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case ";": s = $167(l, e, _s(s, l, e, e.eh, _0)); break;

            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($arrow_function(cp, e));

                if (e.p !== 78) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "await": s.push($await_expression(l, e)); break;

            case "break": s.push($break_statement(l, e)); break;

            case "class":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($class_expression(cp, e));

                if (e.p !== 83) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($class_declaration(l, e));

                break;


            case "const": s = $188(l, e, _s(s, l, e, e.eh, _0)); break;

            case "continue": s.push($continue_statement(l, e)); break;

            case "debugger": s.push($debugger_statement(l, e)); break;

            case "delete": s.push($unary_expression(l, e)); break;

            case "do": s.push($iteration_statement(l, e)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "for": s.push($iteration_statement(l, e)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "if": s.push($if_statement(l, e)); break;

            case "import":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($import_meta(cp, e));

                if (e.p !== 95) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($import_call(l, e));

                break;


            case "let": s = $187(l, e, _s(s, l, e, e.eh, _0)); break;

            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($new_expression(cp, e));

                if (e.p !== 91) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($new_target(l, e));

                break;


            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "return": s.push($return_statement(l, e)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($super_property(cp, e));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($super_call(l, e));

                break;


            case "switch": s.push($switch_statement(l, e)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "throw": s.push($throw_statement(l, e)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "try": s.push($try_statement(l, e)); break;

            case "typeof": s.push($unary_expression(l, e)); break;

            case "var": s.push($variable_statement(l, e)); break;

            case "void": s.push($unary_expression(l, e)); break;

            case "while": s.push($iteration_statement(l, e)); break;

            case "with": s.push($with_statement(l, e)); break;

            case "yield": s.push($yield_expression(l, e)); break;

            case "{":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($block(cp, e));

                if (e.p !== 29) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($object_literal(l, e));

                break;


            case "}": s = $1273(l, e, _s(s, l, e, e.eh, _0)); break;

            case "~": s.push($unary_expression(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180:

                    s = $120(l, e, s);

                    if (e.p < 0) s = $121(l, e, s);

                    break;


                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 177: s = $165(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $44(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 82: s = $182(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 75: s = $1067(l, e, s); break;

                case 74: s = $1272(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                case 66: s = $185(l, e, s); break;

                case 62: s = $186(l, e, s); break;

                case 61: s = $184(l, e, s); break;

                case 57: s = $30(l, e, s); break;

                case 56: s = $40(l, e, s); break;

                case 52: s = $39(l, e, s); break;

                case 50: s = $29(l, e, s); break;

                case 44: s = $170(l, e, s); break;

                case 43: s = $37(l, e, s); break;

                case 42: s = $38(l, e, s); break;

                case 41: s = $36(l, e, s); break;

                case 40: s = $35(l, e, s); break;

                case 39: s = $34(l, e, s); break;

                case 36: s = $169(l, e, s); break;

                case 33: s = $32(l, e, s); break;

                case 31: s = $28(l, e, s); break;

                case 30: s = $31(l, e, s); break;

                case 29: s = $41(l, e, s); break;

                case 28: s = $27(l, e, s); break;

                case 27: s = $33(l, e, s); break;

                case 26: s = $183(l, e, s); break;

                case 25: s = $26(l, e, s); break;

                case 24: s = $25(l, e, s); break;

                case 23: s = $228(l, e, s); break;

                case 22:

                    s = $969(l, e, s);

                    if (e.p < 0) s = $229(l, e, s);

                    break;


                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![67].includes(a)) fail(l, e);

        return s;
    }
    function $1189(l, e, s = []) {

        e.p = -1;


        if (_35.includes(l.tx)) { return $1263(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1190(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "!": s.push($unary_expression(l, e)); break;

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($parenthesized(cp, e));

                if (e.p !== 131) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push(
                    $cover_parenthesized_expression_and_arrow_parameter_list(l, e)
                );

                break;


            case "++": s.push($update_expression(l, e)); break;

            case "+": s.push($unary_expression(l, e)); break;

            case "--": s.push($update_expression(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($unary_expression(cp, e));

                if (e.p !== 126) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case ";": s = $167(l, e, _s(s, l, e, e.eh, _0)); break;

            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($arrow_function(cp, e));

                if (e.p !== 78) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "await": s.push($await_expression(l, e)); break;

            case "break": s.push($break_statement(l, e)); break;

            case "class":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($class_expression(cp, e));

                if (e.p !== 83) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($class_declaration(l, e));

                break;


            case "const": s = $188(l, e, _s(s, l, e, e.eh, _0)); break;

            case "continue": s.push($continue_statement(l, e)); break;

            case "debugger": s.push($debugger_statement(l, e)); break;

            case "delete": s.push($unary_expression(l, e)); break;

            case "do": s.push($iteration_statement(l, e)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "for": s.push($iteration_statement(l, e)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "if": s.push($if_statement(l, e)); break;

            case "import":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($import_meta(cp, e));

                if (e.p !== 95) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($import_call(l, e));

                break;


            case "let": s = $187(l, e, _s(s, l, e, e.eh, _0)); break;

            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($new_expression(cp, e));

                if (e.p !== 91) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($new_target(l, e));

                break;


            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "return": s.push($return_statement(l, e)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($super_property(cp, e));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($super_call(l, e));

                break;


            case "switch": s.push($switch_statement(l, e)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "throw": s.push($throw_statement(l, e)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "try": s.push($try_statement(l, e)); break;

            case "typeof": s.push($unary_expression(l, e)); break;

            case "var": s.push($variable_statement(l, e)); break;

            case "void": s.push($unary_expression(l, e)); break;

            case "while": s.push($iteration_statement(l, e)); break;

            case "with": s.push($with_statement(l, e)); break;

            case "yield": s.push($yield_expression(l, e)); break;

            case "{":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($block(cp, e));

                if (e.p !== 29) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($object_literal(l, e));

                break;


            case "}": s = $1281(l, e, _s(s, l, e, e.eh, _0)); break;

            case "~": s.push($unary_expression(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180:

                    s = $120(l, e, s);

                    if (e.p < 0) s = $121(l, e, s);

                    break;


                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 177: s = $165(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $44(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 82: s = $182(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 75: s = $1067(l, e, s); break;

                case 74: s = $1280(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                case 66: s = $185(l, e, s); break;

                case 62: s = $186(l, e, s); break;

                case 61: s = $184(l, e, s); break;

                case 57: s = $30(l, e, s); break;

                case 56: s = $40(l, e, s); break;

                case 52: s = $39(l, e, s); break;

                case 50: s = $29(l, e, s); break;

                case 44: s = $170(l, e, s); break;

                case 43: s = $37(l, e, s); break;

                case 42: s = $38(l, e, s); break;

                case 41: s = $36(l, e, s); break;

                case 40: s = $35(l, e, s); break;

                case 39: s = $34(l, e, s); break;

                case 36: s = $169(l, e, s); break;

                case 33: s = $32(l, e, s); break;

                case 31: s = $28(l, e, s); break;

                case 30: s = $31(l, e, s); break;

                case 29: s = $41(l, e, s); break;

                case 28: s = $27(l, e, s); break;

                case 27: s = $33(l, e, s); break;

                case 26: s = $183(l, e, s); break;

                case 25: s = $26(l, e, s); break;

                case 24: s = $25(l, e, s); break;

                case 23: s = $228(l, e, s); break;

                case 22:

                    s = $969(l, e, s);

                    if (e.p < 0) s = $229(l, e, s);

                    break;


                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![66].includes(a)) fail(l, e);

        return s;
    }
    function $1191(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "!": s.push($unary_expression(l, e)); break;

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($parenthesized(cp, e));

                if (e.p !== 131) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push(
                    $cover_parenthesized_expression_and_arrow_parameter_list(l, e)
                );

                break;


            case "++": s.push($update_expression(l, e)); break;

            case "+": s.push($unary_expression(l, e)); break;

            case "--": s.push($update_expression(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($unary_expression(cp, e));

                if (e.p !== 126) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case ";": s = $167(l, e, _s(s, l, e, e.eh, _0)); break;

            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($arrow_function(cp, e));

                if (e.p !== 78) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "await": s.push($await_expression(l, e)); break;

            case "break": s.push($break_statement(l, e)); break;

            case "class":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($class_expression(cp, e));

                if (e.p !== 83) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($class_declaration(l, e));

                break;


            case "const": s = $188(l, e, _s(s, l, e, e.eh, _0)); break;

            case "continue": s.push($continue_statement(l, e)); break;

            case "debugger": s.push($debugger_statement(l, e)); break;

            case "delete": s.push($unary_expression(l, e)); break;

            case "do": s.push($iteration_statement(l, e)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "for": s.push($iteration_statement(l, e)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "if": s.push($if_statement(l, e)); break;

            case "import":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($import_meta(cp, e));

                if (e.p !== 95) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($import_call(l, e));

                break;


            case "let": s = $187(l, e, _s(s, l, e, e.eh, _0)); break;

            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($new_expression(cp, e));

                if (e.p !== 91) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($new_target(l, e));

                break;


            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "return": s.push($return_statement(l, e)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($super_property(cp, e));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($super_call(l, e));

                break;


            case "switch": s.push($switch_statement(l, e)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "throw": s.push($throw_statement(l, e)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "try": s.push($try_statement(l, e)); break;

            case "typeof": s.push($unary_expression(l, e)); break;

            case "var": s.push($variable_statement(l, e)); break;

            case "void": s.push($unary_expression(l, e)); break;

            case "while": s.push($iteration_statement(l, e)); break;

            case "with": s.push($with_statement(l, e)); break;

            case "yield": s.push($yield_expression(l, e)); break;

            case "{":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($block(cp, e));

                if (e.p !== 29) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($object_literal(l, e));

                break;


            case "}": s = $1285(l, e, _s(s, l, e, e.eh, _0)); break;

            case "~": s.push($unary_expression(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180:

                    s = $120(l, e, s);

                    if (e.p < 0) s = $121(l, e, s);

                    break;


                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 177: s = $165(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $44(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 82: s = $182(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 75: s = $1067(l, e, s); break;

                case 74: s = $1284(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                case 66: s = $185(l, e, s); break;

                case 62: s = $186(l, e, s); break;

                case 61: s = $184(l, e, s); break;

                case 57: s = $30(l, e, s); break;

                case 56: s = $40(l, e, s); break;

                case 52: s = $39(l, e, s); break;

                case 50: s = $29(l, e, s); break;

                case 44: s = $170(l, e, s); break;

                case 43: s = $37(l, e, s); break;

                case 42: s = $38(l, e, s); break;

                case 41: s = $36(l, e, s); break;

                case 40: s = $35(l, e, s); break;

                case 39: s = $34(l, e, s); break;

                case 36: s = $169(l, e, s); break;

                case 33: s = $32(l, e, s); break;

                case 31: s = $28(l, e, s); break;

                case 30: s = $31(l, e, s); break;

                case 29: s = $41(l, e, s); break;

                case 28: s = $27(l, e, s); break;

                case 27: s = $33(l, e, s); break;

                case 26: s = $183(l, e, s); break;

                case 25: s = $26(l, e, s); break;

                case 24: s = $25(l, e, s); break;

                case 23: s = $228(l, e, s); break;

                case 22:

                    s = $969(l, e, s);

                    if (e.p < 0) s = $229(l, e, s);

                    break;


                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![66].includes(a)) fail(l, e);

        return s;
    }
    function $1192(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "!": s.push($unary_expression(l, e)); break;

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($parenthesized(cp, e));

                if (e.p !== 131) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push(
                    $cover_parenthesized_expression_and_arrow_parameter_list(l, e)
                );

                break;


            case "++": s.push($update_expression(l, e)); break;

            case "+": s.push($unary_expression(l, e)); break;

            case "--": s.push($update_expression(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($unary_expression(cp, e));

                if (e.p !== 126) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case ";": s = $167(l, e, _s(s, l, e, e.eh, _0)); break;

            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($arrow_function(cp, e));

                if (e.p !== 78) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "await": s.push($await_expression(l, e)); break;

            case "break": s.push($break_statement(l, e)); break;

            case "class":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($class_expression(cp, e));

                if (e.p !== 83) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($class_declaration(l, e));

                break;


            case "const": s = $188(l, e, _s(s, l, e, e.eh, _0)); break;

            case "continue": s.push($continue_statement(l, e)); break;

            case "debugger": s.push($debugger_statement(l, e)); break;

            case "delete": s.push($unary_expression(l, e)); break;

            case "do": s.push($iteration_statement(l, e)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "for": s.push($iteration_statement(l, e)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "if": s.push($if_statement(l, e)); break;

            case "import":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($import_meta(cp, e));

                if (e.p !== 95) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($import_call(l, e));

                break;


            case "let": s = $187(l, e, _s(s, l, e, e.eh, _0)); break;

            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($new_expression(cp, e));

                if (e.p !== 91) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($new_target(l, e));

                break;


            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "return": s.push($return_statement(l, e)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($super_property(cp, e));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($super_call(l, e));

                break;


            case "switch": s.push($switch_statement(l, e)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "throw": s.push($throw_statement(l, e)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "try": s.push($try_statement(l, e)); break;

            case "typeof": s.push($unary_expression(l, e)); break;

            case "var": s.push($variable_statement(l, e)); break;

            case "void": s.push($unary_expression(l, e)); break;

            case "while": s.push($iteration_statement(l, e)); break;

            case "with": s.push($with_statement(l, e)); break;

            case "yield": s.push($yield_expression(l, e)); break;

            case "{":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($block(cp, e));

                if (e.p !== 29) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($object_literal(l, e));

                break;


            case "}": s = $1275(l, e, _s(s, l, e, e.eh, _0)); break;

            case "~": s.push($unary_expression(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180:

                    s = $120(l, e, s);

                    if (e.p < 0) s = $121(l, e, s);

                    break;


                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 177: s = $165(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $44(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 82: s = $182(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 75: s = $1067(l, e, s); break;

                case 74: s = $1274(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                case 66: s = $185(l, e, s); break;

                case 62: s = $186(l, e, s); break;

                case 61: s = $184(l, e, s); break;

                case 57: s = $30(l, e, s); break;

                case 56: s = $40(l, e, s); break;

                case 52: s = $39(l, e, s); break;

                case 50: s = $29(l, e, s); break;

                case 44: s = $170(l, e, s); break;

                case 43: s = $37(l, e, s); break;

                case 42: s = $38(l, e, s); break;

                case 41: s = $36(l, e, s); break;

                case 40: s = $35(l, e, s); break;

                case 39: s = $34(l, e, s); break;

                case 36: s = $169(l, e, s); break;

                case 33: s = $32(l, e, s); break;

                case 31: s = $28(l, e, s); break;

                case 30: s = $31(l, e, s); break;

                case 29: s = $41(l, e, s); break;

                case 28: s = $27(l, e, s); break;

                case 27: s = $33(l, e, s); break;

                case 26: s = $183(l, e, s); break;

                case 25: s = $26(l, e, s); break;

                case 24: s = $25(l, e, s); break;

                case 23: s = $228(l, e, s); break;

                case 22:

                    s = $969(l, e, s);

                    if (e.p < 0) s = $229(l, e, s);

                    break;


                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![67].includes(a)) fail(l, e);

        return s;
    }
    function $1193(l, e, s = []) {

        e.p = -1;


        if (_52.includes(l.tx)) { return $1264(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1194(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 7;

            var sym = s.slice(-7);

            s.splice(
                -7,
                7,
                {

                    type: "FunctionExpression",

                    ASYNC: !!sym[0],

                    GENERATOR: !!sym[2],

                    nodes: [null, null, null],

                    pos
                }
            );

            return (e.p = 67, s);
        }

        return s;
    }
    function $1195(l, e, s = []) {

        e.p = -1;


        if (_52.includes(l.tx)) { return $1265(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1196(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 7;

            var sym = s.slice(-7);

            s.splice(
                -7,
                7,
                {

                    type: "FunctionExpression",

                    ASYNC: !!null,

                    GENERATOR: !!null,

                    nodes: [sym[1], sym[3], null],

                    pos
                }
            );

            return (e.p = 67, s);
        }

        return s;
    }
    function $1197(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "!": s.push($unary_expression(l, e)); break;

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($parenthesized(cp, e));

                if (e.p !== 131) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push(
                    $cover_parenthesized_expression_and_arrow_parameter_list(l, e)
                );

                break;


            case "++": s.push($update_expression(l, e)); break;

            case "+": s.push($unary_expression(l, e)); break;

            case "--": s.push($update_expression(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($unary_expression(cp, e));

                if (e.p !== 126) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case ";": s = $167(l, e, _s(s, l, e, e.eh, _0)); break;

            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($arrow_function(cp, e));

                if (e.p !== 78) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "await": s.push($await_expression(l, e)); break;

            case "break": s.push($break_statement(l, e)); break;

            case "class":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($class_expression(cp, e));

                if (e.p !== 83) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($class_declaration(l, e));

                break;


            case "const": s = $188(l, e, _s(s, l, e, e.eh, _0)); break;

            case "continue": s.push($continue_statement(l, e)); break;

            case "debugger": s.push($debugger_statement(l, e)); break;

            case "delete": s.push($unary_expression(l, e)); break;

            case "do": s.push($iteration_statement(l, e)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "for": s.push($iteration_statement(l, e)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "if": s.push($if_statement(l, e)); break;

            case "import":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($import_meta(cp, e));

                if (e.p !== 95) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($import_call(l, e));

                break;


            case "let": s = $187(l, e, _s(s, l, e, e.eh, _0)); break;

            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($new_expression(cp, e));

                if (e.p !== 91) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($new_target(l, e));

                break;


            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "return": s.push($return_statement(l, e)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($super_property(cp, e));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($super_call(l, e));

                break;


            case "switch": s.push($switch_statement(l, e)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "throw": s.push($throw_statement(l, e)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "try": s.push($try_statement(l, e)); break;

            case "typeof": s.push($unary_expression(l, e)); break;

            case "var": s.push($variable_statement(l, e)); break;

            case "void": s.push($unary_expression(l, e)); break;

            case "while": s.push($iteration_statement(l, e)); break;

            case "with": s.push($with_statement(l, e)); break;

            case "yield": s.push($yield_expression(l, e)); break;

            case "{":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($block(cp, e));

                if (e.p !== 29) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($object_literal(l, e));

                break;


            case "}": s = $1283(l, e, _s(s, l, e, e.eh, _0)); break;

            case "~": s.push($unary_expression(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180:

                    s = $120(l, e, s);

                    if (e.p < 0) s = $121(l, e, s);

                    break;


                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 177: s = $165(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $44(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 82: s = $182(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 75: s = $1067(l, e, s); break;

                case 74: s = $1282(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                case 66: s = $185(l, e, s); break;

                case 62: s = $186(l, e, s); break;

                case 61: s = $184(l, e, s); break;

                case 57: s = $30(l, e, s); break;

                case 56: s = $40(l, e, s); break;

                case 52: s = $39(l, e, s); break;

                case 50: s = $29(l, e, s); break;

                case 44: s = $170(l, e, s); break;

                case 43: s = $37(l, e, s); break;

                case 42: s = $38(l, e, s); break;

                case 41: s = $36(l, e, s); break;

                case 40: s = $35(l, e, s); break;

                case 39: s = $34(l, e, s); break;

                case 36: s = $169(l, e, s); break;

                case 33: s = $32(l, e, s); break;

                case 31: s = $28(l, e, s); break;

                case 30: s = $31(l, e, s); break;

                case 29: s = $41(l, e, s); break;

                case 28: s = $27(l, e, s); break;

                case 27: s = $33(l, e, s); break;

                case 26: s = $183(l, e, s); break;

                case 25: s = $26(l, e, s); break;

                case 24: s = $25(l, e, s); break;

                case 23: s = $228(l, e, s); break;

                case 22:

                    s = $969(l, e, s);

                    if (e.p < 0) s = $229(l, e, s);

                    break;


                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![66].includes(a)) fail(l, e);

        return s;
    }
    function $1198(l, e, s = []) {

        e.p = -1;


        if (_52.includes(l.tx)) { return $1266(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1199(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 7;

            var sym = s.slice(-7);

            s.splice(
                -7,
                7,
                {

                    type: "FunctionExpression",

                    ASYNC: !!sym[0],

                    GENERATOR: !!null,

                    nodes: [null, sym[3], null],

                    pos
                }
            );

            return (e.p = 67, s);
        }

        return s;
    }
    function $1200(l, e, s = []) {

        e.p = -1;


        if (_52.includes(l.tx)) { return $1267(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1201(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 7;

            var sym = s.slice(-7);

            s.splice(
                -7,
                7,
                {

                    type: "FunctionExpression",

                    ASYNC: !!sym[0],

                    GENERATOR: !!null,

                    nodes: [sym[2], null, null],

                    pos
                }
            );

            return (e.p = 67, s);
        }

        return s;
    }
    function $1202(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 7;

            var sym = s.slice(-7);

            s.splice(
                -7,
                7,
                {

                    type: "FunctionExpression",

                    ASYNC: !!sym[0],

                    GENERATOR: !!null,

                    nodes: [null, null, sym[5]],

                    pos
                }
            );

            return (e.p = 67, s);
        }

        return s;
    }
    function $1203(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "!": s.push($unary_expression(l, e)); break;

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($parenthesized(cp, e));

                if (e.p !== 131) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push(
                    $cover_parenthesized_expression_and_arrow_parameter_list(l, e)
                );

                break;


            case "++": s.push($update_expression(l, e)); break;

            case "+": s.push($unary_expression(l, e)); break;

            case "--": s.push($update_expression(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($unary_expression(cp, e));

                if (e.p !== 126) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case ";": s = $167(l, e, _s(s, l, e, e.eh, _0)); break;

            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($arrow_function(cp, e));

                if (e.p !== 78) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "await": s.push($await_expression(l, e)); break;

            case "break": s.push($break_statement(l, e)); break;

            case "class":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($class_expression(cp, e));

                if (e.p !== 83) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($class_declaration(l, e));

                break;


            case "const": s = $188(l, e, _s(s, l, e, e.eh, _0)); break;

            case "continue": s.push($continue_statement(l, e)); break;

            case "debugger": s.push($debugger_statement(l, e)); break;

            case "delete": s.push($unary_expression(l, e)); break;

            case "do": s.push($iteration_statement(l, e)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "for": s.push($iteration_statement(l, e)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "if": s.push($if_statement(l, e)); break;

            case "import":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($import_meta(cp, e));

                if (e.p !== 95) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($import_call(l, e));

                break;


            case "let": s = $187(l, e, _s(s, l, e, e.eh, _0)); break;

            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($new_expression(cp, e));

                if (e.p !== 91) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($new_target(l, e));

                break;


            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "return": s.push($return_statement(l, e)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($super_property(cp, e));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($super_call(l, e));

                break;


            case "switch": s.push($switch_statement(l, e)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "throw": s.push($throw_statement(l, e)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "try": s.push($try_statement(l, e)); break;

            case "typeof": s.push($unary_expression(l, e)); break;

            case "var": s.push($variable_statement(l, e)); break;

            case "void": s.push($unary_expression(l, e)); break;

            case "while": s.push($iteration_statement(l, e)); break;

            case "with": s.push($with_statement(l, e)); break;

            case "yield": s.push($yield_expression(l, e)); break;

            case "{":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($block(cp, e));

                if (e.p !== 29) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($object_literal(l, e));

                break;


            case "}": s = $1287(l, e, _s(s, l, e, e.eh, _0)); break;

            case "~": s.push($unary_expression(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180:

                    s = $120(l, e, s);

                    if (e.p < 0) s = $121(l, e, s);

                    break;


                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 177: s = $165(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $44(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 82: s = $182(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 75: s = $1067(l, e, s); break;

                case 74: s = $1286(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                case 66: s = $185(l, e, s); break;

                case 62: s = $186(l, e, s); break;

                case 61: s = $184(l, e, s); break;

                case 57: s = $30(l, e, s); break;

                case 56: s = $40(l, e, s); break;

                case 52: s = $39(l, e, s); break;

                case 50: s = $29(l, e, s); break;

                case 44: s = $170(l, e, s); break;

                case 43: s = $37(l, e, s); break;

                case 42: s = $38(l, e, s); break;

                case 41: s = $36(l, e, s); break;

                case 40: s = $35(l, e, s); break;

                case 39: s = $34(l, e, s); break;

                case 36: s = $169(l, e, s); break;

                case 33: s = $32(l, e, s); break;

                case 31: s = $28(l, e, s); break;

                case 30: s = $31(l, e, s); break;

                case 29: s = $41(l, e, s); break;

                case 28: s = $27(l, e, s); break;

                case 27: s = $33(l, e, s); break;

                case 26: s = $183(l, e, s); break;

                case 25: s = $26(l, e, s); break;

                case 24: s = $25(l, e, s); break;

                case 23: s = $228(l, e, s); break;

                case 22:

                    s = $969(l, e, s);

                    if (e.p < 0) s = $229(l, e, s);

                    break;


                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![66].includes(a)) fail(l, e);

        return s;
    }
    function $1204(l, e, s = []) {

        e.p = -1;


        if (_52.includes(l.tx)) { return $1270(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1205(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 7;

            var sym = s.slice(-7);

            s.splice(
                -7,
                7,
                {

                    type: "FunctionExpression",

                    ASYNC: !!null,

                    GENERATOR: !!sym[1],

                    nodes: [null, sym[3], null],

                    pos
                }
            );

            return (e.p = 67, s);
        }

        return s;
    }
    function $1206(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 7;

            var sym = s.slice(-7);

            s.splice(
                -7,
                7,
                {

                    type: "FunctionExpression",

                    ASYNC: !!null,

                    GENERATOR: !!null,

                    nodes: [sym[1], null, sym[5]],

                    pos
                }
            );

            return (e.p = 67, s);
        }

        return s;
    }
    function $1207(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 7;

            var sym = s.slice(-7);

            s.splice(
                -7,
                7,
                {

                    type: "FunctionExpression",

                    ASYNC: !!null,

                    GENERATOR: !!null,

                    nodes: [null, sym[2], sym[5]],

                    pos
                }
            );

            return (e.p = 67, s);
        }

        return s;
    }
    function $1208(l, e, s = []) {

        e.p = -1;


        if (_52.includes(l.tx)) { return $1271(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1209(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 7;

            var sym = s.slice(-7);

            s.splice(
                -7,
                7,
                {

                    type: "FunctionExpression",

                    ASYNC: !!null,

                    GENERATOR: !!sym[1],

                    nodes: [sym[2], null, null],

                    pos
                }
            );

            return (e.p = 67, s);
        }

        return s;
    }
    function $1210(l, e, s = []) {

        e.p = -1;


        if (_52.includes(l.tx)) { return $1278(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1211(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 7;

            var sym = s.slice(-7);

            s.splice(
                -7,
                7,
                {

                    type: "FunctionDeclaration",

                    ASYNC: !!sym[0],

                    GENERATOR: !!null,

                    nodes: [null, sym[3], null],

                    pos
                }
            );

            return (e.p = 66, s);
        }

        return s;
    }
    function $1212(l, e, s = []) {

        e.p = -1;


        if (_52.includes(l.tx)) { return $1279(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1213(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 7;

            var sym = s.slice(-7);

            s.splice(
                -7,
                7,
                {

                    type: "FunctionDeclaration",

                    ASYNC: !!sym[0],

                    GENERATOR: !!sym[2],

                    nodes: [null, null, null],

                    pos
                }
            );

            return (e.p = 66, s);
        }

        return s;
    }
    function $1214(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 7;

            var sym = s.slice(-7);

            s.splice(
                -7,
                7,
                {

                    type: "FunctionExpression",

                    ASYNC: !!null,

                    GENERATOR: !!sym[1],

                    nodes: [null, null, sym[5]],

                    pos
                }
            );

            return (e.p = 67, s);
        }

        return s;
    }
    function $1215(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 7;

            var sym = s.slice(-7);

            s.splice(
                -7,
                7,
                {

                    type: "FunctionDeclaration",

                    ASYNC: !!null,

                    GENERATOR: !!null,

                    nodes: [sym[1], null, sym[5]],

                    pos
                }
            );

            return (e.p = 66, s);
        }

        return s;
    }
    function $1216(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 7;

            var sym = s.slice(-7);

            s.splice(
                -7,
                7,
                {

                    type: "FunctionDeclaration",

                    ASYNC: !!null,

                    GENERATOR: !!sym[1],

                    nodes: [null, null, sym[5]],

                    pos
                }
            );

            return (e.p = 66, s);
        }

        return s;
    }
    function $1217(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 7;

            var sym = s.slice(-7);

            s.splice(
                -7,
                7,
                {

                    type: "FunctionDeclaration",

                    ASYNC: !!sym[0],

                    GENERATOR: !!null,

                    nodes: [null, null, sym[5]],

                    pos
                }
            );

            return (e.p = 66, s);
        }

        return s;
    }
    function $1218(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 7;

            var sym = s.slice(-7);

            s.splice(
                -7,
                7,
                {

                    type: "FunctionDeclaration",

                    ASYNC: !!null,

                    GENERATOR: !!null,

                    nodes: [null, sym[2], sym[5]],

                    pos
                }
            );

            return (e.p = 66, s);
        }

        return s;
    }
    function $1219(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "case": s.push($case_clause(l, e)); break;

            case "}": s = $1289(l, e, _s(s, l, e, e.eh, _0)); break;
        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 48: s = $202(l, e, s); break;

                case 47:

                    s = $1288(l, e, s);

                    if (e.p < 0) s = $201(l, e, s);

                    break;


                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![45].includes(a)) fail(l, e);

        return s;
    }
    function $1220(l, e, s = []) {

        e.p = -1;


        if (_52.includes(l.tx)) { return $1290(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1221(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 3;

            var sym = s.slice(-3);

            s.splice(-3, 3, { type: "CaseBlock", nodes: [...sym[1]], pos });

            return (e.p = 45, s);
        }

        return s;
    }
    function $1222(l, e, s = []) {

        e.p = -1;


        if (_52.includes(l.tx)) { return $1291(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1223(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 3;

            var sym = s.slice(-3);

            s.splice(-3, 3, { type: "CaseBlock", nodes: [sym[1]], pos });

            return (e.p = 45, s);
        }

        return s;
    }
    function $1225(l, e, s = []) {

        e.p = -1;


        if (l.END || ["!", "$", "'", "(", "+", "++", "-", "--", "/", ";", "[", "\"", "_", "`", "as", "async", "await", "break", "case", "class", "const", "continue", "debugger", "default", "delete", "do", "else", "export", "false", "finally", "for", "from", "function", "get", "if", "import", "let", "new", "null", "return", "set", "super", "switch", "target", "this", "throw", "true", "try", "typeof", "var", "void", "while", "with", "yield", "{", "}", "~"].includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 5;

            var sym = s.slice(-5);

            s.splice(
                -5,
                5,
                { type: "CatchClause", nodes: [sym[2], sym[4]], pos }
            );

            return (e.p = 53, s);
        }

        return s;
    }
    function $1226(l, e, s = []) {

        e.p = -1;


        if (_52.includes(l.tx)) { return $1293(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1227(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 7;

            var sym = s.slice(-7);

            s.splice(
                -7,
                7,
                {

                    type: "FunctionDeclaration",

                    ASYNC: !!sym[0],

                    GENERATOR: !!null,

                    nodes: [sym[2], null, null],

                    pos
                }
            );

            return (e.p = 66, s);
        }

        return s;
    }
    function $1228(l, e, s = []) {

        e.p = -1;


        if (_52.includes(l.tx)) { return $1294(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1229(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 7;

            var sym = s.slice(-7);

            s.splice(
                -7,
                7,
                {

                    type: "FunctionDeclaration",

                    ASYNC: !!null,

                    GENERATOR: !!sym[1],

                    nodes: [sym[2], null, null],

                    pos
                }
            );

            return (e.p = 66, s);
        }

        return s;
    }
    function $1230(l, e, s = []) {

        e.p = -1;


        if (_52.includes(l.tx)) { return $1295(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1231(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 7;

            var sym = s.slice(-7);

            s.splice(
                -7,
                7,
                {

                    type: "FunctionDeclaration",

                    ASYNC: !!null,

                    GENERATOR: !!sym[1],

                    nodes: [null, sym[3], null],

                    pos
                }
            );

            return (e.p = 66, s);
        }

        return s;
    }
    function $1232(l, e, s = []) { s.push($statement(l, e, s)); e.sp++; return s; }
    function $1233(l, e, s = []) {

        e.p = -1;


        if (_52.includes(l.tx)) { return $1296(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1234(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 7;

            var sym = s.slice(-7);

            s.splice(
                -7,
                7,
                {

                    type: "FunctionDeclaration",

                    ASYNC: !!null,

                    GENERATOR: !!null,

                    nodes: [sym[1], sym[3], null],

                    pos
                }
            );

            return (e.p = 66, s);
        }

        return s;
    }
    function $1235(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 7;

            var sym = s.slice(-7);

            s.splice(
                -7,
                7,
                { type: "DoStatement", nodes: [sym[1], sym[4]], pos }
            );

            return (e.p = 36, s);
        }

        return s;
    }
    function $1236(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 2;

            return (e.p = 32, (s.splice(-2, 2, s[s.length - 1]), s));
        }

        return s;
    }
    function $1237(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "!": s.push($unary_expression(l, e)); break;

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($parenthesized(cp, e));

                if (e.p !== 131) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push(
                    $cover_parenthesized_expression_and_arrow_parameter_list(l, e)
                );

                break;


            case "++": s.push($update_expression(l, e)); break;

            case "+": s.push($unary_expression(l, e)); break;

            case "--": s.push($update_expression(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($unary_expression(cp, e));

                if (e.p !== 126) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case ";": s = $167(l, e, _s(s, l, e, e.eh, _0)); break;

            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($arrow_function(cp, e));

                if (e.p !== 78) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "await": s.push($await_expression(l, e)); break;

            case "break": s.push($break_statement(l, e)); break;

            case "class":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($class_expression(cp, e));

                if (e.p !== 83) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($class_declaration(l, e));

                break;


            case "const": s = $188(l, e, _s(s, l, e, e.eh, _0)); break;

            case "continue": s.push($continue_statement(l, e)); break;

            case "debugger": s.push($debugger_statement(l, e)); break;

            case "delete": s.push($unary_expression(l, e)); break;

            case "do": s.push($iteration_statement(l, e)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "for": s.push($iteration_statement(l, e)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "if": s.push($if_statement(l, e)); break;

            case "import":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($import_meta(cp, e));

                if (e.p !== 95) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($import_call(l, e));

                break;


            case "let": s = $187(l, e, _s(s, l, e, e.eh, _0)); break;

            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($new_expression(cp, e));

                if (e.p !== 91) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($new_target(l, e));

                break;


            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "return": s.push($return_statement(l, e)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($super_property(cp, e));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($super_call(l, e));

                break;


            case "switch": s.push($switch_statement(l, e)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "throw": s.push($throw_statement(l, e)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "try": s.push($try_statement(l, e)); break;

            case "typeof": s.push($unary_expression(l, e)); break;

            case "var": s.push($variable_statement(l, e)); break;

            case "void": s.push($unary_expression(l, e)); break;

            case "while": s.push($iteration_statement(l, e)); break;

            case "with": s.push($with_statement(l, e)); break;

            case "yield": s.push($yield_expression(l, e)); break;

            case "{":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($block(cp, e));

                if (e.p !== 29) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($object_literal(l, e));

                break;


            case "}": s = $1302(l, e, _s(s, l, e, e.eh, _0)); break;

            case "~": s.push($unary_expression(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180:

                    s = $120(l, e, s);

                    if (e.p < 0) s = $121(l, e, s);

                    break;


                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 177: s = $165(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $44(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 82: s = $182(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 75: s = $1067(l, e, s); break;

                case 74: s = $1301(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                case 66: s = $185(l, e, s); break;

                case 62: s = $186(l, e, s); break;

                case 61: s = $184(l, e, s); break;

                case 57: s = $30(l, e, s); break;

                case 56: s = $40(l, e, s); break;

                case 52: s = $39(l, e, s); break;

                case 50: s = $29(l, e, s); break;

                case 44: s = $170(l, e, s); break;

                case 43: s = $37(l, e, s); break;

                case 42: s = $38(l, e, s); break;

                case 41: s = $36(l, e, s); break;

                case 40: s = $35(l, e, s); break;

                case 39: s = $34(l, e, s); break;

                case 36: s = $169(l, e, s); break;

                case 33: s = $32(l, e, s); break;

                case 31: s = $28(l, e, s); break;

                case 30: s = $31(l, e, s); break;

                case 29: s = $41(l, e, s); break;

                case 28: s = $27(l, e, s); break;

                case 27: s = $33(l, e, s); break;

                case 26: s = $183(l, e, s); break;

                case 25: s = $26(l, e, s); break;

                case 24: s = $25(l, e, s); break;

                case 23: s = $228(l, e, s); break;

                case 22:

                    s = $969(l, e, s);

                    if (e.p < 0) s = $229(l, e, s);

                    break;


                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![87].includes(a)) fail(l, e);

        return s;
    }
    function $1238(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 7;

            var sym = s.slice(-7);

            s.splice(
                -7,
                7,
                {

                    type: "ForInStatement",

                    nodes: [sym[2], sym[4], sym[6]],

                    pos
                }
            );

            return (e.p = 36, s);
        }

        return s;
    }
    function $1239(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 7;

            var sym = s.slice(-7);

            s.splice(
                -7,
                7,
                {

                    type: "ForOfStatement",

                    nodes: [sym[2], sym[4], sym[6]],

                    pos,

                    AWAIT: !!null
                }
            );

            return (e.p = 36, s);
        }

        return s;
    }
    function $1240(l, e, s = []) { s.push($statement(l, e, s)); e.sp++; return s; }
    function $1241(l, e, s = []) { s.push($statement(l, e, s)); e.sp++; return s; }
    function $1242(l, e, s = []) { s.push($statement(l, e, s)); e.sp++; return s; }
    function $1243(l, e, s = []) {

        e.p = -1;


        if (_68.includes(l.tx)) {

            _s(s, l, e, e.eh, _0);

            e.ASI = true;

            return $1298(l, e, s);
        }

        return s;
    }
    function $1244(l, e, s = []) { s.push($statement(l, e, s)); e.sp++; return s; }
    function $1245(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 7;

            var sym = s.slice(-7);

            s.splice(
                -7,
                7,
                {

                    type: "ForStatement",

                    nodes: [sym[2], null, null, sym[6]],

                    LEX: false,

                    pos
                }
            );

            return (e.p = 36, s);
        }

        return s;
    }
    function $1246(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 7;

            var sym = s.slice(-7);

            s.splice(
                -7,
                7,
                {

                    type: "ForStatement",

                    nodes: [sym[2], sym[3], null, sym[6]],

                    LEX: true,

                    pos
                }
            );

            return (e.p = 36, s);
        }

        return s;
    }
    function $1247(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 7;

            var sym = s.slice(-7);

            s.splice(
                -7,
                7,
                {

                    type: "ForStatement",

                    nodes: [null, sym[3], null, sym[6]],

                    LEX: false,

                    pos
                }
            );

            return (e.p = 36, s);
        }

        return s;
    }
    function $1248(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 7;

            var sym = s.slice(-7);

            s.splice(
                -7,
                7,
                {

                    type: "ForStatement",

                    nodes: [null, null, sym[4], sym[6]],

                    LEX: false,

                    pos
                }
            );

            return (e.p = 36, s);
        }

        return s;
    }
    function $1249(l, e, s = []) {

        e.p = -1;


        if (_52.includes(l.tx)) { return $1299(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1250(l, e, s = []) {

        e.p = -1;


        if (_74.includes(l.tx) || _41.includes(l.ty)) {

            e.sp -= 7;

            var sym = s.slice(-7);

            s.splice(
                -7,
                7,
                {

                    type: "Method",

                    ASYNC: !!sym[0],

                    GENERATOR: !!null,

                    nodes: [sym[1], sym[3], null],

                    pos
                }
            );

            return (e.p = 87, s);
        }

        return s;
    }
    function $1251(l, e, s = []) {

        e.p = -1;


        if (_74.includes(l.tx) || _41.includes(l.ty)) {

            e.sp -= 7;

            var sym = s.slice(-7);

            s.splice(
                -7,
                7,
                {

                    type: "Method",

                    ASYNC: !!sym[0],

                    GENERATOR: !!null,

                    nodes: [sym[1], null, sym[5]],

                    pos
                }
            );

            return (e.p = 87, s);
        }

        return s;
    }
    function $1252(l, e, s = []) {

        e.p = -1;


        if (_74.includes(l.tx) || _41.includes(l.ty)) {

            e.sp -= 7;

            var sym = s.slice(-7);

            s.splice(
                -7,
                7,
                { type: "GetterMethod", nodes: [sym[1], sym[5]], pos }
            );

            return (e.p = 87, s);
        }

        return s;
    }
    function $1253(l, e, s = []) {

        e.p = -1;


        if (_52.includes(l.tx)) { return $1300(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1254(l, e, s = []) {

        e.p = -1;


        if (_74.includes(l.tx) || _41.includes(l.ty)) {

            e.sp -= 7;

            var sym = s.slice(-7);

            s.splice(
                -7,
                7,
                {

                    type: "Method",

                    ASYNC: !!sym[0],

                    GENERATOR: !!sym[1],

                    nodes: [sym[2], null, null],

                    pos
                }
            );

            return (e.p = 87, s);
        }

        return s;
    }
    function $1255(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 7;

            var sym = s.slice(-7);

            s.splice(
                -7,
                7,
                {

                    type: "ForStatement",

                    nodes: [sym[2], null, sym[4], sym[6]],

                    LEX: true,

                    pos
                }
            );

            return (e.p = 36, s);
        }

        return s;
    }
    function $1256(l, e, s = []) {

        e.p = -1;


        if (_52.includes(l.tx)) { return $1303(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1257(l, e, s = []) {

        e.p = -1;


        if (_74.includes(l.tx) || _41.includes(l.ty)) {

            e.sp -= 7;

            var sym = s.slice(-7);

            s.splice(
                -7,
                7,
                { type: "SetterMethod", nodes: [sym[1], sym[3]], pos }
            );

            return (e.p = 87, s);
        }

        return s;
    }
    function $1258(l, e, s = []) {

        e.p = -1;


        if (_52.includes(l.tx)) { return $1305(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1259(l, e, s = []) {

        e.p = -1;


        if (_74.includes(l.tx) || _41.includes(l.ty)) {

            e.sp -= 7;

            var sym = s.slice(-7);

            s.splice(
                -7,
                7,
                {

                    type: "Method",

                    ASYNC: !!null,

                    GENERATOR: !!sym[0],

                    nodes: [sym[1], sym[3], null],

                    pos
                }
            );

            return (e.p = 87, s);
        }

        return s;
    }
    function $1260(l, e, s = []) {

        e.p = -1;


        if (_74.includes(l.tx) || _41.includes(l.ty)) {

            e.sp -= 7;

            var sym = s.slice(-7);

            s.splice(
                -7,
                7,
                {

                    type: "Method",

                    ASYNC: !!null,

                    GENERATOR: !!sym[0],

                    nodes: [sym[1], null, sym[5]],

                    pos
                }
            );

            return (e.p = 87, s);
        }

        return s;
    }
    function $1261(l, e, s = []) {

        e.p = -1;


        if (_74.includes(l.tx) || _41.includes(l.ty)) {

            e.sp -= 7;

            var sym = s.slice(-7);

            s.splice(
                -7,
                7,
                {

                    type: "Method",

                    ASYNC: !!null,

                    GENERATOR: !!null,

                    nodes: [sym[0], sym[2], sym[5]],

                    pos
                }
            );

            return (e.p = 87, s);
        }

        return s;
    }
    function $1262(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "!": s.push($unary_expression(l, e)); break;

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($parenthesized(cp, e));

                if (e.p !== 131) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push(
                    $cover_parenthesized_expression_and_arrow_parameter_list(l, e)
                );

                break;


            case "++": s.push($update_expression(l, e)); break;

            case "+": s.push($unary_expression(l, e)); break;

            case "--": s.push($update_expression(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($unary_expression(cp, e));

                if (e.p !== 126) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case ";": s = $167(l, e, _s(s, l, e, e.eh, _0)); break;

            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($arrow_function(cp, e));

                if (e.p !== 78) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "await": s.push($await_expression(l, e)); break;

            case "break": s.push($break_statement(l, e)); break;

            case "class":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($class_expression(cp, e));

                if (e.p !== 83) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($class_declaration(l, e));

                break;


            case "const": s = $188(l, e, _s(s, l, e, e.eh, _0)); break;

            case "continue": s.push($continue_statement(l, e)); break;

            case "debugger": s.push($debugger_statement(l, e)); break;

            case "delete": s.push($unary_expression(l, e)); break;

            case "do": s.push($iteration_statement(l, e)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "for": s.push($iteration_statement(l, e)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "if": s.push($if_statement(l, e)); break;

            case "import":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($import_meta(cp, e));

                if (e.p !== 95) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($import_call(l, e));

                break;


            case "let": s = $187(l, e, _s(s, l, e, e.eh, _0)); break;

            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($new_expression(cp, e));

                if (e.p !== 91) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($new_target(l, e));

                break;


            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "return": s.push($return_statement(l, e)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($super_property(cp, e));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($super_call(l, e));

                break;


            case "switch": s.push($switch_statement(l, e)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "throw": s.push($throw_statement(l, e)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "try": s.push($try_statement(l, e)); break;

            case "typeof": s.push($unary_expression(l, e)); break;

            case "var": s.push($variable_statement(l, e)); break;

            case "void": s.push($unary_expression(l, e)); break;

            case "while": s.push($iteration_statement(l, e)); break;

            case "with": s.push($with_statement(l, e)); break;

            case "yield": s.push($yield_expression(l, e)); break;

            case "{":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($block(cp, e));

                if (e.p !== 29) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($object_literal(l, e));

                break;


            case "}": s = $1321(l, e, _s(s, l, e, e.eh, _0)); break;

            case "~": s.push($unary_expression(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180:

                    s = $120(l, e, s);

                    if (e.p < 0) s = $121(l, e, s);

                    break;


                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 177: s = $165(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $44(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 82: s = $182(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 75: s = $1067(l, e, s); break;

                case 74: s = $1320(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                case 66: s = $185(l, e, s); break;

                case 62: s = $186(l, e, s); break;

                case 61: s = $184(l, e, s); break;

                case 57: s = $30(l, e, s); break;

                case 56: s = $40(l, e, s); break;

                case 52: s = $39(l, e, s); break;

                case 50: s = $29(l, e, s); break;

                case 44: s = $170(l, e, s); break;

                case 43: s = $37(l, e, s); break;

                case 42: s = $38(l, e, s); break;

                case 41: s = $36(l, e, s); break;

                case 40: s = $35(l, e, s); break;

                case 39: s = $34(l, e, s); break;

                case 36: s = $169(l, e, s); break;

                case 33: s = $32(l, e, s); break;

                case 31: s = $28(l, e, s); break;

                case 30: s = $31(l, e, s); break;

                case 29: s = $41(l, e, s); break;

                case 28: s = $27(l, e, s); break;

                case 27: s = $33(l, e, s); break;

                case 26: s = $183(l, e, s); break;

                case 25: s = $26(l, e, s); break;

                case 24: s = $25(l, e, s); break;

                case 23: s = $228(l, e, s); break;

                case 22:

                    s = $969(l, e, s);

                    if (e.p < 0) s = $229(l, e, s);

                    break;


                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![67].includes(a)) fail(l, e);

        return s;
    }
    function $1263(l, e, s = []) {

        const sp = e.sp;

        e.p = -1;


        switch (l.tx) {

            case "!": s.push($unary_expression(l, e)); break;

            case "\"": s.push($string_literal(l, e)); break;

            case "$": s = $9(l, e, _s(s, l, e, e.eh, _0)); break;

            case "'": s.push($string_literal(l, e)); break;

            case "(":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($parenthesized(cp, e));

                if (e.p !== 131) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push(
                    $cover_parenthesized_expression_and_arrow_parameter_list(l, e)
                );

                break;


            case "++": s.push($update_expression(l, e)); break;

            case "+": s.push($unary_expression(l, e)); break;

            case "--": s.push($update_expression(l, e)); break;

            case "-":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($unary_expression(cp, e));

                if (e.p !== 126) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($numeric_literal(cp, e));

                if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($bigint(l, e));

                break;


            case "/":

                s.push($regular_expression_literal(l, e));

                break;


            case ";": s = $167(l, e, _s(s, l, e, e.eh, _0)); break;

            case "[": s.push($array_literal(l, e)); break;

            case "_": s = $10(l, e, _s(s, l, e, e.eh, _0)); break;

            case "`":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($no_substitute_template(cp, e));

                if (e.p !== 158) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($template_head(l, e));

                break;


            case "as": s = $15(l, e, _s(s, l, e, e.eh, _0)); break;

            case "async":

                var cp = l.copy(), _sym = null;

                _sym = $11(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                if (e.p !== 182) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($arrow_function(cp, e));

                if (e.p !== 78) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "await": s.push($await_expression(l, e)); break;

            case "break": s.push($break_statement(l, e)); break;

            case "class":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($class_expression(cp, e));

                if (e.p !== 83) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($class_declaration(l, e));

                break;


            case "const": s = $188(l, e, _s(s, l, e, e.eh, _0)); break;

            case "continue": s.push($continue_statement(l, e)); break;

            case "debugger": s.push($debugger_statement(l, e)); break;

            case "delete": s.push($unary_expression(l, e)); break;

            case "do": s.push($iteration_statement(l, e)); break;

            case "false": s = $131(l, e, _s(s, l, e, e.eh, _0)); break;

            case "for": s.push($iteration_statement(l, e)); break;

            case "from": s = $16(l, e, _s(s, l, e, e.eh, _0)); break;

            case "function":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($function_expression(cp, e));

                if (e.p !== 67) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($function_declaration(l, e));

                break;


            case "get": s = $12(l, e, _s(s, l, e, e.eh, _0)); break;

            case "if": s.push($if_statement(l, e)); break;

            case "import":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($import_meta(cp, e));

                if (e.p !== 95) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($import_call(l, e));

                break;


            case "let": s = $187(l, e, _s(s, l, e, e.eh, _0)); break;

            case "new":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($new_expression(cp, e));

                if (e.p !== 91) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                cp = l.copy();

                _sym = s.slice();

                _sym.push($member_expression(cp, e));

                if (e.p !== 92) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($new_target(l, e));

                break;


            case "null": s = $132(l, e, _s(s, l, e, e.eh, _0)); break;

            case "return": s.push($return_statement(l, e)); break;

            case "set": s = $13(l, e, _s(s, l, e, e.eh, _0)); break;

            case "super":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($super_property(cp, e));

                if (e.p !== 93) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($super_call(l, e));

                break;


            case "switch": s.push($switch_statement(l, e)); break;

            case "target": s = $14(l, e, _s(s, l, e, e.eh, _0)); break;

            case "this": s = $108(l, e, _s(s, l, e, e.eh, _0)); break;

            case "throw": s.push($throw_statement(l, e)); break;

            case "true": s = $130(l, e, _s(s, l, e, e.eh, _0)); break;

            case "try": s.push($try_statement(l, e)); break;

            case "typeof": s.push($unary_expression(l, e)); break;

            case "var": s.push($variable_statement(l, e)); break;

            case "void": s.push($unary_expression(l, e)); break;

            case "while": s.push($iteration_statement(l, e)); break;

            case "with": s.push($with_statement(l, e)); break;

            case "yield": s.push($yield_expression(l, e)); break;

            case "{":

                var cp = l.copy(), _sym = null;

                _sym = s.slice();

                _sym.push($block(cp, e));

                if (e.p !== 29) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                s.push($object_literal(l, e));

                break;


            case "}": s = $1319(l, e, _s(s, l, e, e.eh, _0)); break;

            case "~": s.push($unary_expression(l, e)); break;

            default:

                switch (l.ty) {

                    case 2: s = $8(l, e, _s(s, l, e, e.eh, _0)); break;

                    case 1:

                        var cp = l.copy(), _sym = null;

                        _sym = $135(cp, e, _s(s.slice(), cp, e, e.eh, _0));

                        if (e.p !== 173) { e.FAILED = false; e.sp = sp; } else { s = _sym; l.sync(cp); break; }

                        s.push($bigint(l, e));

                        break;

                }

        }

        let a = e.p;

        o: while (1) {

            if (sp > e.sp) break; else e.sp += 1;

            switch (e.p) {

                case 185: s = $6(l, e, s); break;

                case 182: s = $7(l, e, s); break;

                case 180:

                    s = $120(l, e, s);

                    if (e.p < 0) s = $121(l, e, s);

                    break;


                case 178:

                    s = $109(l, e, s);

                    if (e.p < 0) s = $110(l, e, s);

                    break;


                case 177: s = $165(l, e, s); break;

                case 176: s = $125(l, e, s); break;

                case 175: s = $126(l, e, s); break;

                case 174: s = $129(l, e, s); break;

                case 173: s = $128(l, e, s); break;

                case 169: s = $127(l, e, s); break;

                case 168: s = $111(l, e, s); break;

                case 162: s = $147(l, e, s); break;

                case 159: s = $144(l, e, s); break;

                case 158: s = $143(l, e, s); break;

                case 157: s = $117(l, e, s); break;

                case 153: s = $112(l, e, s); break;

                case 145: s = $113(l, e, s); break;

                case 143: s = $116(l, e, s); break;

                case 131:

                    s = $118(l, e, s);

                    if (e.p < 0) s = $119(l, e, s);

                    break;


                case 130: s = $164(l, e, s); break;

                case 127:

                    s = $78(l, e, s);

                    if (e.p < 0) s = $79(l, e, s);

                    break;


                case 126: s = $77(l, e, s); break;

                case 125: s = $76(l, e, s); break;

                case 124:

                    s = $74(l, e, s);

                    if (e.p < 0) s = $75(l, e, s);

                    break;


                case 123:

                    s = $72(l, e, s);

                    if (e.p < 0) s = $73(l, e, s);

                    break;


                case 122:

                    s = $70(l, e, s);

                    if (e.p < 0) s = $71(l, e, s);

                    break;


                case 121:

                    s = $68(l, e, s);

                    if (e.p < 0) s = $69(l, e, s);

                    break;


                case 120:

                    s = $66(l, e, s);

                    if (e.p < 0) s = $67(l, e, s);

                    break;


                case 119:

                    s = $64(l, e, s);

                    if (e.p < 0) s = $65(l, e, s);

                    break;


                case 118:

                    s = $62(l, e, s);

                    if (e.p < 0) s = $63(l, e, s);

                    break;


                case 117:

                    s = $59(l, e, s);

                    if (e.p < 0) s = $60(l, e, s);

                    if (e.p < 0) s = $61(l, e, s);

                    break;


                case 116: s = $160(l, e, s); break;

                case 115: s = $161(l, e, s); break;

                case 114:

                    s = $55(l, e, s);

                    if (e.p < 0) s = $56(l, e, s);

                    break;


                case 113:

                    s = $57(l, e, s);

                    if (e.p < 0) s = $58(l, e, s);

                    break;


                case 112:

                    s = $53(l, e, s);

                    if (e.p < 0) s = $54(l, e, s);

                    break;


                case 111: s = $52(l, e, s); break;

                case 110: s = $47(l, e, s); break;

                case 108: s = $46(l, e, s); break;

                case 107: s = $89(l, e, s); break;

                case 106: s = $105(l, e, s); break;

                case 104:

                    s = $96(l, e, s);

                    if (e.p < 0) s = $97(l, e, s);

                    break;


                case 99: s = $157(l, e, s); break;

                case 98: s = $156(l, e, s); break;

                case 97:

                    s = $93(l, e, s);

                    if (e.p < 0) s = $94(l, e, s);

                    if (e.p < 0) s = $95(l, e, s);

                    break;


                case 96: s = $152(l, e, s); break;

                case 95: s = $153(l, e, s); break;

                case 94: s = $107(l, e, s); break;

                case 93: s = $106(l, e, s); break;

                case 92:

                    s = $98(l, e, s);

                    if (e.p < 0) s = $99(l, e, s);

                    if (e.p < 0) s = $100(l, e, s);

                    if (e.p < 0) s = $101(l, e, s);

                    break;


                case 91: s = $92(l, e, s); break;

                case 90:

                    s = $50(l, e, s);

                    if (e.p < 0) s = $51(l, e, s);

                    break;


                case 89:

                    s = $44(l, e, s);

                    if (e.p < 0) s = $45(l, e, s);

                    break;


                case 83: s = $115(l, e, s); break;

                case 82: s = $182(l, e, s); break;

                case 81: s = $158(l, e, s); break;

                case 79: s = $163(l, e, s); break;

                case 78: s = $49(l, e, s); break;

                case 77: s = $48(l, e, s); break;

                case 75: s = $1067(l, e, s); break;

                case 74: s = $1318(l, e, s); break;

                case 67: s = $114(l, e, s); break;

                case 66: s = $185(l, e, s); break;

                case 62: s = $186(l, e, s); break;

                case 61: s = $184(l, e, s); break;

                case 57: s = $30(l, e, s); break;

                case 56: s = $40(l, e, s); break;

                case 52: s = $39(l, e, s); break;

                case 50: s = $29(l, e, s); break;

                case 44: s = $170(l, e, s); break;

                case 43: s = $37(l, e, s); break;

                case 42: s = $38(l, e, s); break;

                case 41: s = $36(l, e, s); break;

                case 40: s = $35(l, e, s); break;

                case 39: s = $34(l, e, s); break;

                case 36: s = $169(l, e, s); break;

                case 33: s = $32(l, e, s); break;

                case 31: s = $28(l, e, s); break;

                case 30: s = $31(l, e, s); break;

                case 29: s = $41(l, e, s); break;

                case 28: s = $27(l, e, s); break;

                case 27: s = $33(l, e, s); break;

                case 26: s = $183(l, e, s); break;

                case 25: s = $26(l, e, s); break;

                case 24: s = $25(l, e, s); break;

                case 23: s = $228(l, e, s); break;

                case 22:

                    s = $969(l, e, s);

                    if (e.p < 0) s = $229(l, e, s);

                    break;


                default: break o;
            }

            if (e.p >= 0) a = e.p;
        }

        if (sp <= e.sp) e.p = a;

        if (![66].includes(a)) fail(l, e);

        return s;
    }
    function $1264(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 8;

            var sym = s.slice(-8);

            s.splice(
                -8,
                8,
                {

                    type: "FunctionExpression",

                    ASYNC: !!sym[0],

                    GENERATOR: !!sym[2],

                    nodes: [null, null, sym[6]],

                    pos
                }
            );

            return (e.p = 67, s);
        }

        return s;
    }
    function $1265(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 8;

            var sym = s.slice(-8);

            s.splice(
                -8,
                8,
                {

                    type: "FunctionExpression",

                    ASYNC: !!null,

                    GENERATOR: !!null,

                    nodes: [sym[1], sym[3], sym[6]],

                    pos
                }
            );

            return (e.p = 67, s);
        }

        return s;
    }
    function $1266(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 8;

            var sym = s.slice(-8);

            s.splice(
                -8,
                8,
                {

                    type: "FunctionExpression",

                    ASYNC: !!sym[0],

                    GENERATOR: !!null,

                    nodes: [null, sym[3], sym[6]],

                    pos
                }
            );

            return (e.p = 67, s);
        }

        return s;
    }
    function $1267(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 8;

            var sym = s.slice(-8);

            s.splice(
                -8,
                8,
                {

                    type: "FunctionExpression",

                    ASYNC: !!sym[0],

                    GENERATOR: !!null,

                    nodes: [sym[2], null, sym[6]],

                    pos
                }
            );

            return (e.p = 67, s);
        }

        return s;
    }
    function $1268(l, e, s = []) {

        e.p = -1;


        if (_52.includes(l.tx)) { return $1309(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1269(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 8;

            var sym = s.slice(-8);

            s.splice(
                -8,
                8,
                {

                    type: "FunctionExpression",

                    ASYNC: !!sym[0],

                    GENERATOR: !!null,

                    nodes: [sym[2], sym[4], null],

                    pos
                }
            );

            return (e.p = 67, s);
        }

        return s;
    }
    function $1270(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 8;

            var sym = s.slice(-8);

            s.splice(
                -8,
                8,
                {

                    type: "FunctionExpression",

                    ASYNC: !!null,

                    GENERATOR: !!sym[1],

                    nodes: [null, sym[3], sym[6]],

                    pos
                }
            );

            return (e.p = 67, s);
        }

        return s;
    }
    function $1271(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 8;

            var sym = s.slice(-8);

            s.splice(
                -8,
                8,
                {

                    type: "FunctionExpression",

                    ASYNC: !!null,

                    GENERATOR: !!sym[1],

                    nodes: [sym[2], null, sym[6]],

                    pos
                }
            );

            return (e.p = 67, s);
        }

        return s;
    }
    function $1272(l, e, s = []) {

        e.p = -1;


        if (_52.includes(l.tx)) { return $1310(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1273(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 8;

            var sym = s.slice(-8);

            s.splice(
                -8,
                8,
                {

                    type: "FunctionExpression",

                    ASYNC: !!sym[0],

                    GENERATOR: !!sym[2],

                    nodes: [sym[3], null, null],

                    pos
                }
            );

            return (e.p = 67, s);
        }

        return s;
    }
    function $1274(l, e, s = []) {

        e.p = -1;


        if (_52.includes(l.tx)) { return $1311(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1275(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 8;

            var sym = s.slice(-8);

            s.splice(
                -8,
                8,
                {

                    type: "FunctionExpression",

                    ASYNC: !!null,

                    GENERATOR: !!sym[1],

                    nodes: [sym[2], sym[4], null],

                    pos
                }
            );

            return (e.p = 67, s);
        }

        return s;
    }
    function $1276(l, e, s = []) {

        e.p = -1;


        if (_52.includes(l.tx)) { return $1312(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1277(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 8;

            var sym = s.slice(-8);

            s.splice(
                -8,
                8,
                {

                    type: "FunctionExpression",

                    ASYNC: !!sym[0],

                    GENERATOR: !!sym[2],

                    nodes: [null, sym[4], null],

                    pos
                }
            );

            return (e.p = 67, s);
        }

        return s;
    }
    function $1278(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 8;

            var sym = s.slice(-8);

            s.splice(
                -8,
                8,
                {

                    type: "FunctionDeclaration",

                    ASYNC: !!sym[0],

                    GENERATOR: !!null,

                    nodes: [null, sym[3], sym[6]],

                    pos
                }
            );

            return (e.p = 66, s);
        }

        return s;
    }
    function $1279(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 8;

            var sym = s.slice(-8);

            s.splice(
                -8,
                8,
                {

                    type: "FunctionDeclaration",

                    ASYNC: !!sym[0],

                    GENERATOR: !!sym[2],

                    nodes: [null, null, sym[6]],

                    pos
                }
            );

            return (e.p = 66, s);
        }

        return s;
    }
    function $1280(l, e, s = []) {

        e.p = -1;


        if (_52.includes(l.tx)) { return $1313(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1281(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 8;

            var sym = s.slice(-8);

            s.splice(
                -8,
                8,
                {

                    type: "FunctionDeclaration",

                    ASYNC: !!sym[0],

                    GENERATOR: !!sym[2],

                    nodes: [sym[3], null, null],

                    pos
                }
            );

            return (e.p = 66, s);
        }

        return s;
    }
    function $1282(l, e, s = []) {

        e.p = -1;


        if (_52.includes(l.tx)) { return $1314(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1283(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 8;

            var sym = s.slice(-8);

            s.splice(
                -8,
                8,
                {

                    type: "FunctionDeclaration",

                    ASYNC: !!sym[0],

                    GENERATOR: !!null,

                    nodes: [sym[2], sym[4], null],

                    pos
                }
            );

            return (e.p = 66, s);
        }

        return s;
    }
    function $1284(l, e, s = []) {

        e.p = -1;


        if (_52.includes(l.tx)) { return $1315(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1285(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 8;

            var sym = s.slice(-8);

            s.splice(
                -8,
                8,
                {

                    type: "FunctionDeclaration",

                    ASYNC: !!sym[0],

                    GENERATOR: !!sym[2],

                    nodes: [null, sym[4], null],

                    pos
                }
            );

            return (e.p = 66, s);
        }

        return s;
    }
    function $1286(l, e, s = []) {

        e.p = -1;


        if (_52.includes(l.tx)) { return $1316(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1287(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 8;

            var sym = s.slice(-8);

            s.splice(
                -8,
                8,
                {

                    type: "FunctionDeclaration",

                    ASYNC: !!null,

                    GENERATOR: !!sym[1],

                    nodes: [sym[2], sym[4], null],

                    pos
                }
            );

            return (e.p = 66, s);
        }

        return s;
    }
    function $1288(l, e, s = []) {

        e.p = -1;


        if (_52.includes(l.tx)) { return $1317(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1289(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 4;

            var sym = s.slice(-4);

            s.splice(
                -4,
                4,
                { type: "CaseBlock", nodes: [...sym[1], sym[2]], pos }
            );

            return (e.p = 45, s);
        }

        return s;
    }
    function $1290(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 4;

            var sym = s.slice(-4);

            s.splice(
                -4,
                4,
                { type: "CaseBlock", nodes: [...sym[1], ...sym[2]], pos }
            );

            return (e.p = 45, s);
        }

        return s;
    }
    function $1291(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 4;

            var sym = s.slice(-4);

            s.splice(
                -4,
                4,
                { type: "CaseBlock", nodes: [sym[1], ...sym[2]], pos }
            );

            return (e.p = 45, s);
        }

        return s;
    }
    function $1293(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 8;

            var sym = s.slice(-8);

            s.splice(
                -8,
                8,
                {

                    type: "FunctionDeclaration",

                    ASYNC: !!sym[0],

                    GENERATOR: !!null,

                    nodes: [sym[2], null, sym[6]],

                    pos
                }
            );

            return (e.p = 66, s);
        }

        return s;
    }
    function $1294(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 8;

            var sym = s.slice(-8);

            s.splice(
                -8,
                8,
                {

                    type: "FunctionDeclaration",

                    ASYNC: !!null,

                    GENERATOR: !!sym[1],

                    nodes: [sym[2], null, sym[6]],

                    pos
                }
            );

            return (e.p = 66, s);
        }

        return s;
    }
    function $1295(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 8;

            var sym = s.slice(-8);

            s.splice(
                -8,
                8,
                {

                    type: "FunctionDeclaration",

                    ASYNC: !!null,

                    GENERATOR: !!sym[1],

                    nodes: [null, sym[3], sym[6]],

                    pos
                }
            );

            return (e.p = 66, s);
        }

        return s;
    }
    function $1296(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 8;

            var sym = s.slice(-8);

            s.splice(
                -8,
                8,
                {

                    type: "FunctionDeclaration",

                    ASYNC: !!null,

                    GENERATOR: !!null,

                    nodes: [sym[1], sym[3], sym[6]],

                    pos
                }
            );

            return (e.p = 66, s);
        }

        return s;
    }
    function $1297(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 8;

            var sym = s.slice(-8);

            s.splice(
                -8,
                8,
                {

                    type: "ForOfStatement",

                    nodes: [sym[3], sym[5], sym[7]],

                    pos,

                    AWAIT: !!sym[1]
                }
            );

            return (e.p = 36, s);
        }

        return s;
    }
    function $1298(l, e, s = []) { s.push($statement(l, e, s)); e.sp++; return s; }
    function $1299(l, e, s = []) {

        e.p = -1;


        if (_74.includes(l.tx) || _41.includes(l.ty)) {

            e.sp -= 8;

            var sym = s.slice(-8);

            s.splice(
                -8,
                8,
                {

                    type: "Method",

                    ASYNC: !!sym[0],

                    GENERATOR: !!null,

                    nodes: [sym[1], sym[3], sym[6]],

                    pos
                }
            );

            return (e.p = 87, s);
        }

        return s;
    }
    function $1300(l, e, s = []) {

        e.p = -1;


        if (_74.includes(l.tx) || _41.includes(l.ty)) {

            e.sp -= 8;

            var sym = s.slice(-8);

            s.splice(
                -8,
                8,
                {

                    type: "Method",

                    ASYNC: !!sym[0],

                    GENERATOR: !!sym[1],

                    nodes: [sym[2], null, sym[6]],

                    pos
                }
            );

            return (e.p = 87, s);
        }

        return s;
    }
    function $1301(l, e, s = []) {

        e.p = -1;


        if (_52.includes(l.tx)) { return $1322(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1302(l, e, s = []) {

        e.p = -1;


        if (_74.includes(l.tx) || _41.includes(l.ty)) {

            e.sp -= 8;

            var sym = s.slice(-8);

            s.splice(
                -8,
                8,
                {

                    type: "Method",

                    ASYNC: !!sym[0],

                    GENERATOR: !!sym[1],

                    nodes: [sym[2], sym[4], null],

                    pos
                }
            );

            return (e.p = 87, s);
        }

        return s;
    }
    function $1303(l, e, s = []) {

        e.p = -1;


        if (_74.includes(l.tx) || _41.includes(l.ty)) {

            e.sp -= 8;

            var sym = s.slice(-8);

            s.splice(
                -8,
                8,
                {

                    type: "SetterMethod",

                    nodes: [sym[1], sym[3], sym[6]],

                    pos
                }
            );

            return (e.p = 87, s);
        }

        return s;
    }
    function $1304(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 8;

            var sym = s.slice(-8);

            s.splice(
                -8,
                8,
                {

                    type: "ForStatement",

                    nodes: [sym[2], null, sym[5], sym[7]],

                    LEX: false,

                    pos
                }
            );

            return (e.p = 36, s);
        }

        return s;
    }
    function $1305(l, e, s = []) {

        e.p = -1;


        if (_74.includes(l.tx) || _41.includes(l.ty)) {

            e.sp -= 8;

            var sym = s.slice(-8);

            s.splice(
                -8,
                8,
                {

                    type: "Method",

                    ASYNC: !!null,

                    GENERATOR: !!sym[0],

                    nodes: [sym[1], sym[3], sym[6]],

                    pos
                }
            );

            return (e.p = 87, s);
        }

        return s;
    }
    function $1306(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 8;

            var sym = s.slice(-8);

            s.splice(
                -8,
                8,
                {

                    type: "ForStatement",

                    nodes: [sym[2], sym[3], sym[5], sym[7]],

                    LEX: true,

                    pos
                }
            );

            return (e.p = 36, s);
        }

        return s;
    }
    function $1307(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 8;

            var sym = s.slice(-8);

            s.splice(
                -8,
                8,
                {

                    type: "ForStatement",

                    nodes: [null, sym[3], sym[5], sym[7]],

                    LEX: false,

                    pos
                }
            );

            return (e.p = 36, s);
        }

        return s;
    }
    function $1308(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 8;

            var sym = s.slice(-8);

            s.splice(
                -8,
                8,
                {

                    type: "ForStatement",

                    nodes: [sym[2], sym[4], null, sym[7]],

                    LEX: false,

                    pos
                }
            );

            return (e.p = 36, s);
        }

        return s;
    }
    function $1309(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 9;

            var sym = s.slice(-9);

            s.splice(
                -9,
                9,
                {

                    type: "FunctionExpression",

                    ASYNC: !!sym[0],

                    GENERATOR: !!null,

                    nodes: [sym[2], sym[4], sym[7]],

                    pos
                }
            );

            return (e.p = 67, s);
        }

        return s;
    }
    function $1310(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 9;

            var sym = s.slice(-9);

            s.splice(
                -9,
                9,
                {

                    type: "FunctionExpression",

                    ASYNC: !!sym[0],

                    GENERATOR: !!sym[2],

                    nodes: [sym[3], null, sym[7]],

                    pos
                }
            );

            return (e.p = 67, s);
        }

        return s;
    }
    function $1311(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 9;

            var sym = s.slice(-9);

            s.splice(
                -9,
                9,
                {

                    type: "FunctionExpression",

                    ASYNC: !!null,

                    GENERATOR: !!sym[1],

                    nodes: [sym[2], sym[4], sym[7]],

                    pos
                }
            );

            return (e.p = 67, s);
        }

        return s;
    }
    function $1312(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 9;

            var sym = s.slice(-9);

            s.splice(
                -9,
                9,
                {

                    type: "FunctionExpression",

                    ASYNC: !!sym[0],

                    GENERATOR: !!sym[2],

                    nodes: [null, sym[4], sym[7]],

                    pos
                }
            );

            return (e.p = 67, s);
        }

        return s;
    }
    function $1313(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 9;

            var sym = s.slice(-9);

            s.splice(
                -9,
                9,
                {

                    type: "FunctionDeclaration",

                    ASYNC: !!sym[0],

                    GENERATOR: !!sym[2],

                    nodes: [sym[3], null, sym[7]],

                    pos
                }
            );

            return (e.p = 66, s);
        }

        return s;
    }
    function $1314(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 9;

            var sym = s.slice(-9);

            s.splice(
                -9,
                9,
                {

                    type: "FunctionDeclaration",

                    ASYNC: !!sym[0],

                    GENERATOR: !!null,

                    nodes: [sym[2], sym[4], sym[7]],

                    pos
                }
            );

            return (e.p = 66, s);
        }

        return s;
    }
    function $1315(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 9;

            var sym = s.slice(-9);

            s.splice(
                -9,
                9,
                {

                    type: "FunctionDeclaration",

                    ASYNC: !!sym[0],

                    GENERATOR: !!sym[2],

                    nodes: [null, sym[4], sym[7]],

                    pos
                }
            );

            return (e.p = 66, s);
        }

        return s;
    }
    function $1316(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 9;

            var sym = s.slice(-9);

            s.splice(
                -9,
                9,
                {

                    type: "FunctionDeclaration",

                    ASYNC: !!null,

                    GENERATOR: !!sym[1],

                    nodes: [sym[2], sym[4], sym[7]],

                    pos
                }
            );

            return (e.p = 66, s);
        }

        return s;
    }
    function $1317(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 5;

            var sym = s.slice(-5);

            s.splice(
                -5,
                5,
                {

                    type: "CaseBlock",

                    nodes: [...sym[1], sym[2], ...sym[3]],

                    pos
                }
            );

            return (e.p = 45, s);
        }

        return s;
    }
    function $1318(l, e, s = []) {

        e.p = -1;


        if (_52.includes(l.tx)) { return $1324(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1319(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 9;

            var sym = s.slice(-9);

            s.splice(
                -9,
                9,
                {

                    type: "FunctionDeclaration",

                    ASYNC: !!sym[0],

                    GENERATOR: !!sym[2],

                    nodes: [sym[3], sym[5], null],

                    pos
                }
            );

            return (e.p = 66, s);
        }

        return s;
    }
    function $1320(l, e, s = []) {

        e.p = -1;


        if (_52.includes(l.tx)) { return $1325(l, e, _s(s, l, e, e.eh, _0)); }

        return s;
    }
    function $1321(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 9;

            var sym = s.slice(-9);

            s.splice(
                -9,
                9,
                {

                    type: "FunctionExpression",

                    ASYNC: !!sym[0],

                    GENERATOR: !!sym[2],

                    nodes: [sym[3], sym[5], null],

                    pos
                }
            );

            return (e.p = 67, s);
        }

        return s;
    }
    function $1322(l, e, s = []) {

        e.p = -1;


        if (_74.includes(l.tx) || _41.includes(l.ty)) {

            e.sp -= 9;

            var sym = s.slice(-9);

            s.splice(
                -9,
                9,
                {

                    type: "Method",

                    ASYNC: !!sym[0],

                    GENERATOR: !!sym[1],

                    nodes: [sym[2], sym[4], sym[7]],

                    pos
                }
            );

            return (e.p = 87, s);
        }

        return s;
    }
    function $1323(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 9;

            var sym = s.slice(-9);

            s.splice(
                -9,
                9,
                {

                    type: "ForStatement",

                    nodes: [sym[2], sym[4], sym[6], sym[8]],

                    LEX: false,

                    pos
                }
            );

            return (e.p = 36, s);
        }

        return s;
    }
    function $1324(l, e, s = []) {

        e.p = -1;


        if (l.END || _7.includes(l.tx) || _6.includes(l.ty)) {

            e.sp -= 10;

            var sym = s.slice(-10);

            s.splice(
                -10,
                10,
                {

                    type: "FunctionDeclaration",

                    ASYNC: !!sym[0],

                    GENERATOR: !!sym[2],

                    nodes: [sym[3], sym[5], sym[8]],

                    pos
                }
            );

            return (e.p = 66, s);
        }

        return s;
    }
    function $1325(l, e, s = []) {

        e.p = -1;


        if (_26.includes(l.tx)) {

            e.sp -= 10;

            var sym = s.slice(-10);

            s.splice(
                -10,
                10,
                {

                    type: "FunctionExpression",

                    ASYNC: !!sym[0],

                    GENERATOR: !!sym[2],

                    nodes: [sym[3], sym[5], sym[8]],

                    pos
                }
            );

            return (e.p = 67, s);
        }

        return s;
    }


    return Object.assign(function (lexer, env = {
        error: [],
        eh: (lex, e) => { },
        sp: 0,
        asi: (lex, env, s) => { }
    }) {

        env.FAILED = false;
        const states = [];
        lexer.IWS = false;
        lexer.PARSE_STRING = true;
        lexer.addSymbols("...", "<", ">", "<=", ">=", "==", "!=", "===", "!==", "**", "++", "--", "<<", ">>", ">>>", "&&", "||", "+=", "-=", "*=", "%=", "/=", "**=", "<<=", ">>=", ">>>=", "&=", "|=", "^=", "=>", "//", "/*", "${", "?.", "??");
        lexer.tl = 0;

        env.fn = {
            parseString(lex, env, symbols, LR) {
                const copy = lex.copy();
                while (lex.tx != '"' && !lex.END) {
                    if (lex.tx == "\\") lex.next();
                    lex.next();
                }
                symbols[LR ? symbols.length - 1 : 0] = lex.slice(copy);
            }
        };
        _(lexer, env, env.eh, skips);
        const result = $javascript(lexer, env);

        if (!lexer.END || (env.FAILED)) {

            const error_lex = env.error.concat(lexer).sort((a, b) => a.off - b.off).pop();
            error_lex.throw(`Unexpected token [${error_lex.tx}]`);

        }
        return result;
    }, {
        $javascript,
        $start,
        $module,
        $import_declaration,
        $import_clause,
        $imported_default_binding,
        $name_space_import,
        $named_imports,
        $from_clause,
        $module_specifier,
        $imported_binding,
        $export_clause,
        $export_specifier,
        $script,
        $script_body,
        $declaration,
        $hoistable_declaration,
        $breakable_statement,
        $block_statement,
        $block,
        $empty_statement,
        $expression_statement,
        $if_statement_group_163_103,
        $if_statement,
        $iteration_statement_group_168_104,
        $iteration_statement_group_073_105,
        $for_declaration,
        $for_binding,
        $continue_statement,
        $break_statement,
        $return_statement,
        $throw_statement,
        $with_statement,
        $switch_statement,
        $case_block,
        $case_clause,
        $default_clause,
        $labeled_statement,
        $try_statement,
        $catch,
        $finally,
        $catch_parameter,
        $debugger_statement,
        $variable_statement,
        $variable_declaration,
        $lexical_declaration,
        $let_or_const,
        $lexical_binding,
        $function_declaration,
        $function_expression,
        $unique_formal_parameters,
        $formal_parameters,
        $function_rest_parameter,
        $formal_parameter,
        $function_body,
        $function_statement_list,
        $yield_expression_group_0127_110,
        $yield_expression,
        $arrow_parameters,
        $cover_call_expression_and_async_arrow_head,
        $class_declaration,
        $class_expression,
        $class_heritage,
        $class_element,
        $property_set_parameter_list,
        $super_property,
        $meta_property,
        $import_meta,
        $new_target,
        $super_call,
        $import_call,
        $arguments,
        $argument_list_group_1179_111,
        $await_expression,
        $assignment_operator,
        $conditional_expression,
        $update_expression,
        $cover_parenthesized_expression_and_arrow_parameter_list_group_1279_114,
        $cover_parenthesized_expression_and_arrow_parameter_list_group_1281_115,
        $parenthesized,
        $binding_pattern,
        $object_binding_pattern,
        $binding_rest_property,
        $binding_elision_element,
        $binding_element,
        $single_name_binding,
        $binding_rest_element,
        $regular_expression_literal,
        $regular_expression_flags,
        $object_literal,
        $property_name,
        $literal_property_name,
        $computed_property_name,
        $cover_initialized_name,
        $initializer,
        $spread_element,
        $no_substitute_template,
        $substitute_template,
        $template_head,
        $template_middle,
        $template_tail,
        $string_literal,
        $escaped_sequence_group_0387_117,
        $numeric_literal,
        $bigint,
        $null_literal,
        $boolean_literal,
        $label_identifier,
        $identifier_reference,
        $binding_identifier,
        $identifier,
        $identifier_name,
        $unreserved_word,
        $reserved_word,
        $future_reserved_word,
        $composite_identifier,
        $keyword,
        $def$start,
        $def$hex_digit,
        $def$hex,
        $def$binary,
        $def$octal,
        $def$scientific,
        $def$float,
        $def$integer,
        $def$natural,
        $def$id,
        $def$string,
        $def$js_identifier,
        $def$identifier,
        $named_imports_HC_listbody1_101,
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9,
        $10,
        $11,
        $12,
        $13,
        $14,
        $15,
        $16,
        $import_specifier,
        $export_clause_HC_listbody1_102,
        $19,
        $20,
        $21,
        $export_declaration,
        $statement_list_item,
        $25,
        $26,
        $27,
        $28,
        $29,
        $30,
        $31,
        $32,
        $33,
        $34,
        $35,
        $36,
        $37,
        $38,
        $39,
        $40,
        $41,
        $44,
        $45,
        $46,
        $47,
        $48,
        $49,
        $50,
        $51,
        $52,
        $53,
        $54,
        $55,
        $56,
        $57,
        $58,
        $59,
        $60,
        $61,
        $62,
        $63,
        $64,
        $65,
        $66,
        $67,
        $68,
        $69,
        $70,
        $71,
        $72,
        $73,
        $74,
        $75,
        $76,
        $77,
        $78,
        $79,
        $89,
        $92,
        $93,
        $94,
        $95,
        $96,
        $97,
        $98,
        $99,
        $100,
        $101,
        $105,
        $106,
        $107,
        $108,
        $109,
        $110,
        $111,
        $112,
        $113,
        $114,
        $115,
        $116,
        $117,
        $118,
        $119,
        $120,
        $121,
        $125,
        $126,
        $127,
        $128,
        $129,
        $130,
        $131,
        $132,
        $135,
        $143,
        $144,
        $147,
        $152,
        $153,
        $156,
        $157,
        $158,
        $160,
        $161,
        $163,
        $164,
        $165,
        $167,
        $169,
        $170,
        $182,
        $183,
        $184,
        $185,
        $186,
        $187,
        $188,
        $module_body,
        $190,
        $191,
        $192,
        $193,
        $194,
        $case_clauses_HC_listbody5_106,
        $197,
        $198,
        $case_clauses,
        $201,
        $202,
        $module_body_HC_listbody1_100,
        $204,
        $205,
        $variable_declaration_list_HC_listbody3_107,
        $207,
        $208,
        $209,
        $210,
        $211,
        $212,
        $213,
        $variable_declaration_list,
        $217,
        $218,
        $binding_list_HC_listbody1_108,
        $220,
        $221,
        $222,
        $223,
        $binding_list,
        $225,
        $226,
        $statement_list,
        $228,
        $229,
        $formal_parameter_list_HC_listbody3_109,
        $231,
        $232,
        $233,
        $234,
        $235,
        $236,
        $formal_parameter_list,
        $238,
        $239,
        $module_item,
        $arrow_function,
        $iteration_statement,
        $method_definition,
        $248,
        $249,
        $250,
        $251,
        $252,
        $253,
        $254,
        $255,
        $256,
        $257,
        $258,
        $259,
        $260,
        $261,
        $262,
        $263,
        $264,
        $265,
        $266,
        $267,
        $268,
        $269,
        $270,
        $271,
        $272,
        $273,
        $274,
        $275,
        $276,
        $277,
        $278,
        $279,
        $280,
        $281,
        $282,
        $283,
        $284,
        $285,
        $286,
        $287,
        $288,
        $289,
        $290,
        $291,
        $292,
        $293,
        $294,
        $295,
        $296,
        $297,
        $298,
        $299,
        $300,
        $301,
        $new_expression,
        $class_body,
        $305,
        $306,
        $307,
        $308,
        $left_hand_side_expression,
        $member_expression,
        $call_expression,
        $expression,
        $concise_body,
        $optional_expression,
        $optional_chain,
        $318,
        $primary_expression,
        $statement,
        $labeled_item,
        $322,
        $323,
        $argument_list_HC_listbody2_112,
        $325,
        $326,
        $327,
        $argument_list,
        $330,
        $331,
        $logical_or_expression,
        $logical_and_expression,
        $coalesce_expression,
        $coalesce_expression_head,
        $coalesce_expression_head_group_0230_113,
        $assignment_expression,
        $bitwise_or_expression,
        $bitwise_xor_expression,
        $bitwise_and_expression,
        $additive_expression,
        $equality_expression,
        $multiplicative_expression,
        $shift_expression,
        $cover_parenthesized_expression_and_arrow_parameter_list,
        $binding_property_list,
        $347,
        $348,
        $349,
        $350,
        $array_binding_pattern,
        $binding_element_list,
        $353,
        $354,
        $355,
        $356,
        $357,
        $358,
        $binding_property,
        $exponentiation_expression,
        $property_definition_list,
        $362,
        $363,
        $364,
        $365,
        $366,
        $367,
        $369,
        $property_definition,
        $elision,
        $unary_expression,
        $template_literal,
        $template_spans,
        $375,
        $376,
        $377,
        $380,
        $template_middle_list,
        $template_characters_HC_listbody3_116,
        $383,
        $384,
        $385,
        $386,
        $387,
        $388,
        $389,
        $390,
        $391,
        $392,
        $393,
        $394,
        $template_characters,
        $397,
        $398,
        $literal,
        $relational_expression,
        $template_string_data,
        $escaped_sequence,
        $def$defaultproductions_HC_listbody1_100,
        $404,
        $405,
        $406,
        $407,
        $408,
        $409,
        $410,
        $411,
        $412,
        $413,
        $414,
        $415,
        $416,
        $417,
        $418,
        $419,
        $420,
        $421,
        $422,
        $423,
        $424,
        $425,
        $426,
        $427,
        $428,
        $429,
        $430,
        $431,
        $432,
        $def$defaultproductions,
        $434,
        $435,
        $def$string_group_034_101,
        $437,
        $438,
        $439,
        $440,
        $441,
        $442,
        $443,
        $444,
        $445,
        $446,
        $447,
        $448,
        $449,
        $450,
        $451,
        $def$string_HC_listbody1_102,
        $453,
        $454,
        $def$string_value_group_149_104,
        $def$string_HC_listbody1_103,
        $457,
        $458,
        $def$string_value_HC_listbody2_105,
        $460,
        $def$defaultproduction,
        $462,
        $def$js_id_symbols,
        $def$identifier_symbols,
        $465,
        $466,
        $467,
        $468,
        $469,
        $470,
        $471,
        $472,
        $473,
        $475,
        $476,
        $477,
        $478,
        $479,
        $480,
        $481,
        $482,
        $483,
        $484,
        $485,
        $486,
        $487,
        $488,
        $489,
        $490,
        $491,
        $492,
        $493,
        $494,
        $495,
        $496,
        $497,
        $498,
        $499,
        $500,
        $501,
        $502,
        $503,
        $504,
        $505,
        $506,
        $507,
        $508,
        $509,
        $510,
        $511,
        $512,
        $513,
        $514,
        $515,
        $516,
        $517,
        $short_circuit_expression,
        $519,
        $520,
        $521,
        $522,
        $523,
        $524,
        $525,
        $526,
        $element_list,
        $528,
        $529,
        $530,
        $531,
        $533,
        $534,
        $535,
        $536,
        $537,
        $538,
        $539,
        $540,
        $542,
        $543,
        $544,
        $545,
        $546,
        $547,
        $548,
        $549,
        $550,
        $551,
        $552,
        $553,
        $554,
        $555,
        $556,
        $557,
        $558,
        $559,
        $560,
        $561,
        $562,
        $563,
        $564,
        $566,
        $567,
        $568,
        $569,
        $570,
        $572,
        $573,
        $574,
        $575,
        $576,
        $577,
        $578,
        $579,
        $586,
        $587,
        $588,
        $589,
        $590,
        $591,
        $592,
        $593,
        $594,
        $595,
        $596,
        $597,
        $598,
        $599,
        $600,
        $601,
        $602,
        $603,
        $604,
        $605,
        $606,
        $607,
        $608,
        $609,
        $610,
        $611,
        $612,
        $613,
        $614,
        $615,
        $616,
        $617,
        $618,
        $621,
        $622,
        $623,
        $624,
        $625,
        $627,
        $628,
        $630,
        $631,
        $633,
        $634,
        $635,
        $636,
        $638,
        $639,
        $640,
        $641,
        $643,
        $644,
        $645,
        $646,
        $647,
        $array_literal,
        $650,
        $651,
        $652,
        $653,
        $654,
        $655,
        $656,
        $657,
        $658,
        $659,
        $660,
        $661,
        $662,
        $663,
        $665,
        $666,
        $667,
        $668,
        $669,
        $670,
        $671,
        $672,
        $673,
        $674,
        $675,
        $676,
        $677,
        $678,
        $680,
        $681,
        $683,
        $685,
        $686,
        $687,
        $702,
        $703,
        $704,
        $705,
        $706,
        $707,
        $708,
        $709,
        $711,
        $712,
        $713,
        $714,
        $715,
        $716,
        $717,
        $718,
        $719,
        $720,
        $721,
        $729,
        $730,
        $731,
        $733,
        $734,
        $738,
        $739,
        $740,
        $741,
        $742,
        $743,
        $744,
        $745,
        $746,
        $747,
        $748,
        $749,
        $750,
        $751,
        $752,
        $753,
        $754,
        $755,
        $756,
        $757,
        $758,
        $759,
        $760,
        $761,
        $762,
        $763,
        $764,
        $765,
        $766,
        $767,
        $768,
        $769,
        $771,
        $772,
        $773,
        $774,
        $775,
        $776,
        $777,
        $778,
        $779,
        $780,
        $781,
        $782,
        $783,
        $784,
        $785,
        $786,
        $787,
        $788,
        $789,
        $790,
        $791,
        $792,
        $793,
        $794,
        $795,
        $796,
        $797,
        $798,
        $799,
        $800,
        $801,
        $802,
        $803,
        $805,
        $806,
        $807,
        $808,
        $809,
        $810,
        $811,
        $812,
        $813,
        $814,
        $815,
        $816,
        $817,
        $823,
        $824,
        $825,
        $826,
        $828,
        $829,
        $830,
        $831,
        $832,
        $833,
        $834,
        $835,
        $836,
        $837,
        $838,
        $839,
        $840,
        $843,
        $844,
        $845,
        $846,
        $847,
        $848,
        $849,
        $854,
        $855,
        $856,
        $857,
        $858,
        $859,
        $861,
        $862,
        $863,
        $865,
        $866,
        $867,
        $868,
        $869,
        $870,
        $871,
        $875,
        $878,
        $879,
        $880,
        $881,
        $882,
        $885,
        $886,
        $887,
        $888,
        $889,
        $890,
        $891,
        $892,
        $893,
        $894,
        $895,
        $896,
        $897,
        $898,
        $900,
        $908,
        $909,
        $911,
        $915,
        $916,
        $917,
        $918,
        $919,
        $920,
        $921,
        $922,
        $923,
        $924,
        $925,
        $926,
        $927,
        $928,
        $929,
        $930,
        $931,
        $932,
        $933,
        $934,
        $935,
        $936,
        $937,
        $938,
        $939,
        $940,
        $941,
        $942,
        $943,
        $944,
        $945,
        $946,
        $947,
        $948,
        $949,
        $950,
        $951,
        $952,
        $953,
        $954,
        $955,
        $956,
        $957,
        $958,
        $959,
        $960,
        $964,
        $965,
        $966,
        $967,
        $968,
        $969,
        $970,
        $971,
        $972,
        $973,
        $974,
        $975,
        $976,
        $977,
        $978,
        $979,
        $980,
        $985,
        $986,
        $987,
        $988,
        $989,
        $990,
        $991,
        $992,
        $993,
        $994,
        $995,
        $996,
        $997,
        $999,
        $1000,
        $1001,
        $1002,
        $1003,
        $1004,
        $1005,
        $1006,
        $1007,
        $1008,
        $1009,
        $1010,
        $1011,
        $1012,
        $1013,
        $1014,
        $1015,
        $1016,
        $1017,
        $1018,
        $1020,
        $1021,
        $1022,
        $1023,
        $1024,
        $1025,
        $1026,
        $1027,
        $1028,
        $1029,
        $1030,
        $1031,
        $1032,
        $1033,
        $1034,
        $1035,
        $1036,
        $1037,
        $1038,
        $1039,
        $1040,
        $1041,
        $1042,
        $1043,
        $1044,
        $1045,
        $1046,
        $1047,
        $1048,
        $1049,
        $1050,
        $1051,
        $1052,
        $1053,
        $1054,
        $1055,
        $1058,
        $1059,
        $1060,
        $1061,
        $1062,
        $1063,
        $1064,
        $1065,
        $1066,
        $1067,
        $1068,
        $1069,
        $1070,
        $1072,
        $1073,
        $1074,
        $1076,
        $1077,
        $1078,
        $1079,
        $1080,
        $1081,
        $1082,
        $1083,
        $1084,
        $1085,
        $1086,
        $1087,
        $1088,
        $1089,
        $1090,
        $1091,
        $1092,
        $1093,
        $1094,
        $1095,
        $1096,
        $1097,
        $1098,
        $1099,
        $1100,
        $1101,
        $1102,
        $1103,
        $1104,
        $1105,
        $1106,
        $1107,
        $1108,
        $1109,
        $1110,
        $1111,
        $1112,
        $1113,
        $1114,
        $1115,
        $1116,
        $1117,
        $1118,
        $1119,
        $1120,
        $1121,
        $1122,
        $1123,
        $1124,
        $1125,
        $1126,
        $1127,
        $1128,
        $1129,
        $1130,
        $1131,
        $1132,
        $1133,
        $1134,
        $1135,
        $1136,
        $1137,
        $1138,
        $1139,
        $1140,
        $1141,
        $1142,
        $1143,
        $1144,
        $1145,
        $1146,
        $1147,
        $1148,
        $1149,
        $1150,
        $1152,
        $1153,
        $1154,
        $1155,
        $1157,
        $1158,
        $1159,
        $1160,
        $1161,
        $1162,
        $1163,
        $1164,
        $1165,
        $1166,
        $1167,
        $1168,
        $1169,
        $1170,
        $1171,
        $1172,
        $1173,
        $1174,
        $1175,
        $1176,
        $1177,
        $1178,
        $1179,
        $1180,
        $1181,
        $1182,
        $1183,
        $1184,
        $1185,
        $1186,
        $1187,
        $1188,
        $1189,
        $1190,
        $1191,
        $1192,
        $1193,
        $1194,
        $1195,
        $1196,
        $1197,
        $1198,
        $1199,
        $1200,
        $1201,
        $1202,
        $1203,
        $1204,
        $1205,
        $1206,
        $1207,
        $1208,
        $1209,
        $1210,
        $1211,
        $1212,
        $1213,
        $1214,
        $1215,
        $1216,
        $1217,
        $1218,
        $1219,
        $1220,
        $1221,
        $1222,
        $1223,
        $1225,
        $1226,
        $1227,
        $1228,
        $1229,
        $1230,
        $1231,
        $1232,
        $1233,
        $1234,
        $1235,
        $1236,
        $1237,
        $1238,
        $1239,
        $1240,
        $1241,
        $1242,
        $1243,
        $1244,
        $1245,
        $1246,
        $1247,
        $1248,
        $1249,
        $1250,
        $1251,
        $1252,
        $1253,
        $1254,
        $1255,
        $1256,
        $1257,
        $1258,
        $1259,
        $1260,
        $1261,
        $1262,
        $1263,
        $1264,
        $1265,
        $1266,
        $1267,
        $1268,
        $1269,
        $1270,
        $1271,
        $1272,
        $1273,
        $1274,
        $1275,
        $1276,
        $1277,
        $1278,
        $1279,
        $1280,
        $1281,
        $1282,
        $1283,
        $1284,
        $1285,
        $1286,
        $1287,
        $1288,
        $1289,
        $1290,
        $1291,
        $1293,
        $1294,
        $1295,
        $1296,
        $1297,
        $1298,
        $1299,
        $1300,
        $1301,
        $1302,
        $1303,
        $1304,
        $1305,
        $1306,
        $1307,
        $1308,
        $1309,
        $1310,
        $1311,
        $1312,
        $1313,
        $1314,
        $1315,
        $1316,
        $1317,
        $1318,
        $1319,
        $1320,
        $1321,
        $1322,
        $1323,
        $1324,
        $1325
    });
}