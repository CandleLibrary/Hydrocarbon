#################################
#### Hydrocarbon HCG Grammar ####
#################################

#SYMBOLS (( )) -- @PREC @SYMBOL @IGNORE @NAME @EXT WERWER

#IGNORE θws θnl


S → head															↦cstr return sym[0]

head → preamble productions 				 						↦cstr return (sym[1].meta = sym[0], sym[1])

preamble → preamble_components										
	│ ɛ

preamble_components → preamble_component 							↦cstr return [sym[0]] 
	│ preamble_components preamble_component 						↦cstr return sym[0].push(sym[1]), sym[0]

preamble_component →  ignore_preamble
	│ symbols_preamble
	│ precedence_preamble
	│ name_preamble
	│ ext_preamble
	│ comment  	

precedence_preamble → @PREC terminal_symbol θnum θnl 				↦cstr this.type='precedence'; this.terminal = sym[1]; this.val = parseInt(sym[2])
symbols_preamble → @SYMBOL ignore_symbols θnl 						↦cstr this.type='symbols'; this.symbols = sym[1]
ignore_preamble → @IGNORE ignore_symbols θnl						↦cstr this.type='ignore'; this.symbols = sym[1]
name_preamble → @NAME comment_data θnl 								↦cstr this.type='name'; this.id = sym[1]
ext_preamble → @EXT identifier θnl 									↦cstr this.type='name'; this.id = sym[1]

productions → production  											↦cstr return [sym[0]] 	
			│ productions production 	 							↦cstr return sym[1].id = sym[0].length, sym[0].push(sym[1]), sym[0]
			│ productions comment 	 							    ↦cstr return sym[0]
			│ ɛ 	

production → -- production_id \→ production_bodies  				↦cstr this.name = sym[1]; this.bodies = sym[3]; this.id = -1;

production_bodies → production_body 					 			↦cstr return [sym[0]] 
			│ production_bodies \│ production_body 					↦cstr return sym[0].push(sym[2]), sym[0]



production_body → entries  											

↦cstr let s = sym[0]; this.sym = s.body.sym; this.length = s.body.length; this.conditions = s.body.conditions || []; this.functions = s.body.functions || []; this.reduce_function = s.reduce;


entries → body_entries 												↦cstr this.body = sym[0]; this.reduce = null				
		│ body_entries reduce_function 								↦cstr this.body = sym[0]; this.reduce = sym[1]
		│ \ɛ  														↦cstr this.body = {length:0, sym:[]}; this.reduce = null

body_entries → symbol 												↦cstr this.sym = [sym[0]]; this.length = 1; this.conditions = []; this.functions = [];
  			 │ condition_clause 									↦cstr this.sym = []; this.length = 0; this.conditions = [sym[0]]; this.functions = []; sym[0].offset = this.length;
  			 │ function_clause	 									↦cstr this.sym = []; this.length = 0; this.conditions = []; this.functions = [sym[0]]; sym[0].offset = this.length;
			 │ body_entries function_clause 						↦cstr return (sym[0].functions.push(sym[1]),  sym[1].offset = sym[0].length, sym[0])
			 │ body_entries condition_clause 						↦cstr return (sym[0].conditions.push(sym[1]),  sym[1].offset = sym[0].length, sym[0])
			 │ body_entries symbol 									↦cstr return (sym[0].sym.push(sym[1]), sym[0].length++, sym[0])

condition_clause → (( τEXC condition_symbol_list )) 				↦cstr this.type = "exc"; this.id = sym[2]
				 │ (( τERR condition_symbol_list )) 				↦cstr this.type = "err"; this.id = sym[2]
				 │ (( τIGN condition_symbol_list )) 				↦cstr this.type = "ign"; this.id = sym[2]


condition_symbol_list → terminal_symbol  							↦cstr return [sym[0]]
	│ condition_symbol_list terminal_symbol 						↦cstr return sym[0].push(sym[1]), sym[0]

ignore_symbols → ignore_symbol  									↦cstr return [sym[0]]
	│ ignore_symbols ignore_symbol 								    ↦cstr return sym[0].push(sym[1]), sym[0]

ignore_symbol → generated_symbol
	│ literal_symbol
	│ θany

terminal_symbol → generated_symbol
	│ literal_symbol
	│ escaped_symbol
	│ θany 															↦cstr this.type = "symbol"; this.val = sym[0]

symbol → generated_symbol
	│ production_symbol
	│ literal_symbol
	│ escaped_symbol
	│ θany 															↦cstr this.type = "symbol"; this.val = sym[0]

generated_symbol → \θ θany 											↦cstr this.type = "generated"; this.val = sym[1]
literal_symbol → \τ  θany 											↦cstr this.type = "literal"; this.val = sym[1]
escaped_symbol → \\  θany 											↦cstr this.type = "escaped"; this.val = sym[1]
production_symbol → identifier 										↦cstr this.type = "production"; this.name = sym[0]; this.val = -1

production_id → identifier 

identifier → θid


comment → \# comment_data comment_delimiter							↦cstr this.val = sym[1]	

comment_delimiter → θnl │ $

comment_data → comment_primitive 									↦cstr return sym[0]	
			 │ comment_data comment_primitive						↦cstr return sym[0]	 + sym[1]

comment_primitive → θid │ θnum │ θws │ θany

reduce_function → \↦ τcstr { comment_data } 						↦cstr this.type = "CLASS"; 		this.txt = sym[3]; this.name = ""; 	this.env = false;	
		│ \↦ τreturn { comment_data } 								↦cstr this.type = "RETURNED"; 	this.txt = sym[3]; this.name = ""; 	this.env = false;
 		│ \↦ τcstr ^ identifier 									↦cstr this.type = "CLASS"; 		this.txt = ""; 	   this.name = sym[3]; this.env = true;

function_clause → \↦ { comment_data } 								↦cstr this.type = "INLINE"; 	this.txt = sym[2]; this.name = ""; 	this.env = false;
		│ \↦ ^ identifier 										 	↦cstr this.type = "INLINE"; 	this.txt = sym[2]; this.name = sym[3]; 	this.env = true;
