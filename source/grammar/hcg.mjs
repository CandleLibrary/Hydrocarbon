let fn = {}; const 
/************** Maps **************/

    /* Symbols To Inject into the Lexer */
    symbols = ["((","))","<>","+>","=>","(*","(+","::","$eof"],

    /* Goto lookup maps */
    gt0 = [0,-1,1,4,3,2,5,7,8,6,11,9,10,-5,12,-7,13],
gt1 = [0,-18,16,17,-9,18],
gt2 = [0,-2,22,-2,5,7,8,6,11,9,10,-5,12,-7,13],
gt3 = [0,-27,30,31],
gt4 = [0,-19,36,-5,37,-3,38],
gt5 = [0,-60,40,39,41],
gt6 = [0,-60,43],
gt7 = [0,-62,45],
gt8 = [0,-44,48,47,-4,49,-5,50,51,52],
gt9 = [0,-42,58,57,-2,59,-1,64,63,-6,60,61,62],
gt10 = [0,-51,66,-4,67,68,69],
gt11 = [0,-27,71,31],
gt12 = [0,-62,72],
gt13 = [0,-44,48,73,-4,49,-5,50,51,52],
gt14 = [0,-12,74,77,75],
gt15 = [0,-26,80,-1,81],
gt16 = [0,-50,92,-5,50,51,52],
gt17 = [0,-62,93],
gt18 = [0,-62,94],
gt19 = [0,-46,97,-1,64,63,-6,60,61,62],
gt20 = [0,-47,98],
gt21 = [0,-28,81],
gt22 = [0,-13,77,106],
gt23 = [0,-13,109,-1,108],
gt24 = [0,-20,111,112,113,114,118,-12,119,-15,117,116,115,121,124,125,122,123,-1,128],
gt25 = [0,-20,132,112,113,114,118,-12,119,-15,117,116,115,121,124,125,122,123,-1,128],
gt26 = [0,-20,134,112,113,114,118,-12,119,-15,117,116,115,121,124,125,122,123,-1,128],
gt27 = [0,-62,135],
gt28 = [0,-27,137,31,-9,136,138],
gt29 = [0,-13,109,-1,141],
gt30 = [0,-16,142],
gt31 = [0,-25,147],
gt32 = [0,-24,151,-7,149,-3,148,150,-15,152,-2,121,124,125,122,123,-1,128],
gt33 = [0,-52,155],
gt34 = [0,-23,158,118,-12,119,-15,117,-2,121,124,125,122,123,-1,128],
gt35 = [0,-20,159,112,113,114,118,-12,119,-15,117,116,115,121,124,125,122,123,-1,128],
gt36 = [0,-27,137,31,-9,166,138],
gt37 = [0,-27,137,31,-9,167,138],
gt38 = [0,-16,168],
gt39 = [0,-21,170,113,114,118,-12,119,-15,117,116,115,121,124,125,122,123,-1,128],
gt40 = [0,-32,171],
gt41 = [0,-30,176,177,-1,173,174,175],
gt42 = [0,-51,184,-4,67,68,69],
gt43 = [0,-24,151,-12,150,-15,152,-2,121,124,125,122,123,-1,128],
gt44 = [0,-40,189,188,-9,190,-4,67,68,69],
gt45 = [0,-40,189,191,-9,190,-4,67,68,69],
gt46 = [0,-40,189,192,-9,190,-4,67,68,69],
gt47 = [0,-27,137,31,-9,193,138],
gt48 = [0,-62,194],
gt49 = [0,-30,176,177],
gt50 = [0,-51,205,-4,67,68,69],
gt51 = [0,-27,137,31,-9,210,138],
gt52 = [0,-62,211],
gt53 = [0,-62,212],
gt54 = [0,-27,137,31,-9,213,138],
gt55 = [0,-62,214],

    // State action lookup maps
    sm0=[0,1,-3,0,-4,0,-4,2,-14,1,-1,1,-8,3,-2,1],
sm1=[0,4,-3,0,-4,0],
sm2=[0,5,-3,0,-4,0,-19,6,-1,7,-8,5,-2,8],
sm3=[0,9,-3,0,-4,0,-4,2,-14,9,-1,9,-8,3,-2,9],
sm4=[0,10,-3,0,-4,0,-4,10,-14,10,-1,10,-8,10,-2,10],
sm5=[0,11,-3,0,-4,0,-4,11,-14,11,-1,11,-8,11,-2,11],
sm6=[0,12,-3,0,-4,0,-4,12,-14,12,-1,12,-8,12,-2,12],
sm7=[0,-4,-1,-4,0,-5,13,-2,14,-1,15,16,17,18,-4,19],
sm8=[0,-1,20,21,-1,22,-4,0,-3,23],
sm9=[0,24,-3,0,-4,0,-19,6,-1,7,-8,3,-2,8],
sm10=[0,25,-3,0,-4,0,-19,25,-1,25,-8,25,-2,25],
sm11=[0,26,-3,0,-4,0,-19,26,-1,26,-8,26,-2,26],
sm12=[0,-2,27,-1,0,-4,0],
sm13=[0,-2,28,-1,0,-4,0],
sm14=[0,-2,29,-1,0,-4,0],
sm15=[0,30,-3,0,-4,0,-4,30,-14,30,-1,30,-8,30,-2,30],
sm16=[0,-4,0,-4,0,-3,31,-45,32,33,34],
sm17=[0,-4,0,-4,0,-3,35,-45,32,33,34],
sm18=[0,-4,0,-4,0,-3,36,-45,32,33,34],
sm19=[0,-2,37,-1,38,-4,0,-3,39],
sm20=[0,40,20,21,-1,22,-4,41,-3,23,-28,42],
sm21=[0,43,43,43,-1,43,-4,43,-3,43,-28,43,-2,43,43],
sm22=[0,44,44,44,-1,44,-4,44,-3,44,-28,44,-2,44,44],
sm23=[0,45,-3,0,-4,0,-19,45,-1,45,-8,45,-2,45],
sm24=[0,46,-3,0,-4,0,-19,46,-1,46,-8,46,-2,46],
sm25=[0,47,-3,0,-4,0,-19,47,-1,47,-8,47,-2,47],
sm26=[0,-4,0,-4,0,-20,48],
sm27=[0,-4,0,-4,0,-20,49],
sm28=[0,-4,0,-4,0,-20,50],
sm29=[0,51,-1,51,-1,0,-4,0,-3,51,-15,51,51,51,51,-1,51,51,-1,51,-2,51,-2,51,-10,51,51,51,-2,51,51,51,52],
sm30=[0,-4,0,-4,0,-20,53],
sm31=[0,-4,0,-4,0,-52,52],
sm32=[0,-4,0,-4,0,-34,54,55],
sm33=[0,51,51,51,-1,0,-4,51,-3,51,-15,51,-1,51,51,-1,51,51,-1,51,-2,51,-2,51,51,51,-8,51,51,51,-2,51,51,51],
sm34=[0,-4,0,-4,56],
sm35=[0,-4,0,-4,57,-3,31,-45,32,33,34],
sm36=[0,-4,0,-4,58,-3,58,-45,58,58,58],
sm37=[0,-4,0,-4,59,-3,59,-45,59,59,59],
sm38=[0,-2,29,-1,-1,-4,-1],
sm39=[0,-4,-1,-4,-1,-3,60],
sm40=[0,-4,0,-4,61],
sm41=[0,-4,0,-4,62,-3,35,-45,32,33,34],
sm42=[0,-4,0,-4,63,-3,63,-45,63,63,63],
sm43=[0,-4,0,-4,64,-3,64,-45,64,64,64],
sm44=[0,-4,65,-4,66],
sm45=[0,-4,67,-4,67,-3,68],
sm46=[0,-4,69,-4,69,-3,69],
sm47=[0,-1,70,-2,0,-4,0],
sm48=[0,-1,71,-2,0,-4,0,-3,71,-23,71,-21,71,71,71],
sm49=[0,-1,72,-2,0,-4,0,-3,72,-23,72,-21,72,72,72],
sm50=[0,-1,20,21,-1,22,-4,73,-3,23],
sm51=[0,-4,0,-4,74],
sm52=[0,-4,0,-4,75],
sm53=[0,-2,37,-1,76,-4,0,-3,39],
sm54=[0,-2,37,-1,77,-4,0,-3,39],
sm55=[0,-2,78,-1,78,-4,0,-3,78],
sm56=[0,-2,79,-1,79,-4,0,-3,79],
sm57=[0,-2,80,-1,80,-4,0,-3,80],
sm58=[0,81,-3,0,-4,0,-4,81,-14,81,-1,81,81,-4,81,-2,81,-2,81],
sm59=[0,82,82,82,-1,82,-4,82,-3,82,-28,82,-2,82,82],
sm60=[0,83,-3,0,-4,0,-4,83,-14,83,-1,83,83,-4,83,-2,83,-2,83],
sm61=[0,84,-1,27,-1,0,-4,0,-3,85,-19,86,-1,87,-7,88,-14,89,32,33,34],
sm62=[0,-2,90,-1,0,-4,0],
sm63=[0,-2,29,-1,-1,-4,0],
sm64=[0,-1,20,21,-1,22,-4,0,-3,23,-31,91,92],
sm65=[0,93,-3,0,-4,0,-4,93,-14,93,-1,93,-8,93,-2,93],
sm66=[0,-4,0,-4,94,-3,94,-45,94,94,94],
sm67=[0,95,95,95,-1,0,-4,95,-3,95,-15,95,-1,95,95,-1,95,95,-1,95,-2,95,-2,95,-10,95,95,95,-2,95,95,95],
sm68=[0,96,96,96,-1,0,-4,96,-3,96,-15,96,-1,96,96,-1,96,96,-1,96,-2,96,-2,96,-10,96,96,96,-2,96,96,96],
sm69=[0,97,97,97,-1,0,-4,97,-3,97,-15,97,-1,97,97,-1,97,97,-1,97,-2,97,-2,97,-10,97,97,97,-2,97,97,97],
sm70=[0,98,-3,0,-4,0,-4,98,-14,98,-1,98,-8,98,-2,98],
sm71=[0,-4,0,-4,99,-3,99,-45,99,99,99],
sm72=[0,-4,0,-4,100,-3,100,-45,100,100,100],
sm73=[0,-4,0,-4,101,-3,101,-45,101,101,101],
sm74=[0,-4,102,-4,102,-3,102],
sm75=[0,-4,0,-4,103],
sm76=[0,104,-3,0,-4,0,-4,104,-14,104,-1,104,-8,104,-2,104],
sm77=[0,105,-3,0,-4,0,-4,105,-14,105,-1,105,-8,105,-2,105],
sm78=[0,106,-3,0,-4,0,-4,106,-14,106,-1,106,-8,106,-2,106],
sm79=[0,-2,107,-1,107,-4,0,-3,107],
sm80=[0,-4,108,-4,0,-16,109,110],
sm81=[0,-2,111,-1,111,-4,0,-3,111],
sm82=[0,-4,112,-4,0,-16,112,112],
sm83=[0,113,-3,0,-4,0,-19,113,-1,113,114,-7,3,-2,113],
sm84=[0,115,-3,0,-4,0,-19,115,-1,115,115,-4,115,-2,115,-2,115],
sm85=[0,116,-3,0,-4,0,-19,116,-1,116,116,-4,116,-2,116,-2,116],
sm86=[0,117,-1,27,-1,0,-4,0,-3,85,-15,117,-1,117,117,-2,87,-1,117,-2,117,-2,118,-15,32,33,34],
sm87=[0,119,-3,0,-4,0,-19,119,-1,119,119,-4,119,-2,119,-2,119],
sm88=[0,120,-3,0,-4,0,-19,120,-1,120,120,-4,120,-2,120,-2,120],
sm89=[0,121,-1,121,-1,0,-4,0,-3,121,-15,121,-1,121,121,-1,121,121,-1,121,-2,121,-2,121,-10,122,123,124,-2,121,121,121],
sm90=[0,121,-1,121,-1,0,-4,0,-3,121,-15,121,-1,121,121,-1,121,121,-1,121,-2,121,-2,121,-15,121,121,121],
sm91=[0,-2,27,-1,0,-4,0,-3,85,-19,86,-1,87,-7,88,-15,32,33,34],
sm92=[0,125,-1,125,-1,0,-4,0,-3,125,-15,125,-1,125,125,-1,125,125,-1,125,-2,125,-2,125,-10,125,125,125,-2,125,125,125],
sm93=[0,84,-1,27,-1,0,-4,0,-3,85,-19,86,-1,87,126,-1,127,128,-3,88,-14,89,32,33,34],
sm94=[0,129,-1,129,-1,0,-4,0,-3,129,-15,129,-1,129,129,-1,129,129,-1,129,-2,129,-2,129,-10,129,129,129,-2,129,129,129],
sm95=[0,130,-1,130,-1,0,-4,0,-3,130,-15,130,-1,130,130,-1,130,130,-1,130,-2,130,-2,130,-10,130,130,130,-2,130,130,130],
sm96=[0,-4,0,-4,0,-34,131,132],
sm97=[0,133,-3,0,-4,0,-19,133,-1,133,133,-4,133,-2,133,-2,133],
sm98=[0,134,-3,0,-4,0,-19,134,-1,134,134,-4,134,-2,134,-2,134],
sm99=[0,135,-3,0,-4,0,-19,135,-1,135,114,-7,3,-2,135],
sm100=[0,136,-1,136,-1,0,-4,0,-3,136,-15,136,136,136,136,-1,136,136,-1,136,-2,136,-2,136,-10,136,136,136,-2,136,136,136],
sm101=[0,137,-3,0,-4,0,-19,137,-1,137,114,-7,3,-2,137],
sm102=[0,138,-3,0,-4,0,-19,138,-1,138,-8,138,-2,138],
sm103=[0,-1,20,21,-1,22,-4,0,-3,23,-31,91,139],
sm104=[0,-1,20,21,-1,22,-4,0,-3,23,-31,140,140],
sm105=[0,-1,140,140,-1,140,-4,0,-3,140,-31,140,140],
sm106=[0,141,-3,0,-4,0,-4,141,-14,141,-1,141,-8,141,-2,141],
sm107=[0,-2,142,-1,0,-4,0],
sm108=[0,-4,143,-4,0,-16,143,143],
sm109=[0,-2,144,-1,0,-4,0],
sm110=[0,145,-3,0,-4,0,-19,145,-1,145,145,-4,145,-2,145,-2,145],
sm111=[0,146,-3,0,-4,0,-19,146,-1,146,146,-4,146,-2,146,-2,147],
sm112=[0,148,-3,0,-4,0,-19,148,-1,148,148,-4,148,-2,148,-2,148],
sm113=[0,149,-1,149,-1,0,-4,0,-3,149,-15,149,-1,149,149,-1,149,149,-1,149,-2,149,-2,149,-15,149,149,149],
sm114=[0,149,-1,149,-1,0,-4,0,-3,149,-15,149,-1,149,149,-1,149,149,-1,149,-2,149,-2,149,-10,122,123,124,-2,149,149,149],
sm115=[0,-4,0,-4,0,-34,131,132,-1,150,151,152,153,154,155],
sm116=[0,156,-1,156,-1,0,-4,0,-3,156,-15,156,-1,156,156,-1,156,156,-1,156,-2,156,-2,156,-10,156,156,156,-2,156,156,156],
sm117=[0,-4,0,-4,0,-3,36,-23,157,-21,32,33,34],
sm118=[0,-4,0,-4,0,-3,158,-23,158,-21,158,158,158],
sm119=[0,-2,27,-1,0,-4,0,-3,85,-20,159,87,-7,88,-15,32,33,34],
sm120=[0,-4,0,-4,0,-22,114,-4,160,-2,3],
sm121=[0,161,-3,0,-4,0,-19,161,-1,161,-8,161,-2,161],
sm122=[0,-1,20,21,-1,22,-4,0,-3,23,-31,91,162],
sm123=[0,-1,20,21,-1,22,-4,0,-3,23,-31,91,163],
sm124=[0,-2,164,-1,0,-4,0],
sm125=[0,-4,0,-4,165],
sm126=[0,166,-3,0,-4,0,-19,166,-1,166,166,-4,166,-2,166,-2,166],
sm127=[0,167,-3,0,-4,0,-19,167,-1,167,167,-4,167,-2,167,-2,167],
sm128=[0,-4,0,-4,0,-37,150,151],
sm129=[0,-4,0,-4,0,-35,168],
sm130=[0,-4,0,-4,0,-34,169],
sm131=[0,-4,0,-4,0,-43,170],
sm132=[0,-4,0,-4,0,-35,171],
sm133=[0,-4,0,-4,0,-34,172],
sm134=[0,-4,0,-4,0,-34,173,174,-7,175],
sm135=[0,-4,0,-4,0,-34,176,177],
sm136=[0,-4,0,-4,0,-27,178],
sm137=[0,179,-1,179,-1,0,-4,0,-3,179,-15,179,-1,179,179,-1,179,179,-1,179,-2,179,-2,179,-10,179,179,179,-2,179,179,179],
sm138=[0,180,-1,180,-1,0,-4,0,-3,180,-15,180,-1,180,180,-1,180,180,-1,180,-2,180,-2,180,-15,180,180,180],
sm139=[0,181,-1,181,-1,0,-4,0,-3,181,-15,181,-1,181,181,-1,181,181,-1,181,-2,181,-2,181,-10,181,181,181,-2,181,181,181],
sm140=[0,-4,0,-4,0,-27,182],
sm141=[0,-4,0,-4,0,-3,36,-23,183,-21,32,33,34],
sm142=[0,-4,0,-4,0,-3,184,-23,184,-21,184,184,184],
sm143=[0,-4,0,-4,0,-27,185],
sm144=[0,-4,0,-4,0,-27,186],
sm145=[0,-1,20,21,-1,22,-4,0,-3,23,-31,91,187],
sm146=[0,188,-1,188,-1,0,-4,0,-3,188,-15,188,-1,188,188,-1,188,188,-1,188,-2,188,-2,188,-15,188,188,188],
sm147=[0,-1,189,189,-1,189,-4,0,-3,189,-31,189,189],
sm148=[0,-4,0,-4,190],
sm149=[0,191,-3,0,-4,0,-4,191,-14,191,-1,191,-8,191,-2,191],
sm150=[0,192,-1,192,-1,0,-4,0,-3,192,-15,192,-1,192,192,-1,192,192,-1,192,-2,192,-2,192,-10,192,192,192,-2,192,192,192],
sm151=[0,193,-1,193,-1,0,-4,0,-3,193,-15,193,-1,193,193,-1,193,193,-1,193,-2,193,-2,193,-15,193,193,193],
sm152=[0,-4,0,-4,0,-3,194,-23,194,-21,194,194,194],
sm153=[0,195,-1,195,-1,0,-4,0,-3,195,-15,195,-1,195,195,-1,195,195,-1,195,-2,195,-2,195,-15,195,195,195],
sm154=[0,196,-1,196,-1,0,-4,0,-3,196,-15,196,-1,196,196,-1,196,196,-1,196,-2,196,-2,196,-15,196,196,196],
sm155=[0,197,-1,197,-1,0,-4,0,-3,197,-15,197,-1,197,197,-1,197,197,-1,197,-2,197,-2,197,-15,197,197,197],
sm156=[0,198,-3,0,-4,0,-4,198,-14,198,-1,198,-8,198,-2,198],
sm157=[0,-1,20,21,-1,22,-4,0,-3,23,-31,91,199],
sm158=[0,200,-3,0,-4,0,-19,200,-1,200,200,-4,200,-2,200,-2,200],
sm159=[0,201,-3,0,-4,0,-19,201,-1,201,201,-4,201,-2,201,-2,201],
sm160=[0,-1,20,21,-1,22,-4,0,-3,23,-31,91,202],
sm161=[0,203,-3,0,-4,0,-19,203,-1,203,203,-4,203,-2,203,-2,203],
sm162=[0,204,-3,0,-4,0,-19,204,-1,204,204,-4,204,-2,204,-2,204],
sm163=[0,205,-3,0,-4,0,-19,205,-1,205,205,-4,205,-2,205,-2,205],

    // Symbol Lookup map
    lu = new Map([[1,1],[2,2],[4,3],[8,4],[16,5],[32,6],[64,7],[128,8],[256,9],[512,10],[3,11],[264,11],[200,13],["@",14],["SYMBOL",15],[null,13],["PREC",18],["IGNORE",20],["ERROR",21],["NAME",22],["EXT",23],["AS",26],["as",27],["IMPORT",28],["<>",29],["→",30],["+>",31],["│",32],["[",33],["]",34],["(",35],["EXC",36],[")",37],["ERR",38],["IGN",39],["#",40],["$eof",57],[";",42],["↦",43],["^",44],["{",45],["}",46],["err",47],["e",48],["cstr",49],["c",50],["return",51],["r",52],["=>",53],["(+",54],["(*",55],["?",56],["ɛ",58],["θ",59],["τ",60],["\\",61],["::",62]]),

    //Reverse Symbol Lookup map
    rlu = new Map([[1,1],[2,2],[3,4],[4,8],[5,16],[6,32],[7,64],[8,128],[9,256],[10,512],[11,3],[11,264],[13,200],[14,"@"],[15,"SYMBOL"],[13,null],[18,"PREC"],[20,"IGNORE"],[21,"ERROR"],[22,"NAME"],[23,"EXT"],[26,"AS"],[27,"as"],[28,"IMPORT"],[29,"<>"],[30,"→"],[31,"+>"],[32,"│"],[33,"["],[34,"]"],[35,"("],[36,"EXC"],[37,")"],[38,"ERR"],[39,"IGN"],[40,"#"],[57,"$eof"],[42,";"],[43,"↦"],[44,"^"],[45,"{"],[46,"}"],[47,"err"],[48,"e"],[49,"cstr"],[50,"c"],[51,"return"],[52,"r"],[53,"=>"],[54,"(+"],[55,"(*"],[56,"?"],[58,"ɛ"],[59,"θ"],[60,"τ"],[61,"\\"],[62,"::"]]),

    // States 
    state = [sm0,
sm1,
sm2,
sm3,
sm4,
sm5,
sm6,
sm6,
sm6,
sm6,
sm6,
sm6,
sm6,
sm6,
sm7,
sm8,
sm9,
sm10,
sm11,
sm12,
sm13,
sm14,
sm15,
sm16,
sm17,
sm18,
sm8,
sm14,
sm16,
sm19,
sm20,
sm21,
sm22,
sm22,
sm22,
sm22,
sm23,
sm24,
sm25,
sm26,
sm27,
sm28,
sm29,
sm30,
sm31,
sm32,
sm33,
sm34,
sm35,
sm36,
sm37,
sm37,
sm37,
sm37,
sm38,
sm38,
sm39,
sm40,
sm41,
sm42,
sm43,
sm43,
sm43,
sm44,
sm45,
sm46,
sm47,
sm48,
sm48,
sm48,
sm49,
sm50,
sm51,
sm52,
sm53,
sm54,
sm55,
sm56,
sm57,
sm57,
sm58,
sm59,
sm60,
sm60,
sm60,
sm61,
sm61,
sm62,
sm61,
sm63,
sm64,
sm65,
sm66,
sm67,
sm68,
sm69,
sm70,
sm71,
sm72,
sm73,
sm73,
sm74,
sm75,
sm76,
sm77,
sm78,
sm54,
sm79,
sm80,
sm81,
sm82,
sm83,
sm84,
sm85,
sm86,
sm87,
sm88,
sm89,
sm90,
sm90,
sm91,
sm92,
sm92,
sm92,
sm92,
sm92,
sm93,
sm94,
sm95,
sm96,
sm97,
sm98,
sm99,
sm100,
sm101,
sm102,
sm103,
sm104,
sm105,
sm64,
sm106,
sm80,
sm107,
sm108,
sm109,
sm109,
sm61,
sm110,
sm111,
sm112,
sm113,
sm113,
sm114,
sm115,
sm116,
sm117,
sm118,
sm118,
sm119,
sm120,
sm18,
sm18,
sm18,
sm64,
sm38,
sm121,
sm122,
sm123,
sm124,
sm125,
sm126,
sm127,
sm128,
sm129,
sm130,
sm131,
sm132,
sm133,
sm134,
sm134,
sm134,
sm134,
sm135,
sm135,
sm136,
sm137,
sm138,
sm139,
sm140,
sm141,
sm142,
sm143,
sm144,
sm145,
sm146,
sm147,
sm148,
sm149,
sm64,
sm38,
sm14,
sm64,
sm38,
sm150,
sm151,
sm152,
sm153,
sm154,
sm155,
sm156,
sm157,
sm158,
sm159,
sm160,
sm161,
sm162,
sm163],

/************ Functions *************/

    max = Math.max, min = Math.min,

    //Error Functions
    e = (tk,r,o,l,p)=>{if(l.END)l.throw("Unexpected end of input");else if(l.ty & (264)) l.throw(`Unexpected space character within input "${1}" `) ; else l.throw(`Unexpected token ${l.tx} within input "${111}" `)}, 
    eh = [e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e],

    //Empty Function
    nf = ()=>-1, 

    //Environment Functions
    
redv = (ret, fn, plen, ln, t, e, o, l, s) => {        ln = max(o.length - plen, 0);        o[ln] = fn(o.slice(-plen), e, l, s, o, plen);        o.length = ln + 1;        return ret;    },
rednv = (ret, Fn, plen, ln, t, e, o, l, s) => {        ln = max(o.length - plen, 0);        o[ln] = new Fn(o.slice(-plen), e, l, s, o, plen);        o.length = ln + 1;        return ret;    },
redn = (ret, plen, t, e, o, l, s) => {        if(plen > 0){            let ln = max(o.length - plen, 0);            o[ln] = o[o.length -1];            o.length = ln + 1;        }        return ret;    },
shftf = (ret, fn, t, e, o, l, s) => (fn(o, e, l, s), ret),
R00_hydrocarbon=function (sym,env,lex,state,output,len) {return env.productions},
R10_head=function (sym,env,lex,state,output,len) {return env.productions.meta = sym[0]},
R30_pre_preamble101_group_list=function (sym,env,lex,state,output,len) {return (sym[0].push(sym[1]),sym[0])},
R31_pre_preamble101_group_list=function (sym,env,lex,state,output,len) {return [sym[0]]},
C60_pre_symbols_preamble=function (sym,env,lex,state,output,len) {this.type = "symbols";this.symbols = sym[2];this.symbols.forEach(lex.addSymbol.bind(lex));},
C70_pre_precedence_preamble=function (sym,env,lex,state,output,len) {this.grammar_stamp = env.stamp;this.type = "precedence";this.terminal = sym[2];this.val = parseInt(sym[3]);},
C80_pre_ignore_preamble=function (sym,env,lex,state,output,len) {this.grammar_stamp = env.stamp;this.type = "ignore";this.symbols = sym[2];},
C90_pre_error_preamble=function (sym,env,lex,state,output,len) {this.grammar_stamp = env.stamp;this.type = "error";this.symbols = sym[2];},
C100_pre_name_preamble=function (sym,env,lex,state,output,len) {this.type = "name";this.id = sym[2];},
C110_pre_ext_preamble=function (sym,env,lex,state,output,len) {this.type = "ext";this.id = sym[2];},
R140_pre_import_preamble1802_group_list=function (sym,env,lex,state,output,len) {return sym[0] + sym[1]},
R141_pre_import_preamble1802_group_list=function (sym,env,lex,state,output,len) {return sym[0] + ""},
R180_prd_productions=function (sym,env,lex,state,output,len) {return !sym[0].IMPORT_OVERRIDE || sym[0].IMPORT_APPEND ? env.productions.push(sym[0]) : 0},
R181_prd_productions=function (sym,env,lex,state,output,len) {return (env.refs.set(sym[0].id,sym[0]),null)},
R182_prd_productions=function (sym,env,lex,state,output,len) {return (sym[1].id = env.productions.length,!sym[1].IMPORT_OVERRIDE || sym[1].IMPORT_APPEND ? env.productions.push(sym[1]) : 0,env.productions)},
R183_prd_productions=function (sym,env,lex,state,output,len) {return (env.refs.set(sym[1].id,sym[1]),sym[0])},
C190_prd_production=function (sym,env,lex,state,output,len) {this.name = sym[1];this.bodies = sym[3];this.id = -1;env.functions.compileProduction(this);},
I191_prd_production=function (sym,env,lex,state,output,len) {env.host_lex = lex.copy(); env.prod_name = sym[sym.length - 1];},
C192_prd_production=function (sym,env,lex,state,output,len) {this.IMPORT_OVERRIDE = true;this.name = sym[1];this.bodies = sym[3];this.id = -1;env.functions.compileProduction(this);},
I193_prd_production=function (sym,env,lex,state,output,len) {env.host_lex = lex.copy(); env.prod_name = sym[sym.length - 1].name;},
C194_prd_production=function (sym,env,lex,state,output,len) {this.IMPORT_APPEND = true;this.name = sym[1];this.bodies = sym[3];this.id = -1;env.functions.compileProduction(this);},
R200_pb_production_bodies=function (sym,env,lex,state,output,len) {return (env.body_count++,[sym[0]])},
R201_pb_production_bodies=function (sym,env,lex,state,output,len) {return (env.body_count++,sym[0].push(sym[2]),sym[0])},
I202_pb_production_bodies=function (sym,env,lex,state,output,len) {env.host_lex = lex.copy()},
R203_pb_production_bodies=function (sym,env,lex,state,output,len) {return sym[0]},
C220_pb_entries=function (sym,env,lex,state,output,len) {this.body = sym[0];this.reduce = sym[1];this.err = sym[2];},
C221_pb_entries=function (sym,env,lex,state,output,len) {this.body = [];this.reduce = null;},
C222_pb_entries=function (sym,env,lex,state,output,len) {this.reduce = null;this.body = [sym[0]];},
C223_pb_entries=function (sym,env,lex,state,output,len) {this.body = sym[0];this.err = sym[1];},
C224_pb_entries=function (sym,env,lex,state,output,len) {this.body = sym[0];this.reduce = sym[1];},
C225_pb_entries=function (sym,env,lex,state,output,len) {this.body = sym[0];},
R230_pb_body_entries=function (sym,env,lex,state,output,len) {return (env.body_offset = 0,[sym[0]])},
R231_pb_body_entries=function (sym,env,lex,state,output,len) {return (env.body_offset = sym[0].length,sym[0].push(sym[1]),sym[0])},
R232_pb_body_entries=function (sym,env,lex,state,output,len) {return sym[1].map(e => (e.NO_BLANK = true,e))},
C240_pb_condition_clause=function (sym,env,lex,state,output,len) {this.type = "exc";this.sym = sym[2];this.offset = -1;},
C241_pb_condition_clause=function (sym,env,lex,state,output,len) {this.type = "err";this.sym = sym[2];this.offset = -1;},
C242_pb_condition_clause=function (sym,env,lex,state,output,len) {this.type = "ign";this.sym = sym[2];this.offset = -1;},
C250_cm_comment=function (sym,env,lex,state,output,len) {this.val = sym[1];},
C290_fn_referenced_function=function (sym,env,lex,state,output,len) {this.id = sym[1];this.name = sym[3];this.txt = "";this.env = true;},
C291_fn_referenced_function=function (sym,env,lex,state,output,len) {this.id = sym[1];this.txt = sym[3];this.env = false;this.name = "";},
C320_fn_error_function=function (sym,env,lex,state,output,len) {this.type = "ERROR";this.txt = sym[3];this.name = "";this.env = false;this.ref = "";},
C321_fn_error_function=function (sym,env,lex,state,output,len) {this.type = "ERROR";this.txt = "";this.name = sym[3];this.env = true;this.ref = "";},
C360_fn_reduce_function=function (sym,env,lex,state,output,len) {this.type = sym[1][0] == "c" ? "CLASS" : "RETURNED";this.txt = sym[3];this.name = "";this.env = false;this.ref = "";},
C361_fn_reduce_function=function (sym,env,lex,state,output,len) {this.type = sym[1][0] == "c" ? "CLASS" : "RETURNED";this.txt = "";this.name = sym[3];this.env = true;this.ref = "";},
C362_fn_reduce_function=function (sym,env,lex,state,output,len) {this.type = sym[1][0] == "c" ? "CLASS" : "RETURNED";this.ref = sym[3];this.txt = "";this.name = "";this.env = true;const ref = env.refs.get(this.ref);if(ref)if(Array.isArray(ref))ref.push(this); else {let ref = env.refs.get(this.ref);this.env = ref.env;this.name = ref.name;this.txt = ref.txt;} else env.refs.set(this.ref,[this]);},
C370_fn_function_clause=function (sym,env,lex,state,output,len) {this.type = "INLINE";this.txt = sym[2];this.name = "";this.env = false;},
C371_fn_function_clause=function (sym,env,lex,state,output,len) {this.type = "INLINE";this.txt = "";this.name = sym[2];this.env = true;},
R390_fn_js_data_block=function (sym,env,lex,state,output,len) {return sym[0] + sym[1] + sym[2]},
C510_sym_terminal_symbol=function (sym,env,lex,state,output,len) {this.type = "symbol";this.val = sym[0];},
R530_sym_symbol=function (sym,env,lex,state,output,len) {return (sym[0].IS_OPTIONAL = true,sym[0])},
C540_sym_EOF_symbol=function (sym,env,lex,state,output,len) {this.type = "eof";this.val = "$eof";},
C550_sym_empty_symbol=function (sym,env,lex,state,output,len) {this.type = "empty";},
C560_sym_generated_symbol=function (sym,env,lex,state,output,len) {this.type = "generated";this.val = sym[1];},
C570_sym_literal_symbol=function (sym,env,lex,state,output,len) {this.type = "literal";this.val = sym[1];},
C580_sym_escaped_symbol=function (sym,env,lex,state,output,len) {this.type = "escaped";this.val = sym[1];},
C590_sym_production_symbol=function (sym,env,lex,state,output,len) {this.type = "production";this.name = sym[0];this.val = -1;},

    //Sparse Map Lookup
    lsm = (index, map) => {    if (map[0] == 0xFFFFFFFF) return map[index+1];    for (let i = 1, ind = 0, l = map.length, n = 0; i < l && ind <= index; i++) {        if (ind !== index) {            if ((n = map[i]) > -1) ind++;            else ind += -n;        } else return map[i];    }    return -1;},

    //State Action Functions
    state_funct = [(...v)=>((redn(4099,0,...v))),
()=>(58),
()=>(62),
(...v)=>(redv(5,R00_hydrocarbon,1,0,...v)),
(...v)=>((redn(18435,0,...v))),
()=>(78),
()=>(82),
()=>(86),
(...v)=>(redn(4103,1,...v)),
(...v)=>(redv(3079,R31_pre_preamble101_group_list,1,0,...v)),
(...v)=>(redn(2055,1,...v)),
(...v)=>(redn(5127,1,...v)),
()=>(98),
()=>(102),
()=>(94),
()=>(114),
()=>(106),
()=>(110),
()=>(118),
()=>(134),
()=>(130),
()=>(138),
()=>(142),
(...v)=>(redv(1035,R10_head,2,0,...v)),
(...v)=>(redv(18439,R180_prd_productions,1,0,...v)),
(...v)=>(redv(18439,R181_prd_productions,1,0,...v)),
()=>(170),
()=>(178),
()=>(186),
(...v)=>(redv(3083,R30_pre_preamble101_group_list,2,0,...v)),
()=>(214),
()=>(218),
()=>(222),
()=>(226),
()=>(262),
()=>(282),
()=>(314),
()=>(306),
()=>(318),
()=>(334),
()=>(330),
()=>(338),
(...v)=>(redv(27655,R203_pb_production_bodies,1,0,...v)),
(...v)=>(redn(28679,1,...v)),
(...v)=>(redv(18443,R182_prd_productions,2,0,...v)),
(...v)=>(redv(18443,R00_hydrocarbon,2,0,...v)),
(...v)=>(redv(18443,R183_prd_productions,2,0,...v)),
(...v)=>(shftf(342,I191_prd_production,...v)),
(...v)=>(shftf(346,I193_prd_production,...v)),
(...v)=>(redn(62471,1,...v)),
(...v)=>(redn(63495,1,...v)),
()=>(350),
(...v)=>(shftf(354,I193_prd_production,...v)),
()=>(358),
()=>(362),
()=>(366),
(...v)=>(redn(46087,1,...v)),
(...v)=>(redv(45063,R31_pre_preamble101_group_list,1,0,...v)),
(...v)=>(redn(51207,1,...v)),
()=>(382),
()=>(386),
(...v)=>(redn(44039,1,...v)),
(...v)=>(redv(43015,R31_pre_preamble101_group_list,1,0,...v)),
(...v)=>(redn(47111,1,...v)),
()=>(402),
()=>(398),
(...v)=>(redn(50183,1,...v)),
()=>(406),
(...v)=>(redv(49159,R141_pre_import_preamble1802_group_list,1,0,...v)),
()=>(410),
(...v)=>(redn(52231,1,...v)),
(...v)=>(rednv(52231,C510_sym_terminal_symbol,1,0,...v)),
()=>(414),
()=>(418),
()=>(422),
()=>(430),
()=>(442),
(...v)=>(redv(12295,R31_pre_preamble101_group_list,1,0,...v)),
(...v)=>(redv(14343,R141_pre_import_preamble1802_group_list,1,0,...v)),
(...v)=>(redn(13319,1,...v)),
(...v)=>(rednv(25615,C250_cm_comment,3,0,...v)),
(...v)=>(redv(27659,R140_pre_import_preamble1802_group_list,2,0,...v)),
(...v)=>(redn(26631,1,...v)),
()=>(526),
()=>(510),
()=>(482),
()=>(506),
()=>(518),
()=>(522),
()=>(534),
()=>(558),
(...v)=>((redn(38915,0,...v))),
(...v)=>(rednv(8211,C80_pre_ignore_preamble,4,0,...v)),
(...v)=>(redv(45067,R30_pre_preamble101_group_list,2,0,...v)),
(...v)=>(rednv(57355,C560_sym_generated_symbol,2,0,...v)),
(...v)=>(rednv(58379,C570_sym_literal_symbol,2,0,...v)),
(...v)=>(rednv(59403,C580_sym_escaped_symbol,2,0,...v)),
(...v)=>(rednv(6163,C60_pre_symbols_preamble,4,0,...v)),
(...v)=>(redv(43019,R30_pre_preamble101_group_list,2,0,...v)),
(...v)=>(redv(47115,R203_pb_production_bodies,2,0,...v)),
(...v)=>(redn(48135,1,...v)),
(...v)=>(redv(49163,R140_pre_import_preamble1802_group_list,2,0,...v)),
()=>(562),
(...v)=>(rednv(10259,C100_pre_name_preamble,4,0,...v)),
(...v)=>(rednv(11283,C110_pre_ext_preamble,4,0,...v)),
(...v)=>(rednv(9235,C90_pre_error_preamble,4,0,...v)),
(...v)=>(redv(12299,R30_pre_preamble101_group_list,2,0,...v)),
()=>(574),
()=>(578),
()=>(582),
(...v)=>(redv(14347,R140_pre_import_preamble1802_group_list,2,0,...v)),
(...v)=>(redv(15367,R31_pre_preamble101_group_list,1,0,...v)),
(...v)=>(rednv(19475,C190_prd_production,4,0,...v)),
(...v)=>(shftf(586,I202_pb_production_bodies,...v)),
(...v)=>(redv(20487,R200_pb_production_bodies,1,0,...v)),
(...v)=>(rednv(21511,fn.body,1,0,...v)),
(...v)=>(rednv(22535,C225_pb_entries,1,0,...v)),
()=>(614),
(...v)=>(rednv(22535,C221_pb_entries,1,0,...v)),
(...v)=>(rednv(22535,C222_pb_entries,1,0,...v)),
(...v)=>(redv(23559,R230_pb_body_entries,1,0,...v)),
()=>(626),
()=>(630),
()=>(618),
(...v)=>(redn(54279,1,...v)),
()=>(642),
()=>(646),
()=>(650),
(...v)=>(rednv(54279,C510_sym_terminal_symbol,1,0,...v)),
(...v)=>(rednv(60423,C590_sym_production_symbol,1,0,...v)),
()=>(658),
()=>(654),
(...v)=>(rednv(56327,C550_sym_empty_symbol,1,0,...v)),
(...v)=>(rednv(55303,C540_sym_EOF_symbol,1,0,...v)),
(...v)=>(rednv(19475,C192_prd_production,4,0,...v)),
(...v)=>(rednv(61455,fn.importProduction,3,0,...v)),
(...v)=>(rednv(19475,C194_prd_production,4,0,...v)),
(...v)=>(rednv(29715,C290_fn_referenced_function,4,0,...v)),
()=>(662),
(...v)=>(redn(38919,1,...v)),
(...v)=>(rednv(7191,C70_pre_precedence_preamble,5,0,...v)),
()=>(678),
(...v)=>(redv(15371,R30_pre_preamble101_group_list,2,0,...v)),
(...v)=>(redn(16391,1,...v)),
(...v)=>(redv(20491,R203_pb_production_bodies,2,0,...v)),
(...v)=>(rednv(22539,C224_pb_entries,2,0,...v)),
()=>(690),
(...v)=>(rednv(22539,C223_pb_entries,2,0,...v)),
(...v)=>(redv(23563,R231_pb_body_entries,2,0,...v)),
()=>(730),
()=>(734),
()=>(714),
()=>(718),
()=>(722),
()=>(726),
(...v)=>(redv(54283,R530_sym_symbol,2,0,...v)),
()=>(742),
(...v)=>(redn(53255,1,...v)),
()=>(746),
()=>(750),
(...v)=>(rednv(29719,C291_fn_referenced_function,5,0,...v)),
(...v)=>(redv(38923,R140_pre_import_preamble1802_group_list,2,0,...v)),
()=>(782),
()=>(786),
()=>(790),
(...v)=>(redv(20495,R201_pb_production_bodies,3,0,...v)),
(...v)=>(rednv(22543,C220_pb_entries,3,0,...v)),
()=>(794),
()=>(798),
()=>(802),
()=>(806),
()=>(810),
(...v)=>(redn(34823,1,...v)),
(...v)=>(redn(33799,1,...v)),
(...v)=>(redn(35847,1,...v)),
(...v)=>(redn(31751,1,...v)),
(...v)=>(redn(30727,1,...v)),
()=>(814),
(...v)=>(rednv(54287,fn.listProduction,3,0,...v)),
(...v)=>(redv(23567,R232_pb_body_entries,3,0,...v)),
(...v)=>(rednv(54287,fn.groupProduction,3,0,...v)),
()=>(818),
(...v)=>(redn(41991,1,...v)),
(...v)=>(redv(40967,R31_pre_preamble101_group_list,1,0,...v)),
()=>(826),
()=>(830),
()=>(834),
(...v)=>(rednv(37903,C371_fn_function_clause,3,0,...v)),
(...v)=>(redv(39951,R390_fn_js_data_block,3,0,...v)),
()=>(838),
(...v)=>(redv(17439,fn.importData,7,0,...v)),
(...v)=>(rednv(54291,fn.listProduction,4,0,...v)),
(...v)=>(rednv(24595,C240_pb_condition_clause,4,0,...v)),
(...v)=>(redv(40971,R30_pre_preamble101_group_list,2,0,...v)),
(...v)=>(rednv(24595,C241_pb_condition_clause,4,0,...v)),
(...v)=>(rednv(24595,C242_pb_condition_clause,4,0,...v)),
(...v)=>(rednv(37907,C370_fn_function_clause,4,0,...v)),
(...v)=>(redv(17443,fn.importData,8,0,...v)),
()=>(862),
(...v)=>(rednv(36883,C361_fn_reduce_function,4,0,...v)),
(...v)=>(rednv(36883,C362_fn_reduce_function,4,0,...v)),
()=>(866),
(...v)=>(rednv(32787,C321_fn_error_function,4,0,...v)),
(...v)=>(rednv(36887,C360_fn_reduce_function,5,0,...v)),
(...v)=>(rednv(32791,C320_fn_error_function,5,0,...v))],

    //Goto Lookup Functions
    goto = [v=>lsm(v,gt0),
nf,
v=>lsm(v,gt1),
v=>lsm(v,gt2),
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt3),
v=>lsm(v,gt4),
nf,
nf,
v=>lsm(v,gt5),
v=>lsm(v,gt6),
v=>lsm(v,gt7),
nf,
v=>lsm(v,gt8),
v=>lsm(v,gt9),
v=>lsm(v,gt10),
v=>lsm(v,gt11),
v=>lsm(v,gt12),
v=>lsm(v,gt13),
v=>lsm(v,gt14),
v=>lsm(v,gt15),
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt16),
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt17),
v=>lsm(v,gt18),
nf,
nf,
v=>lsm(v,gt19),
nf,
nf,
nf,
nf,
v=>lsm(v,gt20),
nf,
nf,
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt21),
nf,
nf,
v=>lsm(v,gt22),
v=>lsm(v,gt23),
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt24),
v=>lsm(v,gt25),
nf,
v=>lsm(v,gt26),
v=>lsm(v,gt27),
v=>lsm(v,gt28),
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt29),
nf,
v=>lsm(v,gt30),
nf,
nf,
v=>lsm(v,gt31),
nf,
nf,
v=>lsm(v,gt32),
nf,
nf,
v=>lsm(v,gt33),
nf,
nf,
v=>lsm(v,gt34),
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt35),
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt31),
nf,
v=>lsm(v,gt31),
nf,
v=>lsm(v,gt36),
v=>lsm(v,gt21),
nf,
v=>lsm(v,gt37),
nf,
v=>lsm(v,gt38),
nf,
nf,
nf,
nf,
v=>lsm(v,gt39),
nf,
v=>lsm(v,gt40),
nf,
nf,
nf,
v=>lsm(v,gt33),
v=>lsm(v,gt41),
nf,
v=>lsm(v,gt42),
nf,
nf,
v=>lsm(v,gt43),
v=>lsm(v,gt31),
v=>lsm(v,gt44),
v=>lsm(v,gt45),
v=>lsm(v,gt46),
v=>lsm(v,gt47),
v=>lsm(v,gt48),
nf,
v=>lsm(v,gt36),
v=>lsm(v,gt36),
nf,
nf,
nf,
nf,
v=>lsm(v,gt49),
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt50),
nf,
nf,
nf,
v=>lsm(v,gt36),
nf,
nf,
nf,
nf,
v=>lsm(v,gt51),
v=>lsm(v,gt52),
v=>lsm(v,gt53),
v=>lsm(v,gt54),
v=>lsm(v,gt55),
nf,
nf,
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt36),
nf,
nf,
v=>lsm(v,gt36),
nf,
nf,
nf];

function getToken(l, SYM_LU) {
    if (l.END) return 0; /*13*/

    switch (l.ty) {
        case 2:
            if (SYM_LU.has(l.tx)) return SYM_LU.get(l.tx);
            return 2;
        case 1:
            return 1;
        case 4:
            return 3;
        case 256:
            return 9;
        case 8:
            return 4;
        case 512:
            return 10;
        default:
            return SYM_LU.get(l.tx) || SYM_LU.get(l.ty);
    }
}

/************ Parser *************/

function parser(l, e = {}) {
    
    fn = e.functions;

    l.IWS = false;
    l.PARSE_STRING = true;

    if (symbols.length > 0) {
        symbols.forEach(s => { l.addSymbol(s) });
        l.tl = 0;
        l.next();
    }

    const o = [],
        ss = [0, 0];

    let time = 1000000,
        RECOVERING = 100,
        tk = getToken(l, lu),
        p = l.copy(),
        sp = 1,
        len = 0,
        off = 0,
        reduceStack = (e.reduceStack = []);


    outer:

        while (time-- > 0) {

            const fn = lsm(tk, state[ss[sp]]) || 0;

            /*@*/// console.log({end:l.END, state:ss[sp], tx:l.tx, ty:l.ty, tk:tk, rev:rlu.get(tk), s_map:state[ss[sp]], res:lsm(tk, state[ss[sp]])});

            let r,
                gt = -1;

            if (fn == 0) {
                /*Ignore the token*/
                l.next();
                tk = getToken(l, lu);
                continue;
            }

            if (fn > 0) {
                r = state_funct[fn - 1](tk, e, o, l, ss[sp - 1]);
            } else {
                
                if(l.ty == 8 && l.tl > 1){ 
                    // Make sure that special tokens are not getting in the way
                    l.tl = 0;
                    // This will skip the generation of a custom symbol
                    l.next(l, false);

                    if(l.tl == 0)
                        continue;
                }

                if (RECOVERING > 1 && !l.END) {

                    if (tk !== lu.get(l.ty)) {
                        //console.log("ABLE", rlu.get(tk), l.tx, tk )
                        tk = lu.get(l.ty);
                        continue;
                    }

                    if (tk !== 13) {
                        //console.log("MABLE")
                        tk = 13;
                        RECOVERING = 1;
                        continue;
                    }
                }

                tk = getToken(l, lu);

                const recovery_token = eh[ss[sp]](tk, e, o, l, p, ss[sp], lu);

                if (RECOVERING > 0 && recovery_token) {
                    RECOVERING = -1; /* To prevent infinite recursion */
                    tk = recovery_token;
                    l.tl = 0; /*reset current token */
                    continue;
                }
            }

            switch (r & 3) {
                case 0:
                    /* ERROR */

                    if (tk == "$eof")
                        l.throw("Unexpected end of input");
                    l.throw(`Unexpected token [${RECOVERING ? l.next().tx : l.tx}]`);
                    return [null];

                case 1:
                    /* ACCEPT */
                    break outer;

                case 2:
                    /*SHIFT */
                    o.push(l.tx);
                    ss.push(off, r >> 2);
                    sp += 2;
                    p.sync(l);
                    l.next();
                    off = l.off;
                    tk = getToken(l, lu);
                    RECOVERING++;
                    break;

                case 3:
                    /* REDUCE */

                    len = (r & 0x3FC) >> 1;

                    ss.length -= len;
                    sp -= len;
                    gt = goto[ss[sp]](r >> 10);

                    if (gt < 0)
                        l.throw("Invalid state reached!");

                    if(reduceStack.length > 0){
                        let i = reduceStack.length -1;
                        while(i > -1){
                            let item = reduceStack[i--];

                            if(item.index == sp){
                                item.action(output)
                            }else if(item.index > sp){
                                reduceStack.length--;
                            }else{
                                break;
                            }
                        }
                    }

                    ss.push(off, gt);
                    sp += 2;
                    break;
            }
        }
    return o[0];
}; export default parser;