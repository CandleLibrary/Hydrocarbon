let fn = {}; const 
/************** Maps **************/

    /* Symbols To Inject into the Lexer */
    symbols = ["((","))","<>","+>","=>","(*","(+","::","$eof"],

    /* Goto lookup maps */
    gt0 = [0,-1,1,4,3,2,5,7,8,6,11,9,10,-5,12,13],
gt1 = [0,-53,16,17,-5,18],
gt2 = [0,-2,22,-2,5,7,8,6,11,9,10,-5,12,13],
gt3 = [0,-20,30,31],
gt4 = [0,-18,37,-35,36,-5,38],
gt5 = [0,-42,40,39,42,-3,41],
gt6 = [0,-42,46,47,42,-3,41],
gt7 = [0,-44,42,-3,48],
gt8 = [0,-26,50,49,-4,51,-5,52,53,54],
gt9 = [0,-24,60,59,-2,61,-1,66,65,-6,62,63,64],
gt10 = [0,-33,68,-4,69,70,71],
gt11 = [0,-20,73,31],
gt12 = [0,-44,42,-3,74],
gt13 = [0,-26,50,75,-4,51,-5,52,53,54],
gt14 = [0,-13,79,77,76],
gt15 = [0,-19,82,-1,83],
gt16 = [0,-45,92,90,91],
gt17 = [0,-32,104,-5,52,53,54],
gt18 = [0,-44,42,-3,105],
gt19 = [0,-44,42,-3,106],
gt20 = [0,-28,109,-1,66,65,-6,62,63,64],
gt21 = [0,-29,110],
gt22 = [0,-21,83],
gt23 = [0,-13,79,118],
gt24 = [0,-13,121,-1,120],
gt25 = [0,-35,128,127,126,132,135,136,133,134,47,42,-3,139,-6,122,123,124,125,129,-5,130],
gt26 = [0,-44,42,-3,143],
gt27 = [0,-35,128,127,126,132,135,136,133,134,47,42,-3,139,-6,144,123,124,125,129,-5,130],
gt28 = [0,-45,146,-1,145],
gt29 = [0,-35,128,127,126,132,135,136,133,134,47,42,-3,139,-6,147,123,124,125,129,-5,130],
gt30 = [0,-49,149,-2,148],
gt31 = [0,-20,154,31,-44,153,155],
gt32 = [0,-13,121,-1,158],
gt33 = [0,-16,159],
gt34 = [0,-18,163],
gt35 = [0,-35,168,-2,132,135,136,133,134,47,42,-3,139,-10,167,-2,165,-1,164,166],
gt36 = [0,-34,171],
gt37 = [0,-35,128,-2,132,135,136,133,134,47,42,-3,139,-9,174,129,-5,130],
gt38 = [0,-35,128,127,126,132,135,136,133,134,47,42,-3,139,-6,175,123,124,125,129,-5,130],
gt39 = [0,-47,184,-2,185,183],
gt40 = [0,-20,154,31,-44,191,155],
gt41 = [0,-20,154,31,-44,192,155],
gt42 = [0,-16,193],
gt43 = [0,-44,42,-3,194],
gt44 = [0,-35,128,127,126,132,135,136,133,134,47,42,-3,139,-7,195,124,125,129,-5,130],
gt45 = [0,-62,196],
gt46 = [0,-61,199,-1,198],
gt47 = [0,-33,206,-4,69,70,71],
gt48 = [0,-35,168,-2,132,135,136,133,134,47,42,-3,139,-10,167,-5,166],
gt49 = [0,-22,211,210,-9,212,-4,69,70,71],
gt50 = [0,-22,211,213,-9,212,-4,69,70,71],
gt51 = [0,-22,211,214,-9,212,-4,69,70,71],
gt52 = [0,-22,211,215,-9,212,-4,69,70,71],
gt53 = [0,-35,216,-2,132,135,136,133,134,47,42,-3,139],
gt54 = [0,-20,154,31,-44,218,155],
gt55 = [0,-49,149,-2,219],
gt56 = [0,-47,220,-2,221],
gt57 = [0,-44,42,-3,223],
gt58 = [0,-61,199],
gt59 = [0,-33,232,-4,69,70,71],
gt60 = [0,-20,154,31,-44,239,155],
gt61 = [0,-49,149,-2,240],
gt62 = [0,-49,149,-2,241],
gt63 = [0,-20,154,31,-44,242,155],
gt64 = [0,-49,149,-2,243],

    // State action lookup maps
    sm0=[0,1,-3,0,-4,0,-5,2,-14,3,-17,1,-1,1,-8,1],
sm1=[0,4,-3,0,-4,0],
sm2=[0,5,-3,0,-4,0,-20,5,-17,6,-1,7,-8,8],
sm3=[0,9,-3,0,-4,0,-5,2,-14,3,-17,9,-1,9,-8,9],
sm4=[0,10,-3,0,-4,0,-5,10,-14,10,-17,10,-1,10,-8,10],
sm5=[0,11,-3,0,-4,0,-5,11,-14,11,-17,11,-1,11,-8,11],
sm6=[0,12,-3,0,-4,0,-5,12,-14,12,-17,12,-1,12,-8,12],
sm7=[0,-4,-1,-4,0,-6,13,-2,14,-1,15,16,17,18,-4,19],
sm8=[0,-1,20,21,-1,22,-4,0,-3,23],
sm9=[0,24,-3,0,-4,0,-20,3,-17,6,-1,7,-8,8],
sm10=[0,25,-3,0,-4,0,-20,25,-17,25,-1,25,-8,25],
sm11=[0,26,-3,0,-4,0,-20,26,-17,26,-1,26,-8,26],
sm12=[0,-1,27,28,-1,0,-4,0,-34,29],
sm13=[0,30,-3,0,-4,0,-5,30,-14,30,-17,30,-1,30,-8,30],
sm14=[0,-4,0,-4,0,-3,31,-26,32,33,34],
sm15=[0,-4,0,-4,0,-3,35,-26,32,33,34],
sm16=[0,-4,0,-4,0,-3,36,-26,32,33,34],
sm17=[0,-2,37,-1,38,-4,0,-3,39],
sm18=[0,40,20,21,-1,22,-4,41,-3,23,-18,42],
sm19=[0,43,43,43,-1,43,-4,43,-3,43,-18,43,-28,43,43],
sm20=[0,44,44,44,-1,44,-4,44,-3,44,-18,44,-28,44,44],
sm21=[0,45,-3,0,-4,0,-20,45,-17,45,-1,45,-8,45],
sm22=[0,46,-3,0,-4,0,-20,46,-17,46,-1,46,-8,46],
sm23=[0,47,-3,0,-4,0,-20,47,-17,47,-1,47,-8,47],
sm24=[0,-4,0,-4,0,-33,48,-5,49],
sm25=[0,-4,0,-4,0,-39,50],
sm26=[0,-4,0,-4,0,-33,51,-5,51],
sm27=[0,52,-1,53,-1,54,-4,55,-3,52,-16,52,-2,52,52,52,52,52,-2,52,52,52,52,56,57,58,59,52,52,52,52,-1,52,-5,52,52,52],
sm28=[0,60,-1,60,-1,60,-4,60,-3,60,-16,60,-2,60,60,60,60,60,-2,60,60,60,60,60,60,60,60,60,60,60,60,-1,60,-5,60,60,60],
sm29=[0,-4,0,-4,0,-39,61],
sm30=[0,-4,0,-4,0,-33,48],
sm31=[0,-4,0,-4,0,-50,62,63],
sm32=[0,-4,0,-4,64],
sm33=[0,-4,0,-4,65,-3,31,-26,32,33,34],
sm34=[0,-4,0,-4,66,-3,66,-26,66,66,66],
sm35=[0,-4,0,-4,67,-3,67,-26,67,67,67],
sm36=[0,-1,27,28,-1,-1,-4,-1,-34,29],
sm37=[0,-4,-1,-4,-1,-3,68],
sm38=[0,-4,0,-4,69],
sm39=[0,-4,0,-4,70,-3,35,-26,32,33,34],
sm40=[0,-4,0,-4,71,-3,71,-26,71,71,71],
sm41=[0,-4,0,-4,72,-3,72,-26,72,72,72],
sm42=[0,-4,73,-4,74],
sm43=[0,-4,75,-4,75,-3,76],
sm44=[0,-4,77,-4,77,-3,77],
sm45=[0,-1,78,-2,0,-4,0],
sm46=[0,-1,79,-2,0,-4,0,-3,79,-22,79,-3,79,79,79],
sm47=[0,-1,80,-2,0,-4,0,-3,80,-22,80,-3,80,80,80],
sm48=[0,-1,20,21,-1,22,-4,81,-3,23],
sm49=[0,-4,0,-4,82],
sm50=[0,-4,0,-4,83],
sm51=[0,-2,37,-1,84,-4,0,-3,39],
sm52=[0,-2,85,-1,85,-4,0,-3,85,-13,85,85],
sm53=[0,-2,86,-1,86,-4,0,-3,86],
sm54=[0,-2,87,-1,87,-4,0,-3,87],
sm55=[0,88,-3,0,-4,0,-5,88,-14,88,-5,88,-11,88,-1,88,88,-7,88],
sm56=[0,89,89,89,-1,89,-4,89,-3,89,-18,89,-28,89,89],
sm57=[0,90,-3,0,-4,0,-5,90,-14,90,-5,90,-11,90,-1,90,90,-7,90],
sm58=[0,91,27,28,-1,0,-4,0,-3,92,-21,93,-3,94,32,33,34,-1,29,-7,95,-6,96],
sm59=[0,97,-1,53,-1,54,-4,55,-3,97,-16,97,-2,97,97,97,97,97,-2,97,97,97,97,56,57,58,59,97,97,97,97,-1,97,-5,97,97,97],
sm60=[0,98,98,98,-1,0,-4,98,-3,98,-16,98,-2,98,98,98,98,98,-2,98,98,98,98,98,-3,98,98,98,98,-1,98,-5,98,98,98],
sm61=[0,99,-1,99,-1,99,-4,99,-3,99,-16,99,-2,99,99,99,99,99,-2,99,99,99,99,99,99,99,99,99,99,99,99,-1,99,-5,99,99,99],
sm62=[0,100,-1,100,-1,100,-4,100,-3,100,-16,100,-2,100,100,100,100,100,-2,100,100,100,100,100,100,100,100,100,100,100,100,-1,100,-5,100,100,100],
sm63=[0,101,101,101,-1,0,-4,101,-3,101,-16,101,-2,101,101,101,101,101,-2,101,101,101,101,101,-3,101,101,101,101,-1,101,-5,101,101,101],
sm64=[0,-2,102,-1,-1,-4,0,-34,103,-1,104],
sm65=[0,-1,20,21,-1,22,-4,0,-3,23,-47,105,106],
sm66=[0,107,-3,0,-4,0,-5,107,-14,107,-17,107,-1,107,-8,107],
sm67=[0,-4,0,-4,108,-3,108,-26,108,108,108],
sm68=[0,109,109,109,-1,0,-4,109,-3,109,-16,109,-2,109,109,109,109,109,-2,109,109,109,-1,109,-3,109,-1,109,109,-1,109,-5,109],
sm69=[0,110,110,110,-1,0,-4,110,-3,110,-16,110,-2,110,110,110,110,110,-2,110,110,110,-1,110,-3,110,-1,110,110,-1,110,-5,110],
sm70=[0,111,111,111,-1,0,-4,111,-3,111,-16,111,-2,111,111,111,111,111,-2,111,111,111,-1,111,-3,111,-1,111,111,-1,111,-5,111],
sm71=[0,112,-3,0,-4,0,-5,112,-14,112,-17,112,-1,112,-8,112],
sm72=[0,-4,0,-4,113,-3,113,-26,113,113,113],
sm73=[0,-4,0,-4,114,-3,114,-26,114,114,114],
sm74=[0,-4,0,-4,115,-3,115,-26,115,115,115],
sm75=[0,-4,116,-4,116,-3,116],
sm76=[0,-4,0,-4,117],
sm77=[0,118,-3,0,-4,0,-5,118,-14,118,-17,118,-1,118,-8,118],
sm78=[0,119,-3,0,-4,0,-5,119,-14,119,-17,119,-1,119,-8,119],
sm79=[0,120,-3,0,-4,0,-5,120,-14,120,-17,120,-1,120,-8,120],
sm80=[0,-2,121,-1,121,-4,0,-3,121,-13,121,121],
sm81=[0,-4,84,-4,0,-17,122,123],
sm82=[0,-2,124,-1,124,-4,0,-3,124],
sm83=[0,125,-3,0,-4,0,-20,3,-17,125,-1,125,126,-7,125],
sm84=[0,127,-3,0,-4,0,-20,127,-5,127,-11,127,-1,127,127,-7,127],
sm85=[0,128,-3,0,-4,0,-20,128,-5,128,-11,128,-1,128,128,-7,128],
sm86=[0,129,27,28,-1,0,-4,0,-3,92,-16,129,-4,93,129,-3,32,33,34,-1,29,-3,129,-1,129,129,-7,130],
sm87=[0,131,-3,0,-4,0,-20,131,-5,131,-11,131,-1,131,131,-7,131],
sm88=[0,132,-3,0,-4,0,-20,132,-5,132,-11,132,-1,132,132,-7,132],
sm89=[0,133,133,133,-1,0,-4,0,-3,133,-16,133,-2,134,135,133,133,136,-2,133,133,133,-1,133,-3,133,-1,133,133,-1,133,-5,133],
sm90=[0,133,133,133,-1,0,-4,0,-3,133,-16,133,-4,133,133,-3,133,133,133,-1,133,-3,133,-1,133,133,-1,133,-5,133],
sm91=[0,-1,27,28,-1,0,-4,0,-3,92,-21,93,-4,32,33,34,-1,29,-7,95,-6,96],
sm92=[0,137,137,137,-1,0,-4,0,-3,137,-16,137,-2,137,137,137,137,137,-2,137,137,137,-1,137,-3,137,-1,137,137,-1,137,-5,137],
sm93=[0,91,27,28,-1,0,-4,0,-3,92,-21,93,-3,94,32,33,34,-1,29,-7,95,-1,138,139,140,141,142,96],
sm94=[0,143,143,143,-1,0,-4,0,-3,143,-16,143,-2,143,143,143,143,143,-2,143,143,143,-1,143,-3,143,-1,143,143,-1,143,-5,143],
sm95=[0,144,144,144,-1,0,-4,0,-3,144,-16,144,-2,144,144,144,144,144,-2,144,144,144,51,144,-3,144,-1,144,144,-1,144,-5,144],
sm96=[0,-4,0,-4,0,-50,145,146],
sm97=[0,147,-3,0,-4,0,-20,147,-5,147,-11,147,-1,147,147,-7,147],
sm98=[0,148,-3,0,-4,0,-20,148,-5,148,-11,148,-1,148,148,-7,148],
sm99=[0,149,149,149,-1,0,-4,0,-3,149,-16,149,-2,149,149,149,149,149,-2,149,149,149,-1,149,-3,149,149,149,149,-1,149,-5,149],
sm100=[0,150,-3,0,-4,0,-20,3,-17,150,-1,150,126,-7,150],
sm101=[0,151,151,151,-1,0,-4,151,-3,151,-16,151,-2,151,151,151,151,151,-2,151,151,151,151,151,-3,151,151,151,151,-1,151,-5,151,151,151],
sm102=[0,152,-1,152,-1,152,-4,152,-3,152,-16,152,-2,152,152,152,152,152,-2,152,152,152,152,152,152,152,152,152,152,152,152,-1,152,-5,152,152,152],
sm103=[0,153,-3,0,-4,0,-20,3,-17,153,-1,153,126,-7,153],
sm104=[0,154,-3,0,-4,0,-20,154,-17,154,-1,154,-8,154],
sm105=[0,155,-1,156,-1,54,-4,55,-3,155,-16,155,-4,155,155,-3,155,155,155,-1,157,-1,158,159,155,-1,155,155,-1,155,-5,155],
sm106=[0,160,-1,160,-1,160,-4,160,-3,160,-16,160,-4,160,160,-3,160,160,160,-1,160,-1,160,160,160,-1,160,160,-1,160,-5,160],
sm107=[0,-1,20,21,-1,22,-4,0,-3,23,-47,105,161],
sm108=[0,-1,20,21,-1,22,-4,0,-3,23,-47,162,162],
sm109=[0,-1,162,162,-1,162,-4,0,-3,162,-47,162,162],
sm110=[0,163,-3,0,-4,0,-5,163,-14,163,-17,163,-1,163,-8,163],
sm111=[0,-1,164,164,-1,0,-4,0,-34,164],
sm112=[0,165,-3,0,-4,0,-20,165,-5,165,-11,165,-1,165,165,-7,165],
sm113=[0,166,-3,0,-4,0,-20,166,-5,166,-11,166,-1,166,166,-7,167],
sm114=[0,168,-3,0,-4,0,-20,168,-5,168,-11,168,-1,168,168,-7,168],
sm115=[0,169,169,169,-1,0,-4,0,-3,169,-16,169,-4,169,169,-3,169,169,169,-1,169,-3,169,-1,169,169,-1,169,-5,169],
sm116=[0,169,169,169,-1,0,-4,0,-3,169,-16,169,-2,134,135,169,169,136,-2,169,169,169,-1,169,-3,169,-1,169,169,-1,169,-5,169],
sm117=[0,-4,0,-4,0,-50,145,146,-1,170,171,172,173,174,175],
sm118=[0,176,176,176,-1,0,-4,0,-3,176,-16,176,-2,176,176,176,176,176,-2,176,176,176,-1,176,-3,176,-1,176,176,-1,176,-5,176],
sm119=[0,-4,0,-4,0,-3,36,-22,177,-3,32,33,34],
sm120=[0,-4,0,-4,0,-3,178,-22,178,-3,178,178,178],
sm121=[0,-1,27,28,-1,0,-4,0,-3,92,-21,93,-4,32,33,34,-1,29,-8,179,-5,96],
sm122=[0,-4,0,-4,0,-20,3,-5,180,-14,126],
sm123=[0,-1,27,28,-1,0,-4,0,-3,92,-21,181,-4,32,33,34,-1,29],
sm124=[0,-2,102,-1,-1,-4,-1,-34,103,-1,104],
sm125=[0,182,-1,156,-1,54,-4,55,-3,182,-16,182,-4,182,182,-3,182,182,182,-1,157,-1,158,159,182,-1,182,182,-1,182,-5,182],
sm126=[0,183,183,183,-1,0,-4,0,-3,183,-16,183,-4,183,183,-3,183,183,183,-1,183,-3,183,-1,183,183,-1,183,-5,183],
sm127=[0,184,-1,184,-1,184,-4,184,-3,184,-16,184,-4,184,184,-3,184,184,184,-1,184,-1,184,184,184,-1,184,184,-1,184,-5,184],
sm128=[0,185,-1,185,-1,185,-4,185,-3,185,-16,185,-4,185,185,-3,185,185,185,-1,185,-1,185,185,185,-1,185,185,-1,185,-5,185],
sm129=[0,186,-3,0,-4,0,-20,186,-17,186,-1,186,-8,186],
sm130=[0,-1,20,21,-1,22,-4,0,-3,23,-47,105,187],
sm131=[0,-1,20,21,-1,22,-4,0,-3,23,-47,105,188],
sm132=[0,-4,0,-4,189],
sm133=[0,190,-3,0,-4,0,-20,190,-5,190,-11,190,-1,190,190,-7,190],
sm134=[0,191,-3,0,-4,0,-20,191,-5,191,-11,191,-1,191,191,-7,191],
sm135=[0,-4,0,-4,0,-53,170,171],
sm136=[0,-4,0,-4,0,-50,192,193,-7,194],
sm137=[0,-4,0,-4,0,-50,195,196],
sm138=[0,-4,0,-4,0,-50,197,197,-7,197],
sm139=[0,-4,0,-4,0,-50,198,198],
sm140=[0,-4,0,-4,0,-26,199],
sm141=[0,200,200,200,-1,0,-4,0,-3,200,-16,200,-2,200,200,200,200,200,-2,200,200,200,-1,200,-3,200,-1,200,200,-1,200,-5,200],
sm142=[0,201,201,201,-1,0,-4,0,-3,201,-16,201,-4,201,201,-3,201,201,201,-1,201,-3,201,-1,201,201,-1,201,-5,201],
sm143=[0,202,202,202,-1,0,-4,0,-3,202,-16,202,-2,202,202,202,202,202,-2,202,202,202,-1,202,-3,202,-1,202,202,-1,202,-5,202],
sm144=[0,-4,0,-4,0,-26,203],
sm145=[0,-4,0,-4,0,-3,36,-22,204,-3,32,33,34],
sm146=[0,-4,0,-4,0,-3,205,-22,205,-3,205,205,205],
sm147=[0,-4,0,-4,0,-26,206],
sm148=[0,-4,0,-4,0,-26,207],
sm149=[0,-4,0,-4,0,-26,208],
sm150=[0,-4,0,-4,0,-23,134,135,-1,209,136],
sm151=[0,-1,20,21,-1,22,-4,0,-3,23,-47,105,210],
sm152=[0,211,211,211,-1,0,-4,0,-3,211,-16,211,-4,211,211,-3,211,211,211,-1,211,-3,211,-1,211,211,-1,211,-5,211],
sm153=[0,212,212,212,-1,0,-4,0,-3,212,-16,212,-4,212,212,-3,212,212,212,-1,212,-3,212,-1,212,212,-1,212,-5,212],
sm154=[0,213,-1,213,-1,213,-4,213,-3,213,-16,213,-4,213,213,-3,213,213,213,-1,213,-1,213,213,213,-1,213,213,-1,213,-5,213],
sm155=[0,-1,214,214,-1,214,-4,0,-3,214,-47,214,214],
sm156=[0,-4,0,-4,215],
sm157=[0,216,-3,0,-4,0,-5,216,-14,216,-17,216,-1,216,-8,216],
sm158=[0,-2,102,-1,0,-4,0,-34,103,-1,104],
sm159=[0,217,217,217,-1,0,-4,0,-3,217,-16,217,-2,217,217,217,217,217,-2,217,217,217,-1,217,-3,217,-1,217,217,-1,217,-5,217],
sm160=[0,218,218,218,-1,0,-4,0,-3,218,-16,218,-4,218,218,-3,218,218,218,-1,218,-3,218,-1,218,218,-1,218,-5,218],
sm161=[0,-4,0,-4,0,-3,219,-22,219,-3,219,219,219],
sm162=[0,220,220,220,-1,0,-4,0,-3,220,-16,220,-4,220,220,-3,220,220,220,-1,220,-3,220,-1,220,220,-1,220,-5,220],
sm163=[0,221,221,221,-1,0,-4,0,-3,221,-16,221,-4,221,221,-3,221,221,221,-1,221,-3,221,-1,221,221,-1,221,-5,221],
sm164=[0,222,222,222,-1,0,-4,0,-3,222,-16,222,-4,222,222,-3,222,222,222,-1,222,-3,222,-1,222,222,-1,222,-5,222],
sm165=[0,223,223,223,-1,0,-4,0,-3,223,-16,223,-4,223,223,-3,223,223,223,-1,223,-3,223,-1,223,223,-1,223,-5,223],
sm166=[0,224,224,224,-1,0,-4,0,-3,224,-16,224,-4,224,224,-3,224,224,224,-1,224,-3,224,-1,224,224,-1,224,-5,224],
sm167=[0,225,-3,0,-4,0,-5,225,-14,225,-17,225,-1,225,-8,225],
sm168=[0,-1,20,21,-1,22,-4,0,-3,23,-47,105,226],
sm169=[0,227,-3,0,-4,0,-20,227,-5,227,-11,227,-1,227,227,-7,227],
sm170=[0,228,-3,0,-4,0,-20,228,-5,228,-11,228,-1,228,228,-7,228],
sm171=[0,-1,20,21,-1,22,-4,0,-3,23,-47,105,229],
sm172=[0,230,-3,0,-4,0,-20,230,-5,230,-11,230,-1,230,230,-7,230],
sm173=[0,231,-3,0,-4,0,-20,231,-5,231,-11,231,-1,231,231,-7,231],
sm174=[0,232,-3,0,-4,0,-20,232,-5,232,-11,232,-1,232,232,-7,232],

    // Symbol Lookup map
    lu = new Map([[1,1],[2,2],[4,3],[8,4],[16,5],[32,6],[64,7],[128,8],[256,9],[512,10],[3,11],[264,11],[200,13],[201,14],["@",15],["SYMBOL",16],[null,13],["PREC",19],["IGNORE",21],["ERROR",22],["NAME",23],["EXT",24],["AS",27],["as",28],["IMPORT",29],["#",30],["$eof",38],[";",32],["(+",33],["(*",34],["(",35],[")",36],["?",37],["ɛ",39],["θ",40],["τ",41],["\\",42],["::",43],["_",44],["-",45],["$",46],["num",47],["<>",48],["→",49],["+>",50],["│",51],["[",52],["]",53],["EXC",54],["ERR",55],["IGN",56],["RST",57],["RED",58],["↦",59],["^",60],["{",61],["}",62],["err",63],["e",64],["cstr",65],["c",66],["return",67],["r",68],["=>",69]]),

    //Reverse Symbol Lookup map
    rlu = new Map([[1,1],[2,2],[3,4],[4,8],[5,16],[6,32],[7,64],[8,128],[9,256],[10,512],[11,3],[11,264],[13,200],[14,201],[15,"@"],[16,"SYMBOL"],[13,null],[19,"PREC"],[21,"IGNORE"],[22,"ERROR"],[23,"NAME"],[24,"EXT"],[27,"AS"],[28,"as"],[29,"IMPORT"],[30,"#"],[38,"$eof"],[32,";"],[33,"(+"],[34,"(*"],[35,"("],[36,")"],[37,"?"],[39,"ɛ"],[40,"θ"],[41,"τ"],[42,"\\"],[43,"::"],[44,"_"],[45,"-"],[46,"$"],[47,"num"],[48,"<>"],[49,"→"],[50,"+>"],[51,"│"],[52,"["],[53,"]"],[54,"EXC"],[55,"ERR"],[56,"IGN"],[57,"RST"],[58,"RED"],[59,"↦"],[60,"^"],[61,"{"],[62,"}"],[63,"err"],[64,"e"],[65,"cstr"],[66,"c"],[67,"return"],[68,"r"],[69,"=>"]]),

    // States 
    state = [sm0,
sm1,
sm2,
sm3,
sm4,
sm5,
sm6,
sm6,
sm6,
sm6,
sm6,
sm6,
sm6,
sm6,
sm7,
sm8,
sm9,
sm10,
sm11,
sm12,
sm12,
sm12,
sm13,
sm14,
sm15,
sm16,
sm8,
sm12,
sm14,
sm17,
sm18,
sm19,
sm20,
sm20,
sm20,
sm20,
sm21,
sm22,
sm23,
sm24,
sm25,
sm26,
sm27,
sm28,
sm28,
sm28,
sm29,
sm30,
sm31,
sm32,
sm33,
sm34,
sm35,
sm35,
sm35,
sm35,
sm36,
sm36,
sm37,
sm38,
sm39,
sm40,
sm41,
sm41,
sm41,
sm42,
sm43,
sm44,
sm45,
sm46,
sm46,
sm46,
sm47,
sm48,
sm49,
sm50,
sm51,
sm17,
sm52,
sm53,
sm54,
sm54,
sm55,
sm56,
sm57,
sm57,
sm57,
sm58,
sm12,
sm58,
sm59,
sm60,
sm61,
sm62,
sm62,
sm62,
sm62,
sm62,
sm63,
sm63,
sm58,
sm64,
sm65,
sm66,
sm67,
sm68,
sm69,
sm70,
sm71,
sm72,
sm73,
sm74,
sm74,
sm75,
sm76,
sm77,
sm78,
sm79,
sm17,
sm80,
sm81,
sm82,
sm83,
sm84,
sm85,
sm86,
sm87,
sm88,
sm89,
sm90,
sm90,
sm91,
sm92,
sm92,
sm92,
sm92,
sm92,
sm93,
sm94,
sm95,
sm96,
sm97,
sm98,
sm99,
sm100,
sm101,
sm102,
sm103,
sm104,
sm105,
sm106,
sm106,
sm106,
sm107,
sm108,
sm109,
sm65,
sm110,
sm81,
sm12,
sm111,
sm111,
sm58,
sm112,
sm113,
sm114,
sm115,
sm115,
sm116,
sm117,
sm118,
sm119,
sm120,
sm120,
sm121,
sm122,
sm16,
sm16,
sm16,
sm16,
sm123,
sm65,
sm124,
sm125,
sm126,
sm127,
sm128,
sm128,
sm128,
sm128,
sm129,
sm130,
sm131,
sm12,
sm132,
sm133,
sm134,
sm135,
sm136,
sm137,
sm138,
sm138,
sm138,
sm138,
sm139,
sm139,
sm140,
sm141,
sm142,
sm143,
sm144,
sm145,
sm146,
sm147,
sm148,
sm149,
sm150,
sm58,
sm151,
sm152,
sm153,
sm154,
sm155,
sm156,
sm157,
sm65,
sm124,
sm158,
sm65,
sm124,
sm159,
sm160,
sm161,
sm162,
sm163,
sm164,
sm165,
sm166,
sm167,
sm168,
sm169,
sm170,
sm171,
sm172,
sm173,
sm174],

/************ Functions *************/

    max = Math.max, min = Math.min,

    //Error Functions
    e = (tk,r,o,l,p)=>{if(l.END)l.throw("Unexpected end of input");else if(l.ty & (264)) l.throw(`Unexpected space character within input "${p.slice(l)}" `) ; else l.throw(`Unexpected token ${l.tx}" `)}, 
    eh = [e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e],

    //Empty Function
    nf = ()=>-1, 

    //Environment Functions
    
redv = (ret, fn, plen, ln, t, e, o, l, s) => {        ln = max(o.length - plen, 0);        const slice = o.slice(-plen);        o.length = ln + 1;        o[ln] = fn(slice, e, l, s, o, plen);        return ret;    },
rednv = (ret, Fn, plen, ln, t, e, o, l, s) => {        ln = max(o.length - plen, 0);        const slice = o.slice(-plen);        o.length = ln + 1;        o[ln] = new Fn(slice, e, l, s, o, plen);        return ret;    },
redn = (ret, plen, t, e, o) => {        if (plen > 0) {            let ln = max(o.length - plen, 0);            o[ln] = o[o.length - 1];            o.length = ln + 1;        }        return ret;    },
shftf = (ret, fn, t, e, o, l, s) => (fn(o, e, l, s), ret),
R00_hydrocarbon=function (sym,env,lex,state,output,len) {return env.productions},
R10_head=function (sym,env,lex,state,output,len) {return env.productions.meta = sym[0]},
R30_pre_undefined101_group_list=function (sym,env,lex,state,output,len) {return ((sym[1] !== null) ? sym[0].push(sym[1]) : null,sym[0])},
R31_pre_undefined101_group_list=function (sym,env,lex,state,output,len) {return (sym[0] !== null) ? [sym[0]] : []},
C60_pre_symbols_preamble=function (sym,env,lex,state,output,len) {this.type = "symbols";this.symbols = sym[2];this.symbols.forEach(lex.addSymbol.bind(lex));},
C70_pre_precedence_preamble=function (sym,env,lex,state,output,len) {this.grammar_stamp = env.stamp;this.type = "precedence";this.terminal = sym[2];this.val = parseInt(sym[3]);},
C80_pre_ignore_preamble=function (sym,env,lex,state,output,len) {this.grammar_stamp = env.stamp;this.type = "ignore";this.symbols = sym[2];},
C90_pre_error_preamble=function (sym,env,lex,state,output,len) {this.grammar_stamp = env.stamp;this.type = "error";this.symbols = sym[2];},
C100_pre_name_preamble=function (sym,env,lex,state,output,len) {this.type = "name";this.id = sym[2];},
C110_pre_ext_preamble=function (sym,env,lex,state,output,len) {this.type = "ext";this.id = sym[2];},
R140_pre_undefined1802_group_list=function (sym,env,lex,state,output,len) {return sym[0] + sym[1]},
R141_pre_undefined1802_group_list=function (sym,env,lex,state,output,len) {return sym[0] + ""},
C180_cm_comment=function (sym,env,lex,state,output,len) {this.val = sym[1];},
R200_cm_comment_data=function (sym,env,lex,state,output,len) {return sym[0]},
C330_sym_terminal_symbol=function (sym,env,lex,state,output,len) {this.type = "symbol";this.val = sym[0];},
R350_sym_symbol=function (sym,env,lex,state,output,len) {return (sym[0].IS_OPTIONAL = true,sym[0])},
C360_sym_EOF_symbol=function (sym,env,lex,state,output,len) {this.type = "eof";this.val = "$eof";},
C370_sym_empty_symbol=function (sym,env,lex,state,output,len) {this.type = "empty";},
C380_sym_generated_symbol=function (sym,env,lex,state,output,len) {this.type = "generated";this.val = sym[1];},
C390_sym_literal_symbol=function (sym,env,lex,state,output,len) {this.type = "literal";this.val = sym[1];},
C400_sym_escaped_symbol=function (sym,env,lex,state,output,len) {this.type = "escaped";this.val = sym[1];},
C410_sym_production_symbol=function (sym,env,lex,state,output,len) {this.type = "production";this.name = sym[0];this.val = -1;},
R530_prd_productions=function (sym,env,lex,state,output,len) {return (!(sym[0].IMPORT_OVERRIDE || sym[0].IMPORT_APPEND)) ? env.productions.push(sym[0]) : 0},
R531_prd_productions=function (sym,env,lex,state,output,len) {return (env.refs.set(sym[0].id,sym[0]),null)},
R532_prd_productions=function (sym,env,lex,state,output,len) {return (sym[1].id = env.productions.length,(!(sym[1].IMPORT_OVERRIDE || sym[1].IMPORT_APPEND)) ? env.productions.push(sym[1]) : 0,env.productions)},
R533_prd_productions=function (sym,env,lex,state,output,len) {return (env.refs.set(sym[1].id,sym[1]),sym[0])},
C540_prd_production=function (sym,env,lex,state,output,len) {this.name = sym[1];this.bodies = sym[3];this.id = -1;env.functions.compileProduction(this);},
I541_prd_production=function (sym,env,lex,state,output,len) {env.host_lex = lex.copy(); env.prod_name = sym[sym.length - 1].name},
C542_prd_production=function (sym,env,lex,state,output,len) {this.IMPORT_OVERRIDE = true;this.name = sym[1];this.bodies = sym[3];this.id = -1;env.functions.compileProduction(this);},
I543_prd_production=function (sym,env,lex,state,output,len) {env.host_lex = lex.copy(); env.prod_name = sym[sym.length - 2].name;},
C544_prd_production=function (sym,env,lex,state,output,len) {this.IMPORT_APPEND = true;this.name = sym[1];this.bodies = sym[3];this.id = -1;env.functions.compileProduction(this);},
I545_prd_production=function (sym,env,lex,state,output,len) {env.host_lex = lex.copy(); env.prod_name = sym[sym.length - 3].name;},
R550_pb_production_bodies=function (sym,env,lex,state,output,len) {return (env.body_count++,[sym[0]])},
R551_pb_production_bodies=function (sym,env,lex,state,output,len) {return (env.body_count++,sym[0].push(sym[2]),sym[0])},
I552_pb_production_bodies=function (sym,env,lex,state,output,len) {env.host_lex = lex.copy()},
R560_pb_production_body=function (sym,env,lex,state,output,len) {return new fn.body([sym[0]],env,((env.host_lex.fence(lex),env.host_lex)))},
C570_pb_entries=function (sym,env,lex,state,output,len) {this.body = sym[0];this.reduce = sym[1];this.err = sym[2];},
C571_pb_entries=function (sym,env,lex,state,output,len) {this.body = [];this.reduce = null;},
C572_pb_entries=function (sym,env,lex,state,output,len) {this.reduce = null;this.body = [sym[0]];},
C573_pb_entries=function (sym,env,lex,state,output,len) {this.body = sym[0];this.err = sym[1];},
C574_pb_entries=function (sym,env,lex,state,output,len) {this.body = sym[0];this.reduce = sym[1];},
C575_pb_entries=function (sym,env,lex,state,output,len) {this.body = sym[0];},
R580_pb_body_entries=function (sym,env,lex,state,output,len) {return (env.body_offset = 0,[sym[0]])},
R581_pb_body_entries=function (sym,env,lex,state,output,len) {return (env.body_offset = sym[0].length,sym[0].push(sym[1]),sym[0])},
R582_pb_body_entries=function (sym,env,lex,state,output,len) {return sym[1].map(e => ((e.NO_BLANK = true,e)))},
C590_pb_condition_clause=function (sym,env,lex,state,output,len) {this.type = "exc";this.sym = sym[2];this.offset = -1;},
C591_pb_condition_clause=function (sym,env,lex,state,output,len) {this.type = "err";this.sym = sym[2];this.offset = -1;},
C592_pb_condition_clause=function (sym,env,lex,state,output,len) {this.type = "ign";this.sym = sym[2];this.offset = -1;},
C593_pb_condition_clause=function (sym,env,lex,state,output,len) {this.type = "rst";this.sym = sym[2];this.offset = -1;},
C594_pb_condition_clause=function (sym,env,lex,state,output,len) {this.type = "red";this.sym = sym[2];this.offset = -1;},
C600_fn_referenced_function=function (sym,env,lex,state,output,len) {this.id = sym[1];this.name = sym[3];this.txt = "";this.env = true;},
C601_fn_referenced_function=function (sym,env,lex,state,output,len) {this.id = sym[1];this.txt = sym[3];this.env = false;this.name = "";},
C620_fn_error_function=function (sym,env,lex,state,output,len) {this.type = "ERROR";this.txt = sym[3];this.name = "";this.env = false;this.ref = "";},
C621_fn_error_function=function (sym,env,lex,state,output,len) {this.type = "ERROR";this.txt = "";this.name = sym[3];this.env = true;this.ref = "";},
C640_fn_reduce_function=function (sym,env,lex,state,output,len) {this.type = (sym[1][0] == "c") ? "CLASS" : "RETURNED";this.txt = sym[3];this.name = "";this.env = false;this.ref = "";},
C641_fn_reduce_function=function (sym,env,lex,state,output,len) {this.type = (sym[1][0] == "c") ? "CLASS" : "RETURNED";this.txt = "";this.name = sym[3];this.env = true;this.ref = "";},
C642_fn_reduce_function=function (sym,env,lex,state,output,len) {this.type = (sym[1][0] == "c") ? "CLASS" : "RETURNED";this.ref = sym[3];this.txt = "";this.name = "";this.env = true;const ref = env.refs.get(this.ref);if(ref)if(Array.isArray(ref))ref.push(this); else {let ref = env.refs.get(this.ref);this.env = ref.env;this.name = ref.name;this.txt = ref.txt;} else env.refs.set(this.ref,[this]);},
C650_fn_function_clause=function (sym,env,lex,state,output,len) {this.type = "INLINE";this.txt = sym[2];this.name = "";this.env = false;},
C651_fn_function_clause=function (sym,env,lex,state,output,len) {this.type = "INLINE";this.txt = "";this.name = sym[2];this.env = true;},
R670_fn_js_data_block=function (sym,env,lex,state,output,len) {return sym[0] + sym[1] + sym[2]},

    //Sparse Map Lookup
    lsm = (index, map) => {    if (map[0] == 0xFFFFFFFF) return map[index + 1];    for (let i = 1, ind = 0, l = map.length, n = 0; i < l && ind <= index; i++) {        if (ind !== index) {            if ((n = map[i]) > -1) ind++;            else ind += -n;        } else return map[i];    }    return -1;},

    //State Action Functions
    state_funct = [(...v)=>((redn(4099,0,...v))),
()=>(58),
()=>(62),
(...v)=>(redv(5,R00_hydrocarbon,1,0,...v)),
(...v)=>((redn(54275,0,...v))),
()=>(78),
()=>(82),
()=>(86),
(...v)=>(redn(4103,1,...v)),
(...v)=>(redv(3079,R31_pre_undefined101_group_list,1,0,...v)),
(...v)=>(redn(2055,1,...v)),
(...v)=>(redn(5127,1,...v)),
()=>(98),
()=>(102),
()=>(94),
()=>(114),
()=>(106),
()=>(110),
()=>(118),
()=>(134),
()=>(130),
()=>(138),
()=>(142),
(...v)=>(redv(1035,R10_head,2,0,...v)),
(...v)=>(redv(54279,R530_prd_productions,1,0,...v)),
(...v)=>(redv(54279,R531_prd_productions,1,0,...v)),
()=>(182),
()=>(174),
()=>(178),
(...v)=>(redv(3083,R30_pre_undefined101_group_list,2,0,...v)),
()=>(222),
()=>(226),
()=>(230),
()=>(234),
()=>(270),
()=>(290),
()=>(322),
()=>(314),
()=>(326),
()=>(342),
()=>(338),
()=>(346),
(...v)=>(redv(20487,R200_cm_comment_data,1,0,...v)),
(...v)=>(redn(21511,1,...v)),
(...v)=>(redv(54283,R532_prd_productions,2,0,...v)),
(...v)=>(redv(54283,R00_hydrocarbon,2,0,...v)),
(...v)=>(redv(54283,R533_prd_productions,2,0,...v)),
()=>(354),
(...v)=>(shftf(350,I541_prd_production,...v)),
(...v)=>(shftf(358,I543_prd_production,...v)),
(...v)=>(redn(44039,1,...v)),
(...v)=>(redv(49159,R200_cm_comment_data,1,0,...v)),
()=>(374),
()=>(394),
()=>(398),
()=>(378),
()=>(382),
()=>(386),
()=>(390),
(...v)=>(redn(45063,1,...v)),
(...v)=>(shftf(402,I545_prd_production,...v)),
()=>(406),
()=>(410),
()=>(414),
(...v)=>(redn(27655,1,...v)),
(...v)=>(redv(26631,R31_pre_undefined101_group_list,1,0,...v)),
(...v)=>(redn(32775,1,...v)),
()=>(430),
()=>(434),
(...v)=>(redn(25607,1,...v)),
(...v)=>(redv(24583,R31_pre_undefined101_group_list,1,0,...v)),
(...v)=>(redn(28679,1,...v)),
()=>(450),
()=>(446),
(...v)=>(redn(31751,1,...v)),
()=>(454),
(...v)=>(redv(30727,R141_pre_undefined1802_group_list,1,0,...v)),
()=>(458),
(...v)=>(redn(33799,1,...v)),
(...v)=>(rednv(33799,C330_sym_terminal_symbol,1,0,...v)),
()=>(462),
()=>(466),
()=>(470),
()=>(478),
(...v)=>(redv(15367,R31_pre_undefined101_group_list,1,0,...v)),
(...v)=>(redv(14343,R141_pre_undefined1802_group_list,1,0,...v)),
(...v)=>(redn(13319,1,...v)),
(...v)=>(rednv(18447,C180_cm_comment,3,0,...v)),
(...v)=>(redv(20491,R140_pre_undefined1802_group_list,2,0,...v)),
(...v)=>(redn(19463,1,...v)),
()=>(570),
()=>(554),
()=>(550),
()=>(566),
()=>(526),
()=>(562),
(...v)=>(redv(49163,R140_pre_undefined1802_group_list,2,0,...v)),
(...v)=>(redv(49163,R200_cm_comment_data,2,0,...v)),
(...v)=>(redv(47111,R141_pre_undefined1802_group_list,1,0,...v)),
(...v)=>(redn(46087,1,...v)),
(...v)=>(redn(48135,1,...v)),
()=>(602),
()=>(606),
()=>(610),
()=>(626),
(...v)=>((redn(67587,0,...v))),
(...v)=>(rednv(8211,C80_pre_ignore_preamble,4,0,...v)),
(...v)=>(redv(26635,R30_pre_undefined101_group_list,2,0,...v)),
(...v)=>(rednv(38923,C380_sym_generated_symbol,2,0,...v)),
(...v)=>(rednv(39947,C390_sym_literal_symbol,2,0,...v)),
(...v)=>(rednv(40971,C400_sym_escaped_symbol,2,0,...v)),
(...v)=>(rednv(6163,C60_pre_symbols_preamble,4,0,...v)),
(...v)=>(redv(24587,R30_pre_undefined101_group_list,2,0,...v)),
(...v)=>(redv(28683,R200_cm_comment_data,2,0,...v)),
(...v)=>(redn(29703,1,...v)),
(...v)=>(redv(30731,R140_pre_undefined1802_group_list,2,0,...v)),
()=>(630),
(...v)=>(rednv(10259,C100_pre_name_preamble,4,0,...v)),
(...v)=>(rednv(11283,C110_pre_ext_preamble,4,0,...v)),
(...v)=>(rednv(9235,C90_pre_error_preamble,4,0,...v)),
(...v)=>(redv(15371,R30_pre_undefined101_group_list,2,0,...v)),
()=>(642),
()=>(646),
(...v)=>(redv(14347,R140_pre_undefined1802_group_list,2,0,...v)),
(...v)=>(rednv(55315,C540_prd_production,4,0,...v)),
(...v)=>(shftf(650,I552_pb_production_bodies,...v)),
(...v)=>(redv(56327,R550_pb_production_bodies,1,0,...v)),
(...v)=>(redv(57351,R560_pb_production_body,1,0,...v)),
(...v)=>(rednv(58375,C575_pb_entries,1,0,...v)),
()=>(678),
(...v)=>(rednv(58375,C571_pb_entries,1,0,...v)),
(...v)=>(rednv(58375,C572_pb_entries,1,0,...v)),
(...v)=>(redv(59399,R580_pb_body_entries,1,0,...v)),
()=>(690),
()=>(694),
()=>(682),
(...v)=>(redn(35847,1,...v)),
()=>(706),
()=>(710),
()=>(714),
()=>(718),
()=>(722),
(...v)=>(rednv(35847,C330_sym_terminal_symbol,1,0,...v)),
(...v)=>(rednv(41991,C410_sym_production_symbol,1,0,...v)),
()=>(730),
()=>(726),
(...v)=>(rednv(37895,C370_sym_empty_symbol,1,0,...v)),
(...v)=>(rednv(36871,C360_sym_EOF_symbol,1,0,...v)),
(...v)=>(rednv(43023,fn.importProduction,3,0,...v)),
(...v)=>(rednv(55315,C542_prd_production,4,0,...v)),
(...v)=>(redv(49167,R140_pre_undefined1802_group_list,3,0,...v)),
(...v)=>(redv(47115,R140_pre_undefined1802_group_list,2,0,...v)),
(...v)=>(rednv(55315,C544_prd_production,4,0,...v)),
(...v)=>(rednv(61459,C600_fn_referenced_function,4,0,...v)),
(...v)=>(redv(53255,R200_cm_comment_data,1,0,...v)),
()=>(746),
()=>(750),
()=>(754),
()=>(758),
(...v)=>(redn(50183,1,...v)),
()=>(762),
(...v)=>(redn(67591,1,...v)),
(...v)=>(rednv(7191,C70_pre_precedence_preamble,5,0,...v)),
(...v)=>(redn(16391,1,...v)),
(...v)=>(redv(56331,R200_cm_comment_data,2,0,...v)),
(...v)=>(rednv(58379,C574_pb_entries,2,0,...v)),
()=>(790),
(...v)=>(rednv(58379,C573_pb_entries,2,0,...v)),
(...v)=>(redv(59403,R581_pb_body_entries,2,0,...v)),
()=>(818),
()=>(822),
()=>(802),
()=>(806),
()=>(810),
()=>(814),
(...v)=>(redv(35851,R350_sym_symbol,2,0,...v)),
()=>(830),
(...v)=>(redn(34823,1,...v)),
()=>(834),
()=>(838),
()=>(870),
(...v)=>(redv(53259,R140_pre_undefined1802_group_list,2,0,...v)),
(...v)=>(redv(53259,R200_cm_comment_data,2,0,...v)),
(...v)=>(redv(52231,R141_pre_undefined1802_group_list,1,0,...v)),
(...v)=>(redn(51207,1,...v)),
(...v)=>(rednv(61463,C601_fn_referenced_function,5,0,...v)),
(...v)=>(redv(67595,R140_pre_undefined1802_group_list,2,0,...v)),
()=>(890),
()=>(898),
(...v)=>(redv(56335,R551_pb_production_bodies,3,0,...v)),
(...v)=>(rednv(58383,C570_pb_entries,3,0,...v)),
()=>(906),
()=>(902),
()=>(910),
()=>(918),
()=>(914),
(...v)=>(redn(64519,1,...v)),
(...v)=>(redn(62471,1,...v)),
()=>(922),
(...v)=>(rednv(35855,fn.listProduction,3,0,...v)),
(...v)=>(redv(59407,R582_pb_body_entries,3,0,...v)),
(...v)=>(rednv(35855,fn.groupProduction,3,0,...v)),
()=>(926),
(...v)=>(redn(23559,1,...v)),
(...v)=>(redv(22535,R31_pre_undefined101_group_list,1,0,...v)),
()=>(934),
()=>(938),
()=>(942),
()=>(946),
()=>(950),
(...v)=>(rednv(66575,C651_fn_function_clause,3,0,...v)),
(...v)=>(redv(53263,R140_pre_undefined1802_group_list,3,0,...v)),
(...v)=>(redv(52235,R140_pre_undefined1802_group_list,2,0,...v)),
(...v)=>(redv(68623,R670_fn_js_data_block,3,0,...v)),
()=>(954),
(...v)=>(redv(17439,fn.importData,7,0,...v)),
(...v)=>(rednv(35859,fn.listProduction,4,0,...v)),
(...v)=>(rednv(60435,C590_pb_condition_clause,4,0,...v)),
(...v)=>(redv(22539,R30_pre_undefined101_group_list,2,0,...v)),
(...v)=>(rednv(60435,C591_pb_condition_clause,4,0,...v)),
(...v)=>(rednv(60435,C592_pb_condition_clause,4,0,...v)),
(...v)=>(rednv(60435,C593_pb_condition_clause,4,0,...v)),
(...v)=>(rednv(60435,C594_pb_condition_clause,4,0,...v)),
(...v)=>(rednv(66579,C650_fn_function_clause,4,0,...v)),
(...v)=>(redv(17443,fn.importData,8,0,...v)),
()=>(978),
(...v)=>(rednv(65555,C641_fn_reduce_function,4,0,...v)),
(...v)=>(rednv(65555,C642_fn_reduce_function,4,0,...v)),
()=>(982),
(...v)=>(rednv(63507,C621_fn_error_function,4,0,...v)),
(...v)=>(rednv(65559,C640_fn_reduce_function,5,0,...v)),
(...v)=>(rednv(63511,C620_fn_error_function,5,0,...v))],

    //Goto Lookup Functions
    goto = [v=>lsm(v,gt0),
nf,
v=>lsm(v,gt1),
v=>lsm(v,gt2),
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt3),
v=>lsm(v,gt4),
nf,
nf,
v=>lsm(v,gt5),
v=>lsm(v,gt6),
v=>lsm(v,gt7),
nf,
v=>lsm(v,gt8),
v=>lsm(v,gt9),
v=>lsm(v,gt10),
v=>lsm(v,gt11),
v=>lsm(v,gt12),
v=>lsm(v,gt13),
v=>lsm(v,gt14),
v=>lsm(v,gt15),
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt16),
nf,
nf,
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt17),
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt18),
v=>lsm(v,gt19),
nf,
nf,
v=>lsm(v,gt20),
nf,
nf,
nf,
nf,
v=>lsm(v,gt21),
nf,
nf,
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt22),
nf,
nf,
v=>lsm(v,gt23),
v=>lsm(v,gt24),
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt25),
v=>lsm(v,gt26),
v=>lsm(v,gt27),
v=>lsm(v,gt28),
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt29),
v=>lsm(v,gt30),
v=>lsm(v,gt31),
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt32),
nf,
v=>lsm(v,gt33),
nf,
v=>lsm(v,gt34),
nf,
nf,
v=>lsm(v,gt35),
nf,
nf,
v=>lsm(v,gt36),
nf,
nf,
v=>lsm(v,gt37),
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt38),
nf,
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt34),
nf,
nf,
v=>lsm(v,gt34),
nf,
v=>lsm(v,gt39),
nf,
nf,
nf,
v=>lsm(v,gt40),
v=>lsm(v,gt22),
nf,
v=>lsm(v,gt41),
nf,
v=>lsm(v,gt42),
v=>lsm(v,gt43),
nf,
nf,
v=>lsm(v,gt44),
nf,
v=>lsm(v,gt45),
nf,
nf,
nf,
v=>lsm(v,gt36),
v=>lsm(v,gt46),
nf,
v=>lsm(v,gt47),
nf,
nf,
v=>lsm(v,gt48),
v=>lsm(v,gt34),
v=>lsm(v,gt49),
v=>lsm(v,gt50),
v=>lsm(v,gt51),
v=>lsm(v,gt52),
v=>lsm(v,gt53),
v=>lsm(v,gt54),
v=>lsm(v,gt55),
v=>lsm(v,gt56),
nf,
nf,
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt40),
v=>lsm(v,gt40),
v=>lsm(v,gt57),
nf,
nf,
nf,
v=>lsm(v,gt58),
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt59),
nf,
nf,
nf,
nf,
v=>lsm(v,gt36),
v=>lsm(v,gt38),
v=>lsm(v,gt40),
nf,
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt60),
v=>lsm(v,gt61),
v=>lsm(v,gt62),
v=>lsm(v,gt63),
v=>lsm(v,gt64),
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt40),
nf,
nf,
v=>lsm(v,gt40),
nf,
nf,
nf];

function getToken(l, SYM_LU) {
    if (l.END) return 0; /*38*/

    switch (l.ty) {
        case 2:
            //*
            if (SYM_LU.has(l.tx)) return 14;
            /*/
                console.log(l.tx, SYM_LU.has(l.tx), SYM_LU.get(l.tx))
                if (SYM_LU.has(l.tx)) return SYM_LU.get(l.tx);
            //*/
            return 2;
        case 1:
            return 1;
        case 4:
            return 3;
        case 256:
            return 9;
        case 8:
            return 4;
        case 512:
            return 10;
        default:
            return SYM_LU.get(l.tx) || SYM_LU.get(l.ty);
    }
}

/************ Parser *************/

function parser(l, e = {}) {

    fn = e.functions;

    l.IWS = false;
    l.PARSE_STRING = true;

    if (symbols.length > 0) {
        symbols.forEach(s => { l.addSymbol(s) });
        l.tl = 0;
        l.next();
    }

    const recovery_chain = [];

    const o = [],
        ss = [0, 0];

    let time = 1000000,
        RECOVERING = 100,
        RESTARTED = true,
        tk = getToken(l, lu),
        p = l.copy(),
        sp = 1,
        len = 0,
        reduceStack = (e.reduceStack = []),
        ROOT = 10000,
        off = 0;

    outer:

        while (time-- > 0) {

            const fn = lsm(tk, state[ss[sp]]) || 0;

            let r,
                gt = -1;

            if (fn == 0) {
                /*Ignore the token*/
                tk = getToken(l.next(), lu);
                continue;
            }

            if (fn > 0) {
                r = state_funct[fn - 1](tk, e, o, l, ss[sp - 1]);
            } else {

                if (tk == 14) {
                    tk = lu.get(l.tx);
                    continue;
                }

                if (l.ty == 8 && l.tl > 1) {
                    // Make sure that special tokens are not getting in the way
                    l.tl = 0;
                    // This will skip the generation of a custom symbol
                    l.next(l, false);

                    if (l.tl == 1)
                        continue;
                }

                if (RECOVERING > 1 && !l.END) {

                    if (tk !== lu.get(l.ty)) {
                        tk = lu.get(l.ty);
                        continue;
                    }

                    if (tk !== 13) {
                        tk = 13;
                        RECOVERING = 1;
                        continue;
                    }
                }

                tk = getToken(l, lu);

                const recovery_token = eh[ss[sp]](tk, e, o, l, p, ss[sp], (lex) => getToken(lex, lu));

                if (RECOVERING > 0 && recovery_token >= 0) {
                    RECOVERING = -1; /* To prevent infinite recursion */
                    tk = recovery_token;
                    l.tl = 0; /*reset current token */
                    continue;
                }
            }

            switch (r & 3) {
                case 0:
                    /* ERROR */

                    if (tk == "$eof")
                        l.throw("Unexpected end of input");

                    l.throw(`Unexpected token [${RECOVERING ? l.next().tx : l.tx}]`);
                    return [null];

                case 1:
                    /* ACCEPT */
                    break outer;

                case 2:

                    /*SHIFT */
                    o.push(l.tx);
                    ss.push(off, r >> 2);
                    sp += 2;
                    l.next();
                    off = l.off;
                    tk = getToken(l, lu);
                    RECOVERING++;
                    break;

                case 3:
                    /* REDUCE */
                    RESTARTED = true;

                    len = (r & 0x3FC) >> 1;

                    ss.length -= len;
                    sp -= len;
                    gt = goto[ss[sp]](r >> 10);

                    if (gt < 0)
                        l.throw("Invalid state reached!");

                    if (reduceStack.length > 0) {
                        let i = reduceStack.length - 1;
                        while (i > -1) {
                            let item = reduceStack[i--];

                            if (item.index == sp) {
                                item.action(output)
                            } else if (item.index > sp) {
                                reduceStack.length--;
                            } else {
                                break;
                            }
                        }
                    }

                    ss.push(off, gt);
                    sp += 2;
                    break;
            }
        }
    return o[0];
}; export default parser;