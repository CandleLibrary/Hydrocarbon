let fn = {}; const 
/************** Maps **************/

    /* Symbols To Inject into the Lexer */
    symbols = ["((","))","<>","+>","=>","(*","(+","::","$eof"],

    /* Goto lookup maps */
    gt0 = [0,-1,1,4,3,2,5,7,8,6,11,9,10,-5,12,-45,13],
gt1 = [0,-18,16,17,18],
gt2 = [0,-2,22,-2,5,7,8,6,11,9,10,-5,12,-45,13],
gt3 = [0,-65,30,31],
gt4 = [0,-19,36,38,-42,37],
gt5 = [0,-51,40,39,42,-3,41],
gt6 = [0,-51,46,47,42,-3,41],
gt7 = [0,-53,42,-3,48],
gt8 = [0,-35,50,49,-4,51,-5,52,53,54],
gt9 = [0,-33,60,59,-2,61,-1,66,65,-6,62,63,64],
gt10 = [0,-42,68,-4,69,70,71],
gt11 = [0,-65,73,31],
gt12 = [0,-53,42,-3,74],
gt13 = [0,-35,50,75,-4,51,-5,52,53,54],
gt14 = [0,-12,76,79,77],
gt15 = [0,-64,82,-1,83],
gt16 = [0,-54,92,90,91],
gt17 = [0,-41,104,-5,52,53,54],
gt18 = [0,-53,42,-3,105],
gt19 = [0,-53,42,-3,106],
gt20 = [0,-37,109,-1,66,65,-6,62,63,64],
gt21 = [0,-38,110],
gt22 = [0,-66,83],
gt23 = [0,-13,79,118],
gt24 = [0,-13,121,-1,120],
gt25 = [0,-28,131,-15,129,128,127,133,136,137,134,135,47,42,-3,140,-9,123,124,125,126,130],
gt26 = [0,-53,42,-3,144],
gt27 = [0,-28,131,-15,129,128,127,133,136,137,134,135,47,42,-3,140,-9,145,124,125,126,130],
gt28 = [0,-54,147,-1,146],
gt29 = [0,-28,131,-15,129,128,127,133,136,137,134,135,47,42,-3,140,-9,148,124,125,126,130],
gt30 = [0,-58,150,-3,149],
gt31 = [0,-29,154,156,-34,155,31],
gt32 = [0,-13,121,-1,159],
gt33 = [0,-16,160],
gt34 = [0,-63,165],
gt35 = [0,-23,167,-3,166,168,-15,170,-2,133,136,137,134,135,47,42,-3,140,-13,169],
gt36 = [0,-43,173],
gt37 = [0,-28,131,-15,129,-2,133,136,137,134,135,47,42,-3,140,-12,176,130],
gt38 = [0,-28,131,-15,129,128,127,133,136,137,134,135,47,42,-3,140,-9,177,124,125,126,130],
gt39 = [0,-59,186,184,185],
gt40 = [0,-29,194,156,-34,155,31],
gt41 = [0,-29,195,156,-34,155,31],
gt42 = [0,-16,196],
gt43 = [0,-53,42,-3,197],
gt44 = [0,-28,131,-15,129,128,127,133,136,137,134,135,47,42,-3,140,-10,198,125,126,130],
gt45 = [0,-23,199],
gt46 = [0,-21,204,205,-1,201,202,203],
gt47 = [0,-42,212,-4,69,70,71],
gt48 = [0,-28,168,-15,170,-2,133,136,137,134,135,47,42,-3,140,-13,169],
gt49 = [0,-31,217,216,-9,218,-4,69,70,71],
gt50 = [0,-31,217,219,-9,218,-4,69,70,71],
gt51 = [0,-31,217,220,-9,218,-4,69,70,71],
gt52 = [0,-31,217,221,-9,218,-4,69,70,71],
gt53 = [0,-29,222,156,-34,155,31],
gt54 = [0,-58,150,-3,223],
gt55 = [0,-59,225,-1,224],
gt56 = [0,-53,42,-3,227],
gt57 = [0,-21,204,205],
gt58 = [0,-42,236,-4,69,70,71],
gt59 = [0,-29,242,156,-34,155,31],
gt60 = [0,-58,150,-3,243],
gt61 = [0,-58,150,-3,244],
gt62 = [0,-29,245,156,-34,155,31],
gt63 = [0,-58,150,-3,246],

    // State action lookup maps
    sm0=[0,1,-3,0,-4,0,-5,2,-14,1,-1,1,1,-25,3],
sm1=[0,4,-3,0,-4,0],
sm2=[0,5,-3,0,-4,0,-20,6,-1,7,8,-25,5],
sm3=[0,9,-3,0,-4,0,-5,2,-14,9,-1,9,9,-25,3],
sm4=[0,10,-3,0,-4,0,-5,10,-14,10,-1,10,10,-25,10],
sm5=[0,11,-3,0,-4,0,-5,11,-14,11,-1,11,11,-25,11],
sm6=[0,12,-3,0,-4,0,-5,12,-14,12,-1,12,12,-25,12],
sm7=[0,-4,-1,-4,0,-6,13,-2,14,-1,15,16,17,18,-4,19],
sm8=[0,-1,20,21,-1,22,-4,0,-3,23],
sm9=[0,24,-3,0,-4,0,-20,6,-1,7,8,-25,3],
sm10=[0,25,-3,0,-4,0,-20,25,-1,25,25,-25,25],
sm11=[0,26,-3,0,-4,0,-20,26,-1,26,26,-25,26],
sm12=[0,-1,27,28,-1,0,-4,0,-45,29],
sm13=[0,30,-3,0,-4,0,-5,30,-14,30,-1,30,30,-25,30],
sm14=[0,-4,0,-4,0,-3,31,-37,32,33,34],
sm15=[0,-4,0,-4,0,-3,35,-37,32,33,34],
sm16=[0,-4,0,-4,0,-3,36,-37,32,33,34],
sm17=[0,-2,37,-1,38,-4,0,-3,39],
sm18=[0,40,20,21,-1,22,-4,41,-3,23,-47,42],
sm19=[0,43,43,43,-1,43,-4,43,-3,43,-21,43,43,-24,43],
sm20=[0,44,44,44,-1,44,-4,44,-3,44,-21,44,44,-24,44],
sm21=[0,45,-3,0,-4,0,-20,45,-1,45,45,-25,45],
sm22=[0,46,-3,0,-4,0,-20,46,-1,46,46,-25,46],
sm23=[0,47,-3,0,-4,0,-20,47,-1,47,47,-25,47],
sm24=[0,-4,0,-4,0,-21,48,-22,49],
sm25=[0,-4,0,-4,0,-21,50],
sm26=[0,-4,0,-4,0,-21,51,-22,51],
sm27=[0,52,-1,53,-1,54,-4,55,-3,52,-16,52,52,52,52,52,52,-8,52,52,52,52,52,-2,52,52,52,52,56,57,58,59,52,-2,52,-1,52],
sm28=[0,60,-1,60,-1,60,-4,60,-3,60,-16,60,60,60,60,60,60,-8,60,60,60,60,60,-2,60,60,60,60,60,60,60,60,60,-2,60,-1,60],
sm29=[0,-4,0,-4,0,-21,61],
sm30=[0,-4,0,-4,0,-44,49],
sm31=[0,-4,0,-4,0,-24,62,63],
sm32=[0,-4,0,-4,64],
sm33=[0,-4,0,-4,65,-3,31,-37,32,33,34],
sm34=[0,-4,0,-4,66,-3,66,-37,66,66,66],
sm35=[0,-4,0,-4,67,-3,67,-37,67,67,67],
sm36=[0,-1,27,28,-1,-1,-4,-1,-45,29],
sm37=[0,-4,-1,-4,-1,-3,68],
sm38=[0,-4,0,-4,69],
sm39=[0,-4,0,-4,70,-3,35,-37,32,33,34],
sm40=[0,-4,0,-4,71,-3,71,-37,71,71,71],
sm41=[0,-4,0,-4,72,-3,72,-37,72,72,72],
sm42=[0,-4,73,-4,74],
sm43=[0,-4,75,-4,75,-3,76],
sm44=[0,-4,77,-4,77,-3,77],
sm45=[0,-1,78,-2,0,-4,0],
sm46=[0,-1,79,-2,0,-4,0,-3,79,-33,79,-3,79,79,79],
sm47=[0,-1,80,-2,0,-4,0,-3,80,-33,80,-3,80,80,80],
sm48=[0,-1,20,21,-1,22,-4,81,-3,23],
sm49=[0,-4,0,-4,82],
sm50=[0,-4,0,-4,83],
sm51=[0,-2,37,-1,84,-4,0,-3,39],
sm52=[0,-2,37,-1,85,-4,0,-3,39],
sm53=[0,-2,86,-1,86,-4,0,-3,86],
sm54=[0,-2,87,-1,87,-4,0,-3,87],
sm55=[0,-2,88,-1,88,-4,0,-3,88],
sm56=[0,89,-3,0,-4,0,-5,89,-14,89,-1,89,89,-13,89,-11,89,-2,89],
sm57=[0,90,90,90,-1,90,-4,90,-3,90,-21,90,90,-24,90],
sm58=[0,91,-3,0,-4,0,-5,91,-14,91,-1,91,91,-13,91,-11,91,-2,91],
sm59=[0,92,27,28,-1,0,-4,0,-3,93,-19,94,-12,95,-3,96,32,33,34,-1,29,-7,97],
sm60=[0,98,-1,53,-1,54,-4,55,-3,98,-16,98,98,98,98,98,98,-8,98,98,98,98,98,-2,98,98,98,98,56,57,58,59,98,-2,98,-1,98],
sm61=[0,99,99,99,-1,0,-4,99,-3,99,-16,99,99,99,99,99,99,-8,99,99,99,99,99,-2,99,99,99,99,99,-3,99,-2,99,-1,99],
sm62=[0,100,-1,100,-1,100,-4,100,-3,100,-16,100,100,100,100,100,100,-8,100,100,100,100,100,-2,100,100,100,100,100,100,100,100,100,-2,100,-1,100],
sm63=[0,101,-1,101,-1,101,-4,101,-3,101,-16,101,101,101,101,101,101,-8,101,101,101,101,101,-2,101,101,101,101,101,101,101,101,101,-2,101,-1,101],
sm64=[0,102,102,102,-1,0,-4,102,-3,102,-16,102,102,102,102,102,102,-8,102,102,102,102,102,-2,102,102,102,102,102,-3,102,-2,102,-1,102],
sm65=[0,-2,103,-1,-1,-4,0,-45,104,-1,105],
sm66=[0,-1,20,21,-1,22,-4,0,-3,23,-21,106,107],
sm67=[0,108,-3,0,-4,0,-5,108,-14,108,-1,108,108,-25,108],
sm68=[0,-4,0,-4,109,-3,109,-37,109,109,109],
sm69=[0,110,110,110,-1,0,-4,110,-3,110,-16,110,-1,110,110,-10,110,110,110,110,110,-2,110,110,110,-1,110,-3,110,-2,110,-1,110],
sm70=[0,111,111,111,-1,0,-4,111,-3,111,-16,111,-1,111,111,-10,111,111,111,111,111,-2,111,111,111,-1,111,-3,111,-2,111,-1,111],
sm71=[0,112,112,112,-1,0,-4,112,-3,112,-16,112,-1,112,112,-10,112,112,112,112,112,-2,112,112,112,-1,112,-3,112,-2,112,-1,112],
sm72=[0,113,-3,0,-4,0,-5,113,-14,113,-1,113,113,-25,113],
sm73=[0,-4,0,-4,114,-3,114,-37,114,114,114],
sm74=[0,-4,0,-4,115,-3,115,-37,115,115,115],
sm75=[0,-4,0,-4,116,-3,116,-37,116,116,116],
sm76=[0,-4,117,-4,117,-3,117],
sm77=[0,-4,0,-4,118],
sm78=[0,119,-3,0,-4,0,-5,119,-14,119,-1,119,119,-25,119],
sm79=[0,120,-3,0,-4,0,-5,120,-14,120,-1,120,120,-25,120],
sm80=[0,121,-3,0,-4,0,-5,121,-14,121,-1,121,121,-25,121],
sm81=[0,-2,122,-1,122,-4,0,-3,122],
sm82=[0,-4,123,-4,0,-17,124,125],
sm83=[0,-2,126,-1,126,-4,0,-3,126],
sm84=[0,-4,127,-4,0,-17,127,127],
sm85=[0,128,-3,0,-4,0,-20,128,-1,128,128,-25,3,-2,129],
sm86=[0,130,-3,0,-4,0,-20,130,-1,130,130,-13,130,-11,130,-2,130],
sm87=[0,131,-3,0,-4,0,-20,131,-1,131,131,-13,131,-11,131,-2,131],
sm88=[0,132,27,28,-1,0,-4,0,-3,93,-16,132,-1,132,133,-12,95,132,-3,32,33,34,-1,29,-3,132,-2,132],
sm89=[0,134,-3,0,-4,0,-20,134,-1,134,134,-13,134,-11,134,-2,134],
sm90=[0,135,-3,0,-4,0,-20,135,-1,135,135,-13,135,-11,135,-2,135],
sm91=[0,136,136,136,-1,0,-4,0,-3,136,-16,136,-1,136,136,-10,137,138,136,136,139,-2,136,136,136,-1,136,-3,136,-2,136,-1,136],
sm92=[0,136,136,136,-1,0,-4,0,-3,136,-16,136,-1,136,136,-12,136,136,-3,136,136,136,-1,136,-3,136,-2,136,-1,136],
sm93=[0,-1,27,28,-1,0,-4,0,-3,93,-19,94,-12,95,-4,32,33,34,-1,29,-7,97],
sm94=[0,140,140,140,-1,0,-4,0,-3,140,-16,140,-1,140,140,-10,140,140,140,140,140,-2,140,140,140,-1,140,-3,140,-2,140,-1,140],
sm95=[0,92,27,28,-1,0,-4,0,-3,93,-19,94,-12,95,-3,96,32,33,34,-1,29,-7,97,-1,141,142,143,144],
sm96=[0,145,145,145,-1,0,-4,0,-3,145,-16,145,-1,145,145,-10,145,145,145,145,145,-2,145,145,145,-1,145,-3,145,-2,145,-1,145],
sm97=[0,146,146,146,-1,0,-4,0,-3,146,-16,146,-1,146,146,-10,146,146,146,146,146,-2,146,146,146,51,146,-3,146,-2,146,-1,146],
sm98=[0,-4,0,-4,0,-24,147,148],
sm99=[0,149,-3,0,-4,0,-20,149,-1,149,149,-13,149,-11,149,-2,149],
sm100=[0,150,-3,0,-4,0,-20,150,-1,150,150,-13,150,-11,150,-2,150],
sm101=[0,151,151,151,-1,0,-4,0,-3,151,-16,151,151,151,151,-10,151,151,151,151,151,-2,151,151,151,-1,151,-3,151,-2,151,-1,151],
sm102=[0,152,-3,0,-4,0,-20,152,-1,152,152,-25,3,-2,129],
sm103=[0,153,153,153,-1,0,-4,153,-3,153,-16,153,153,153,153,153,153,-8,153,153,153,153,153,-2,153,153,153,153,153,-3,153,-2,153,-1,153],
sm104=[0,154,-1,154,-1,154,-4,154,-3,154,-16,154,154,154,154,154,154,-8,154,154,154,154,154,-2,154,154,154,154,154,154,154,154,154,-2,154,-1,154],
sm105=[0,155,-3,0,-4,0,-20,155,-1,155,155,-25,3,-2,129],
sm106=[0,156,-3,0,-4,0,-20,156,-1,156,156,-25,156],
sm107=[0,157,-1,158,-1,159,-4,160,-3,157,-16,157,-1,157,157,-12,157,157,-3,157,157,157,-1,161,-1,162,163,157,-2,157,-1,157],
sm108=[0,164,-1,164,-1,164,-4,164,-3,164,-16,164,-1,164,164,-12,164,164,-3,164,164,164,-1,164,-1,164,164,164,-2,164,-1,164],
sm109=[0,-1,20,21,-1,22,-4,0,-3,23,-21,106,165],
sm110=[0,-1,20,21,-1,22,-4,0,-3,23,-21,166,166],
sm111=[0,-1,166,166,-1,166,-4,0,-3,166,-21,166,166],
sm112=[0,167,-3,0,-4,0,-5,167,-14,167,-1,167,167,-25,167],
sm113=[0,-4,168,-4,0,-17,168,168],
sm114=[0,-1,169,169,-1,0,-4,0,-45,169],
sm115=[0,170,-3,0,-4,0,-20,170,-1,170,170,-13,170,-11,170,-2,170],
sm116=[0,171,-3,0,-4,0,-20,171,-1,171,172,-13,171,-11,171,-2,171],
sm117=[0,173,-3,0,-4,0,-20,173,-1,173,173,-13,173,-11,173,-2,173],
sm118=[0,174,174,174,-1,0,-4,0,-3,174,-16,174,-1,174,174,-12,174,174,-3,174,174,174,-1,174,-3,174,-2,174,-1,174],
sm119=[0,174,174,174,-1,0,-4,0,-3,174,-16,174,-1,174,174,-10,137,138,174,174,139,-2,174,174,174,-1,174,-3,174,-2,174,-1,174],
sm120=[0,-4,0,-4,0,-24,147,148,-1,175,176,177,178,179,180],
sm121=[0,181,181,181,-1,0,-4,0,-3,181,-16,181,-1,181,181,-10,181,181,181,181,181,-2,181,181,181,-1,181,-3,181,-2,181,-1,181],
sm122=[0,-4,0,-4,0,-3,36,-33,182,-3,32,33,34],
sm123=[0,-4,0,-4,0,-3,183,-33,183,-3,183,183,183],
sm124=[0,-1,27,28,-1,0,-4,0,-3,93,-19,94,-12,95,-4,32,33,34,-1,29,-8,184],
sm125=[0,-4,0,-4,0,-37,185,-11,3,-2,129],
sm126=[0,-2,103,-1,-1,-4,-1,-45,104,-1,105],
sm127=[0,186,-1,158,-1,159,-4,160,-3,186,-16,186,-1,186,186,-12,186,186,-3,186,186,186,-1,161,-1,162,163,186,-2,186,-1,186],
sm128=[0,187,187,187,-1,0,-4,0,-3,187,-16,187,-1,187,187,-12,187,187,-3,187,187,187,-1,187,-3,187,-2,187,-1,187],
sm129=[0,188,-1,188,-1,188,-4,188,-3,188,-16,188,-1,188,188,-12,188,188,-3,188,188,188,-1,188,-1,188,188,188,-2,188,-1,188],
sm130=[0,189,-1,189,-1,189,-4,189,-3,189,-16,189,-1,189,189,-12,189,189,-3,189,189,189,-1,189,-1,189,189,189,-2,189,-1,189],
sm131=[0,190,190,190,-1,0,-4,0,-3,190,-16,190,-1,190,190,-12,190,190,-3,190,190,190,-1,190,-3,190,-2,190,-1,190],
sm132=[0,191,-3,0,-4,0,-20,191,-1,191,191,-25,191],
sm133=[0,-1,20,21,-1,22,-4,0,-3,23,-21,106,192],
sm134=[0,-1,20,21,-1,22,-4,0,-3,23,-21,106,193],
sm135=[0,-4,0,-4,194],
sm136=[0,195,-3,0,-4,0,-20,195,-1,195,195,-13,195,-11,195,-2,195],
sm137=[0,196,-3,0,-4,0,-20,196,-1,196,196,-13,196,-11,196,-2,196],
sm138=[0,-4,0,-4,0,-27,175,176],
sm139=[0,-4,0,-4,0,-25,197],
sm140=[0,-4,0,-4,0,-24,198],
sm141=[0,-4,0,-4,0,-33,199],
sm142=[0,-4,0,-4,0,-25,200],
sm143=[0,-4,0,-4,0,-24,201],
sm144=[0,-4,0,-4,0,-24,202,203,-7,204],
sm145=[0,-4,0,-4,0,-24,205,206],
sm146=[0,-4,0,-4,0,-37,207],
sm147=[0,208,208,208,-1,0,-4,0,-3,208,-16,208,-1,208,208,-10,208,208,208,208,208,-2,208,208,208,-1,208,-3,208,-2,208,-1,208],
sm148=[0,209,209,209,-1,0,-4,0,-3,209,-16,209,-1,209,209,-12,209,209,-3,209,209,209,-1,209,-3,209,-2,209,-1,209],
sm149=[0,210,210,210,-1,0,-4,0,-3,210,-16,210,-1,210,210,-10,210,210,210,210,210,-2,210,210,210,-1,210,-3,210,-2,210,-1,210],
sm150=[0,-4,0,-4,0,-37,211],
sm151=[0,-4,0,-4,0,-3,36,-33,212,-3,32,33,34],
sm152=[0,-4,0,-4,0,-3,213,-33,213,-3,213,213,213],
sm153=[0,-4,0,-4,0,-37,214],
sm154=[0,-4,0,-4,0,-37,215],
sm155=[0,-4,0,-4,0,-37,216],
sm156=[0,-1,20,21,-1,22,-4,0,-3,23,-21,106,217],
sm157=[0,218,218,218,-1,0,-4,0,-3,218,-16,218,-1,218,218,-12,218,218,-3,218,218,218,-1,218,-3,218,-2,218,-1,218],
sm158=[0,219,219,219,-1,0,-4,0,-3,219,-16,219,-1,219,219,-12,219,219,-3,219,219,219,-1,219,-3,219,-2,219,-1,219],
sm159=[0,220,-1,220,-1,220,-4,220,-3,220,-16,220,-1,220,220,-12,220,220,-3,220,220,220,-1,220,-1,220,220,220,-2,220,-1,220],
sm160=[0,-1,221,221,-1,221,-4,0,-3,221,-21,221,221],
sm161=[0,-4,0,-4,222],
sm162=[0,223,-3,0,-4,0,-5,223,-14,223,-1,223,223,-25,223],
sm163=[0,-2,103,-1,0,-4,0,-45,104,-1,105],
sm164=[0,224,224,224,-1,0,-4,0,-3,224,-16,224,-1,224,224,-10,224,224,224,224,224,-2,224,224,224,-1,224,-3,224,-2,224,-1,224],
sm165=[0,225,225,225,-1,0,-4,0,-3,225,-16,225,-1,225,225,-12,225,225,-3,225,225,225,-1,225,-3,225,-2,225,-1,225],
sm166=[0,-4,0,-4,0,-3,226,-33,226,-3,226,226,226],
sm167=[0,227,227,227,-1,0,-4,0,-3,227,-16,227,-1,227,227,-12,227,227,-3,227,227,227,-1,227,-3,227,-2,227,-1,227],
sm168=[0,228,228,228,-1,0,-4,0,-3,228,-16,228,-1,228,228,-12,228,228,-3,228,228,228,-1,228,-3,228,-2,228,-1,228],
sm169=[0,229,229,229,-1,0,-4,0,-3,229,-16,229,-1,229,229,-12,229,229,-3,229,229,229,-1,229,-3,229,-2,229,-1,229],
sm170=[0,230,230,230,-1,0,-4,0,-3,230,-16,230,-1,230,230,-12,230,230,-3,230,230,230,-1,230,-3,230,-2,230,-1,230],
sm171=[0,231,-3,0,-4,0,-5,231,-14,231,-1,231,231,-25,231],
sm172=[0,-1,20,21,-1,22,-4,0,-3,23,-21,106,232],
sm173=[0,233,-3,0,-4,0,-20,233,-1,233,233,-13,233,-11,233,-2,233],
sm174=[0,234,-3,0,-4,0,-20,234,-1,234,234,-13,234,-11,234,-2,234],
sm175=[0,-1,20,21,-1,22,-4,0,-3,23,-21,106,235],
sm176=[0,236,-3,0,-4,0,-20,236,-1,236,236,-13,236,-11,236,-2,236],
sm177=[0,237,-3,0,-4,0,-20,237,-1,237,237,-13,237,-11,237,-2,237],
sm178=[0,238,-3,0,-4,0,-20,238,-1,238,238,-13,238,-11,238,-2,238],

    // Symbol Lookup map
    lu = new Map([[1,1],[2,2],[4,3],[8,4],[16,5],[32,6],[64,7],[128,8],[256,9],[512,10],[3,11],[264,11],[200,13],[201,14],["@",15],["SYMBOL",16],[null,13],["PREC",19],["IGNORE",21],["ERROR",22],["NAME",23],["EXT",24],["AS",27],["as",28],["IMPORT",29],["<>",30],["→",31],["+>",32],["↦",33],["^",34],["{",35],["}",36],["err",37],["e",38],["cstr",39],["c",40],["return",41],["r",42],["=>",43],["(+",44],["(*",45],["(",46],[")",47],["?",48],["$eof",60],["ɛ",50],["θ",51],["τ",52],["\\",53],["::",54],["_",55],["-",56],["$",57],["num",58],["#",59],[";",61],["│",62],["[",63],["]",64],["EXC",65],["ERR",66],["IGN",67],["RST",68]]),

    //Reverse Symbol Lookup map
    rlu = new Map([[1,1],[2,2],[3,4],[4,8],[5,16],[6,32],[7,64],[8,128],[9,256],[10,512],[11,3],[11,264],[13,200],[14,201],[15,"@"],[16,"SYMBOL"],[13,null],[19,"PREC"],[21,"IGNORE"],[22,"ERROR"],[23,"NAME"],[24,"EXT"],[27,"AS"],[28,"as"],[29,"IMPORT"],[30,"<>"],[31,"→"],[32,"+>"],[33,"↦"],[34,"^"],[35,"{"],[36,"}"],[37,"err"],[38,"e"],[39,"cstr"],[40,"c"],[41,"return"],[42,"r"],[43,"=>"],[44,"(+"],[45,"(*"],[46,"("],[47,")"],[48,"?"],[60,"$eof"],[50,"ɛ"],[51,"θ"],[52,"τ"],[53,"\\"],[54,"::"],[55,"_"],[56,"-"],[57,"$"],[58,"num"],[59,"#"],[61,";"],[62,"│"],[63,"["],[64,"]"],[65,"EXC"],[66,"ERR"],[67,"IGN"],[68,"RST"]]),

    // States 
    state = [sm0,
sm1,
sm2,
sm3,
sm4,
sm5,
sm6,
sm6,
sm6,
sm6,
sm6,
sm6,
sm6,
sm6,
sm7,
sm8,
sm9,
sm10,
sm11,
sm12,
sm12,
sm12,
sm13,
sm14,
sm15,
sm16,
sm8,
sm12,
sm14,
sm17,
sm18,
sm19,
sm20,
sm20,
sm20,
sm20,
sm21,
sm22,
sm23,
sm24,
sm25,
sm26,
sm27,
sm28,
sm28,
sm28,
sm29,
sm30,
sm31,
sm32,
sm33,
sm34,
sm35,
sm35,
sm35,
sm35,
sm36,
sm36,
sm37,
sm38,
sm39,
sm40,
sm41,
sm41,
sm41,
sm42,
sm43,
sm44,
sm45,
sm46,
sm46,
sm46,
sm47,
sm48,
sm49,
sm50,
sm51,
sm52,
sm53,
sm54,
sm55,
sm55,
sm56,
sm57,
sm58,
sm58,
sm58,
sm59,
sm12,
sm59,
sm60,
sm61,
sm62,
sm63,
sm63,
sm63,
sm63,
sm63,
sm64,
sm64,
sm59,
sm65,
sm66,
sm67,
sm68,
sm69,
sm70,
sm71,
sm72,
sm73,
sm74,
sm75,
sm75,
sm76,
sm77,
sm78,
sm79,
sm80,
sm52,
sm81,
sm82,
sm83,
sm84,
sm85,
sm86,
sm87,
sm88,
sm89,
sm90,
sm91,
sm92,
sm92,
sm93,
sm94,
sm94,
sm94,
sm94,
sm94,
sm95,
sm96,
sm97,
sm98,
sm99,
sm100,
sm101,
sm102,
sm103,
sm104,
sm105,
sm106,
sm107,
sm108,
sm108,
sm108,
sm109,
sm110,
sm111,
sm66,
sm112,
sm82,
sm12,
sm113,
sm114,
sm114,
sm59,
sm115,
sm116,
sm117,
sm118,
sm118,
sm119,
sm120,
sm121,
sm122,
sm123,
sm123,
sm124,
sm125,
sm16,
sm16,
sm16,
sm16,
sm66,
sm126,
sm127,
sm128,
sm129,
sm130,
sm130,
sm130,
sm130,
sm131,
sm131,
sm132,
sm133,
sm134,
sm12,
sm135,
sm136,
sm137,
sm138,
sm139,
sm140,
sm141,
sm142,
sm143,
sm144,
sm144,
sm144,
sm144,
sm145,
sm145,
sm146,
sm147,
sm148,
sm149,
sm150,
sm151,
sm152,
sm153,
sm154,
sm155,
sm156,
sm157,
sm158,
sm159,
sm160,
sm161,
sm162,
sm66,
sm126,
sm163,
sm66,
sm126,
sm164,
sm165,
sm166,
sm167,
sm168,
sm169,
sm170,
sm171,
sm172,
sm173,
sm174,
sm175,
sm176,
sm177,
sm178],

/************ Functions *************/

    max = Math.max, min = Math.min,

    //Error Functions
    e = (tk,r,o,l,p)=>{if(l.END)l.throw("Unexpected end of input");else if(l.ty & (264)) l.throw(`Unexpected space character within input "${p.slice(l)}" `) ; else l.throw(`Unexpected token ${l.tx} within input "${111}" `)}, 
    eh = [e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e],

    //Empty Function
    nf = ()=>-1, 

    //Environment Functions
    
redv = (ret, fn, plen, ln, t, e, o, l, s) => {        ln = max(o.length - plen, 0);        const slice = o.slice(-plen);        o.length = ln + 1;        o[ln] = fn(slice, e, l, s, o, plen);        return ret;    },
rednv = (ret, Fn, plen, ln, t, e, o, l, s) => {        ln = max(o.length - plen, 0);        const slice = o.slice(-plen);        o.length = ln + 1;        o[ln] = new Fn(slice, e, l, s, o, plen);        return ret;    },
redn = (ret, plen, t, e, o) => {        if (plen > 0) {            let ln = max(o.length - plen, 0);            o[ln] = o[o.length - 1];            o.length = ln + 1;        }        return ret;    },
shftf = (ret, fn, t, e, o, l, s) => (fn(o, e, l, s), ret),
R00_hydrocarbon=function (sym,env,lex,state,output,len) {return env.productions},
R10_head=function (sym,env,lex,state,output,len) {return env.productions.meta = sym[0]},
R30_pre_preamble101_group_list=function (sym,env,lex,state,output,len) {return ((sym[1] !== null) ? sym[0].push(sym[1]) : null,sym[0])},
R31_pre_preamble101_group_list=function (sym,env,lex,state,output,len) {return (sym[0] !== null) ? [sym[0]] : []},
C60_pre_symbols_preamble=function (sym,env,lex,state,output,len) {this.type = "symbols";this.symbols = sym[2];this.symbols.forEach(lex.addSymbol.bind(lex));},
C70_pre_precedence_preamble=function (sym,env,lex,state,output,len) {this.grammar_stamp = env.stamp;this.type = "precedence";this.terminal = sym[2];this.val = parseInt(sym[3]);},
C80_pre_ignore_preamble=function (sym,env,lex,state,output,len) {this.grammar_stamp = env.stamp;this.type = "ignore";this.symbols = sym[2];},
C90_pre_error_preamble=function (sym,env,lex,state,output,len) {this.grammar_stamp = env.stamp;this.type = "error";this.symbols = sym[2];},
C100_pre_name_preamble=function (sym,env,lex,state,output,len) {this.type = "name";this.id = sym[2];},
C110_pre_ext_preamble=function (sym,env,lex,state,output,len) {this.type = "ext";this.id = sym[2];},
R140_pre_import_preamble1802_group_list=function (sym,env,lex,state,output,len) {return sym[0] + sym[1]},
R141_pre_import_preamble1802_group_list=function (sym,env,lex,state,output,len) {return sym[0] + ""},
R180_prd_productions=function (sym,env,lex,state,output,len) {return (!(sym[0].IMPORT_OVERRIDE || sym[0].IMPORT_APPEND)) ? env.productions.push(sym[0]) : 0},
R181_prd_productions=function (sym,env,lex,state,output,len) {return (env.refs.set(sym[0].id,sym[0]),null)},
R182_prd_productions=function (sym,env,lex,state,output,len) {return (sym[1].id = env.productions.length,(!(sym[1].IMPORT_OVERRIDE || sym[1].IMPORT_APPEND)) ? env.productions.push(sym[1]) : 0,env.productions)},
R183_prd_productions=function (sym,env,lex,state,output,len) {return (env.refs.set(sym[1].id,sym[1]),sym[0])},
C190_prd_production=function (sym,env,lex,state,output,len) {this.name = sym[1];this.bodies = sym[3];this.id = -1;env.functions.compileProduction(this);},
I191_prd_production=function (sym,env,lex,state,output,len) {env.host_lex = lex.copy(); env.prod_name = sym[sym.length - 1];},
C192_prd_production=function (sym,env,lex,state,output,len) {this.IMPORT_OVERRIDE = true;this.name = sym[1];this.bodies = sym[3];this.id = -1;env.functions.compileProduction(this);},
I193_prd_production=function (sym,env,lex,state,output,len) {env.host_lex = lex.copy(); env.prod_name = sym[sym.length - 1].name;},
C194_prd_production=function (sym,env,lex,state,output,len) {this.IMPORT_APPEND = true;this.name = sym[1];this.bodies = sym[3];this.id = -1;env.functions.compileProduction(this);},
C200_fn_referenced_function=function (sym,env,lex,state,output,len) {this.id = sym[1];this.name = sym[3];this.txt = "";this.env = true;},
C201_fn_referenced_function=function (sym,env,lex,state,output,len) {this.id = sym[1];this.txt = sym[3];this.env = false;this.name = "";},
C230_fn_error_function=function (sym,env,lex,state,output,len) {this.type = "ERROR";this.txt = sym[3];this.name = "";this.env = false;this.ref = "";},
C231_fn_error_function=function (sym,env,lex,state,output,len) {this.type = "ERROR";this.txt = "";this.name = sym[3];this.env = true;this.ref = "";},
C270_fn_reduce_function=function (sym,env,lex,state,output,len) {this.type = (sym[1][0] == "c") ? "CLASS" : "RETURNED";this.txt = sym[3];this.name = "";this.env = false;this.ref = "";},
C271_fn_reduce_function=function (sym,env,lex,state,output,len) {this.type = (sym[1][0] == "c") ? "CLASS" : "RETURNED";this.txt = "";this.name = sym[3];this.env = true;this.ref = "";},
C272_fn_reduce_function=function (sym,env,lex,state,output,len) {this.type = (sym[1][0] == "c") ? "CLASS" : "RETURNED";this.ref = sym[3];this.txt = "";this.name = "";this.env = true;const ref = env.refs.get(this.ref);if(ref)if(Array.isArray(ref))ref.push(this); else {let ref = env.refs.get(this.ref);this.env = ref.env;this.name = ref.name;this.txt = ref.txt;} else env.refs.set(this.ref,[this]);},
C280_fn_function_clause=function (sym,env,lex,state,output,len) {this.type = "INLINE";this.txt = sym[2];this.name = "";this.env = false;},
C281_fn_function_clause=function (sym,env,lex,state,output,len) {this.type = "INLINE";this.txt = "";this.name = sym[2];this.env = true;},
R300_fn_js_data_block=function (sym,env,lex,state,output,len) {return sym[0] + sym[1] + sym[2]},
R370_sym_lexer_symbol=function (sym,env,lex,state,output,len) {return sym[0]},
C420_sym_terminal_symbol=function (sym,env,lex,state,output,len) {this.type = "symbol";this.val = sym[0];},
R440_sym_symbol=function (sym,env,lex,state,output,len) {return (sym[0].IS_OPTIONAL = true,sym[0])},
C450_sym_EOF_symbol=function (sym,env,lex,state,output,len) {this.type = "eof";this.val = "$eof";},
C460_sym_empty_symbol=function (sym,env,lex,state,output,len) {this.type = "empty";},
C470_sym_generated_symbol=function (sym,env,lex,state,output,len) {this.type = "generated";this.val = sym[1];},
C480_sym_literal_symbol=function (sym,env,lex,state,output,len) {this.type = "literal";this.val = sym[1];},
C490_sym_escaped_symbol=function (sym,env,lex,state,output,len) {this.type = "escaped";this.val = sym[1];},
C500_sym_production_symbol=function (sym,env,lex,state,output,len) {this.type = "production";this.name = sym[0];this.val = -1;},
C630_cm_comment=function (sym,env,lex,state,output,len) {this.val = sym[1];},
R670_pb_production_bodies=function (sym,env,lex,state,output,len) {return (env.body_count++,[sym[0]])},
R671_pb_production_bodies=function (sym,env,lex,state,output,len) {return (env.body_count++,sym[0].push(sym[2]),sym[0])},
I672_pb_production_bodies=function (sym,env,lex,state,output,len) {env.host_lex = lex.copy()},
C690_pb_entries=function (sym,env,lex,state,output,len) {this.body = sym[0];this.reduce = sym[1];this.err = sym[2];},
C691_pb_entries=function (sym,env,lex,state,output,len) {this.body = [];this.reduce = null;},
C692_pb_entries=function (sym,env,lex,state,output,len) {this.reduce = null;this.body = [sym[0]];},
C693_pb_entries=function (sym,env,lex,state,output,len) {this.body = sym[0];this.err = sym[1];},
C694_pb_entries=function (sym,env,lex,state,output,len) {this.body = sym[0];this.reduce = sym[1];},
C695_pb_entries=function (sym,env,lex,state,output,len) {this.body = sym[0];},
R700_pb_body_entries=function (sym,env,lex,state,output,len) {return (env.body_offset = 0,[sym[0]])},
R701_pb_body_entries=function (sym,env,lex,state,output,len) {return (env.body_offset = sym[0].length,sym[0].push(sym[1]),sym[0])},
R702_pb_body_entries=function (sym,env,lex,state,output,len) {return sym[1].map(e => ((e.NO_BLANK = true,e)))},
C710_pb_condition_clause=function (sym,env,lex,state,output,len) {this.type = "exc";this.sym = sym[2];this.offset = -1;},
C711_pb_condition_clause=function (sym,env,lex,state,output,len) {this.type = "err";this.sym = sym[2];this.offset = -1;},
C712_pb_condition_clause=function (sym,env,lex,state,output,len) {this.type = "ign";this.sym = sym[2];this.offset = -1;},
C713_pb_condition_clause=function (sym,env,lex,state,output,len) {this.type = "rst";this.sym = sym[2];this.offset = -1;},

    //Sparse Map Lookup
    lsm = (index, map) => {    if (map[0] == 0xFFFFFFFF) return map[index + 1];    for (let i = 1, ind = 0, l = map.length, n = 0; i < l && ind <= index; i++) {        if (ind !== index) {            if ((n = map[i]) > -1) ind++;            else ind += -n;        } else return map[i];    }    return -1;},

    //State Action Functions
    state_funct = [(...v)=>((redn(4099,0,...v))),
()=>(58),
()=>(62),
(...v)=>(redv(5,R00_hydrocarbon,1,0,...v)),
(...v)=>((redn(18435,0,...v))),
()=>(78),
()=>(82),
()=>(86),
(...v)=>(redn(4103,1,...v)),
(...v)=>(redv(3079,R31_pre_preamble101_group_list,1,0,...v)),
(...v)=>(redn(2055,1,...v)),
(...v)=>(redn(5127,1,...v)),
()=>(98),
()=>(102),
()=>(94),
()=>(114),
()=>(106),
()=>(110),
()=>(118),
()=>(134),
()=>(130),
()=>(138),
()=>(142),
(...v)=>(redv(1035,R10_head,2,0,...v)),
(...v)=>(redv(18439,R180_prd_productions,1,0,...v)),
(...v)=>(redv(18439,R181_prd_productions,1,0,...v)),
()=>(182),
()=>(174),
()=>(178),
(...v)=>(redv(3083,R30_pre_preamble101_group_list,2,0,...v)),
()=>(222),
()=>(226),
()=>(230),
()=>(234),
()=>(270),
()=>(290),
()=>(322),
()=>(314),
()=>(326),
()=>(342),
()=>(338),
()=>(346),
(...v)=>(redv(66567,R370_sym_lexer_symbol,1,0,...v)),
(...v)=>(redn(67591,1,...v)),
(...v)=>(redv(18443,R182_prd_productions,2,0,...v)),
(...v)=>(redv(18443,R00_hydrocarbon,2,0,...v)),
(...v)=>(redv(18443,R183_prd_productions,2,0,...v)),
(...v)=>(shftf(350,I191_prd_production,...v)),
()=>(354),
(...v)=>(shftf(358,I193_prd_production,...v)),
(...v)=>(redn(53255,1,...v)),
(...v)=>(redv(58375,R370_sym_lexer_symbol,1,0,...v)),
()=>(374),
()=>(394),
()=>(398),
()=>(378),
()=>(382),
()=>(386),
()=>(390),
(...v)=>(redn(54279,1,...v)),
(...v)=>(shftf(402,I193_prd_production,...v)),
()=>(406),
()=>(410),
()=>(414),
(...v)=>(redn(36871,1,...v)),
(...v)=>(redv(35847,R31_pre_preamble101_group_list,1,0,...v)),
(...v)=>(redn(41991,1,...v)),
()=>(430),
()=>(434),
(...v)=>(redn(34823,1,...v)),
(...v)=>(redv(33799,R31_pre_preamble101_group_list,1,0,...v)),
(...v)=>(redn(37895,1,...v)),
()=>(450),
()=>(446),
(...v)=>(redn(40967,1,...v)),
()=>(454),
(...v)=>(redv(39943,R141_pre_import_preamble1802_group_list,1,0,...v)),
()=>(458),
(...v)=>(redn(43015,1,...v)),
(...v)=>(rednv(43015,C420_sym_terminal_symbol,1,0,...v)),
()=>(462),
()=>(466),
()=>(470),
()=>(478),
()=>(490),
(...v)=>(redv(12295,R31_pre_preamble101_group_list,1,0,...v)),
(...v)=>(redv(14343,R141_pre_import_preamble1802_group_list,1,0,...v)),
(...v)=>(redn(13319,1,...v)),
(...v)=>(rednv(64527,C630_cm_comment,3,0,...v)),
(...v)=>(redv(66571,R140_pre_import_preamble1802_group_list,2,0,...v)),
(...v)=>(redn(65543,1,...v)),
()=>(574),
()=>(558),
()=>(566),
()=>(554),
()=>(570),
()=>(530),
(...v)=>(redv(58379,R140_pre_import_preamble1802_group_list,2,0,...v)),
(...v)=>(redv(58379,R370_sym_lexer_symbol,2,0,...v)),
(...v)=>(redv(56327,R141_pre_import_preamble1802_group_list,1,0,...v)),
(...v)=>(redn(55303,1,...v)),
(...v)=>(redn(57351,1,...v)),
()=>(606),
()=>(610),
()=>(614),
()=>(630),
(...v)=>((redn(29699,0,...v))),
(...v)=>(rednv(8211,C80_pre_ignore_preamble,4,0,...v)),
(...v)=>(redv(35851,R30_pre_preamble101_group_list,2,0,...v)),
(...v)=>(rednv(48139,C470_sym_generated_symbol,2,0,...v)),
(...v)=>(rednv(49163,C480_sym_literal_symbol,2,0,...v)),
(...v)=>(rednv(50187,C490_sym_escaped_symbol,2,0,...v)),
(...v)=>(rednv(6163,C60_pre_symbols_preamble,4,0,...v)),
(...v)=>(redv(33803,R30_pre_preamble101_group_list,2,0,...v)),
(...v)=>(redv(37899,R370_sym_lexer_symbol,2,0,...v)),
(...v)=>(redn(38919,1,...v)),
(...v)=>(redv(39947,R140_pre_import_preamble1802_group_list,2,0,...v)),
()=>(634),
(...v)=>(rednv(10259,C100_pre_name_preamble,4,0,...v)),
(...v)=>(rednv(11283,C110_pre_ext_preamble,4,0,...v)),
(...v)=>(rednv(9235,C90_pre_error_preamble,4,0,...v)),
(...v)=>(redv(12299,R30_pre_preamble101_group_list,2,0,...v)),
()=>(646),
()=>(650),
()=>(654),
(...v)=>(redv(14347,R140_pre_import_preamble1802_group_list,2,0,...v)),
(...v)=>(redv(15367,R31_pre_preamble101_group_list,1,0,...v)),
(...v)=>(rednv(19475,C190_prd_production,4,0,...v)),
(...v)=>(shftf(658,I672_pb_production_bodies,...v)),
(...v)=>(redv(68615,R670_pb_production_bodies,1,0,...v)),
(...v)=>(rednv(69639,fn.body,1,0,...v)),
(...v)=>(rednv(70663,C695_pb_entries,1,0,...v)),
()=>(686),
(...v)=>(rednv(70663,C691_pb_entries,1,0,...v)),
(...v)=>(rednv(70663,C692_pb_entries,1,0,...v)),
(...v)=>(redv(71687,R700_pb_body_entries,1,0,...v)),
()=>(698),
()=>(702),
()=>(690),
(...v)=>(redn(45063,1,...v)),
()=>(714),
()=>(718),
()=>(722),
()=>(726),
(...v)=>(rednv(45063,C420_sym_terminal_symbol,1,0,...v)),
(...v)=>(rednv(51207,C500_sym_production_symbol,1,0,...v)),
()=>(734),
()=>(730),
(...v)=>(rednv(47111,C460_sym_empty_symbol,1,0,...v)),
(...v)=>(rednv(46087,C450_sym_EOF_symbol,1,0,...v)),
(...v)=>(rednv(52239,fn.importProduction,3,0,...v)),
(...v)=>(rednv(19475,C192_prd_production,4,0,...v)),
(...v)=>(redv(58383,R140_pre_import_preamble1802_group_list,3,0,...v)),
(...v)=>(redv(56331,R140_pre_import_preamble1802_group_list,2,0,...v)),
(...v)=>(rednv(19475,C194_prd_production,4,0,...v)),
(...v)=>(rednv(20499,C200_fn_referenced_function,4,0,...v)),
(...v)=>(redv(63495,R370_sym_lexer_symbol,1,0,...v)),
()=>(750),
()=>(766),
()=>(770),
()=>(754),
()=>(758),
()=>(762),
(...v)=>(redn(59399,1,...v)),
()=>(774),
(...v)=>(redn(29703,1,...v)),
(...v)=>(rednv(7191,C70_pre_precedence_preamble,5,0,...v)),
(...v)=>(redv(15371,R30_pre_preamble101_group_list,2,0,...v)),
(...v)=>(redn(16391,1,...v)),
(...v)=>(redv(68619,R370_sym_lexer_symbol,2,0,...v)),
(...v)=>(rednv(70667,C694_pb_entries,2,0,...v)),
()=>(802),
(...v)=>(rednv(70667,C693_pb_entries,2,0,...v)),
(...v)=>(redv(71691,R701_pb_body_entries,2,0,...v)),
()=>(842),
()=>(846),
()=>(826),
()=>(830),
()=>(834),
()=>(838),
(...v)=>(redv(45067,R440_sym_symbol,2,0,...v)),
()=>(854),
(...v)=>(redn(44039,1,...v)),
()=>(858),
()=>(862),
(...v)=>(redv(63499,R140_pre_import_preamble1802_group_list,2,0,...v)),
(...v)=>(redv(63499,R370_sym_lexer_symbol,2,0,...v)),
(...v)=>(redv(61447,R141_pre_import_preamble1802_group_list,1,0,...v)),
(...v)=>(redn(60423,1,...v)),
(...v)=>(redn(62471,1,...v)),
(...v)=>(rednv(20503,C201_fn_referenced_function,5,0,...v)),
(...v)=>(redv(29707,R140_pre_import_preamble1802_group_list,2,0,...v)),
()=>(906),
()=>(914),
(...v)=>(redv(68623,R671_pb_production_bodies,3,0,...v)),
(...v)=>(rednv(70671,C690_pb_entries,3,0,...v)),
()=>(918),
()=>(922),
()=>(926),
()=>(930),
()=>(934),
(...v)=>(redn(25607,1,...v)),
(...v)=>(redn(24583,1,...v)),
(...v)=>(redn(26631,1,...v)),
(...v)=>(redn(22535,1,...v)),
(...v)=>(redn(21511,1,...v)),
()=>(938),
(...v)=>(rednv(45071,fn.listProduction,3,0,...v)),
(...v)=>(redv(71695,R702_pb_body_entries,3,0,...v)),
(...v)=>(rednv(45071,fn.groupProduction,3,0,...v)),
()=>(942),
(...v)=>(redn(32775,1,...v)),
(...v)=>(redv(31751,R31_pre_preamble101_group_list,1,0,...v)),
()=>(950),
()=>(954),
()=>(958),
()=>(962),
(...v)=>(rednv(28687,C281_fn_function_clause,3,0,...v)),
(...v)=>(redv(63503,R140_pre_import_preamble1802_group_list,3,0,...v)),
(...v)=>(redv(61451,R140_pre_import_preamble1802_group_list,2,0,...v)),
(...v)=>(redv(30735,R300_fn_js_data_block,3,0,...v)),
()=>(966),
(...v)=>(redv(17439,fn.importData,7,0,...v)),
(...v)=>(rednv(45075,fn.listProduction,4,0,...v)),
(...v)=>(rednv(72723,C710_pb_condition_clause,4,0,...v)),
(...v)=>(redv(31755,R30_pre_preamble101_group_list,2,0,...v)),
(...v)=>(rednv(72723,C711_pb_condition_clause,4,0,...v)),
(...v)=>(rednv(72723,C712_pb_condition_clause,4,0,...v)),
(...v)=>(rednv(72723,C713_pb_condition_clause,4,0,...v)),
(...v)=>(rednv(28691,C280_fn_function_clause,4,0,...v)),
(...v)=>(redv(17443,fn.importData,8,0,...v)),
()=>(990),
(...v)=>(rednv(27667,C271_fn_reduce_function,4,0,...v)),
(...v)=>(rednv(27667,C272_fn_reduce_function,4,0,...v)),
()=>(994),
(...v)=>(rednv(23571,C231_fn_error_function,4,0,...v)),
(...v)=>(rednv(27671,C270_fn_reduce_function,5,0,...v)),
(...v)=>(rednv(23575,C230_fn_error_function,5,0,...v))],

    //Goto Lookup Functions
    goto = [v=>lsm(v,gt0),
nf,
v=>lsm(v,gt1),
v=>lsm(v,gt2),
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt3),
v=>lsm(v,gt4),
nf,
nf,
v=>lsm(v,gt5),
v=>lsm(v,gt6),
v=>lsm(v,gt7),
nf,
v=>lsm(v,gt8),
v=>lsm(v,gt9),
v=>lsm(v,gt10),
v=>lsm(v,gt11),
v=>lsm(v,gt12),
v=>lsm(v,gt13),
v=>lsm(v,gt14),
v=>lsm(v,gt15),
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt16),
nf,
nf,
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt17),
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt18),
v=>lsm(v,gt19),
nf,
nf,
v=>lsm(v,gt20),
nf,
nf,
nf,
nf,
v=>lsm(v,gt21),
nf,
nf,
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt22),
nf,
nf,
v=>lsm(v,gt23),
v=>lsm(v,gt24),
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt25),
v=>lsm(v,gt26),
v=>lsm(v,gt27),
v=>lsm(v,gt28),
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt29),
v=>lsm(v,gt30),
v=>lsm(v,gt31),
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt32),
nf,
v=>lsm(v,gt33),
nf,
nf,
v=>lsm(v,gt34),
nf,
nf,
v=>lsm(v,gt35),
nf,
nf,
v=>lsm(v,gt36),
nf,
nf,
v=>lsm(v,gt37),
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt38),
nf,
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt34),
nf,
nf,
v=>lsm(v,gt34),
nf,
v=>lsm(v,gt39),
nf,
nf,
nf,
v=>lsm(v,gt40),
v=>lsm(v,gt22),
nf,
v=>lsm(v,gt41),
nf,
v=>lsm(v,gt42),
v=>lsm(v,gt43),
nf,
nf,
nf,
v=>lsm(v,gt44),
nf,
v=>lsm(v,gt45),
nf,
nf,
nf,
v=>lsm(v,gt36),
v=>lsm(v,gt46),
nf,
v=>lsm(v,gt47),
nf,
nf,
v=>lsm(v,gt48),
v=>lsm(v,gt34),
v=>lsm(v,gt49),
v=>lsm(v,gt50),
v=>lsm(v,gt51),
v=>lsm(v,gt52),
v=>lsm(v,gt53),
v=>lsm(v,gt54),
v=>lsm(v,gt55),
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt40),
v=>lsm(v,gt40),
v=>lsm(v,gt56),
nf,
nf,
nf,
v=>lsm(v,gt57),
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt58),
nf,
nf,
nf,
nf,
v=>lsm(v,gt40),
nf,
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt59),
v=>lsm(v,gt60),
v=>lsm(v,gt61),
v=>lsm(v,gt62),
v=>lsm(v,gt63),
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt40),
nf,
nf,
v=>lsm(v,gt40),
nf,
nf,
nf];

function getToken(l, SYM_LU) {
    if (l.END) return 0; /*60*/

    switch (l.ty) {
        case 2:
            //*
            if (SYM_LU.has(l.tx)) return  14;
            /*/
                console.log(l.tx, SYM_LU.has(l.tx), SYM_LU.get(l.tx))
                if (SYM_LU.has(l.tx)) return SYM_LU.get(l.tx);
            //*/
            return 2;
        case 1:
            return 1;
        case 4:
            return 3;
        case 256:
            return 9;
        case 8:
            return 4;
        case 512:
            return 10;
        default:
            return SYM_LU.get(l.tx) || SYM_LU.get(l.ty);
    }
}

/************ Parser *************/

function parser(l, e = {}) {

    fn = e.functions;

    l.IWS = false;
    l.PARSE_STRING = true;

    if (symbols.length > 0) {
        symbols.forEach(s => { l.addSymbol(s) });
        l.tl = 0;
        l.next();
    }

    const recovery_chain = [];

    const o = [],
        ss = [0, 0];

    let time = 1000000,
        RECOVERING = 100,
        RESTARTED = true,
        tk = getToken(l, lu),
        p = l.copy(),
        sp = 1,
        len = 0,
        reduceStack = (e.reduceStack = []),
        ROOT = 10000,
        off = 0;

    outer:

        while (time-- > 0) {

            const fn = lsm(tk, state[ss[sp]]) || 0;

            let r,
                gt = -1;

            if (fn == 0) {
                /*Ignore the token*/
                tk = getToken(l.next(), lu);
                continue;
            }

            if (fn > 0) {
                r = state_funct[fn - 1](tk, e, o, l, ss[sp - 1]);
            } else {

                if (tk == 14) {
                    tk = lu.get(l.tx);
                    continue;
                }

                if (l.ty == 8 && l.tl > 1) {
                    // Make sure that special tokens are not getting in the way
                    l.tl = 0;
                    // This will skip the generation of a custom symbol
                    l.next(l, false);

                    if (l.tl == 1)
                        continue;
                }

                if (RECOVERING > 1 && !l.END) {

                    if (tk !== lu.get(l.ty)) {
                        tk = lu.get(l.ty);
                        continue;
                    }

                    if (tk !== 13) {
                        tk = 13;
                        RECOVERING = 1;
                        continue;
                    }
                }

                tk = getToken(l, lu);

                const recovery_token = eh[ss[sp]](tk, e, o, l, p, ss[sp], (lex) => getToken(lex, lu));

                if (RECOVERING > 0 && recovery_token >= 0) {
                    RECOVERING = -1; /* To prevent infinite recursion */
                    tk = recovery_token;
                    l.tl = 0; /*reset current token */
                    continue;
                }
            }

            switch (r & 3) {
                case 0:
                    /* ERROR */

                    if (tk == "$eof")
                        l.throw("Unexpected end of input");

                    l.throw(`Unexpected token [${RECOVERING ? l.next().tx : l.tx}] ${l.slice(p)}`);
                    return [null];

                case 1:
                    /* ACCEPT */
                    break outer;

                case 2:

                    /*SHIFT */
                    o.push(l.tx);
                    ss.push(off, r >> 2);
                    sp += 2;
                    l.next();
                    off = l.off;
                    tk = getToken(l, lu);
                    RECOVERING++;
                    break;

                case 3:
                    /* REDUCE */
                    RESTARTED = true;

                    len = (r & 0x3FC) >> 1;

                    ss.length -= len;
                    sp -= len;
                    gt = goto[ss[sp]](r >> 10);

                    if (gt < 0)
                        l.throw("Invalid state reached!");

                    if (reduceStack.length > 0) {
                        let i = reduceStack.length - 1;
                        while (i > -1) {
                            let item = reduceStack[i--];

                            if (item.index == sp) {
                                item.action(output)
                            } else if (item.index > sp) {
                                reduceStack.length--;
                            } else {
                                break;
                            }
                        }
                    }

                    ss.push(off, gt);
                    sp += 2;
                    break;
            }
        }
    return o[0];
}; export default parser;