const 
/************** Maps **************/

    /* Symbols To Inject into the Lexer */
    symbols = ["((","))","<>","@PREC","@SYMBOL","@IGNORE","@NAME","@EXT"],

    /* Goto lookup maps */
    gt0 = [0,-1,1,2,3,4,6,7,5,8,9,-24,10],
gt1 = [0,-10,17,18],
gt2 = [0,-4,20,6,7,5,8,9,-24,10],
gt3 = [0,-19,21,-3,22,-4,23,24,25],
gt4 = [0,-18,30,-1,31,-1,35,-5,32,33,34],
gt5 = [0,-24,40,-3,41,42,43],
gt6 = [0,-36,45,46],
gt7 = [0,-33,51],
gt8 = [0,-36,53,46],
gt9 = [0,-11,54,-22,55],
gt10 = [0,-32,56,57],
gt11 = [0,-23,59,-4,23,24,25],
gt12 = [0,-33,60],
gt13 = [0,-33,61],
gt14 = [0,-20,64,-1,35,-5,32,33,34],
gt15 = [0,-21,65],
gt16 = [0,-37,74],
gt17 = [0,-35,76,-1,74],
gt18 = [0,-12,82,83,84,85,89,-8,88,87,86,91,93,94,92,-1,96,-5,90],
gt19 = [0,-34,102],
gt20 = [0,-16,105,-8,106,-2,91,93,94,92,-1,96,-4,103,104],
gt21 = [0,-13,113,84,85,89,-8,88,87,86,91,93,94,92,-1,96,-5,90],
gt22 = [0,-17,116,-6,117,-3,41,42,43],
gt23 = [0,-17,118,-6,117,-3,41,42,43],
gt24 = [0,-17,119,-6,117,-3,41,42,43],
gt25 = [0,-36,120,46],
gt26 = [0,-33,121],
gt27 = [0,-24,126,-3,41,42,43],
gt28 = [0,-36,130,46],
gt29 = [0,-33,131],
gt30 = [0,-36,132,46],

    // State action lookup maps
    sm0=[0,1,-3,0,-4,0,-4,2,-1,3,-1,4,5,6,1,-19,7],
sm1=[0,8,-3,0,-4,0],
sm2=[0,9,-3,0,-4,0,-11,10,-19,9],
sm3=[0,11,-3,0,-4,0,-4,2,-1,3,-1,4,5,6,11,-19,7],
sm4=[0,12,-3,0,-4,0,-4,12,-1,12,-1,12,12,12,12,-19,12],
sm5=[0,13,-3,0,-4,0,-4,13,-1,13,-1,13,13,13,13,-19,13],
sm6=[0,-4,0,-4,0,-3,14,-23,15,16,17],
sm7=[0,-4,0,18,19,20,21,0,-27,15,16,17],
sm8=[0,-4,0,-4,0,-3,22,-23,15,16,17],
sm9=[0,-1,23,24,-1,25,-4,0,-3,26],
sm10=[0,-2,27,-1,0,-4,0],
sm11=[0,28,-3,0,-4,0,-11,10,-19,7],
sm12=[0,29,-3,0,-4,0,-11,29,-19,29],
sm13=[0,30,-3,0,-4,0,-4,30,-1,30,-1,30,30,30,30,-19,30],
sm14=[0,-4,0,-4,31,-3,14,-23,15,16,17],
sm15=[0,-4,0,-4,32,-3,32,-23,32,32,32],
sm16=[0,-4,0,-4,33,-3,33,-23,33,33,33],
sm17=[0,-2,27,-1,-1,-4,-1],
sm18=[0,-4,-1,-4,-1,-3,34],
sm19=[0,-4,0,18,19,20,21,35,-27,15,16,17],
sm20=[0,-4,0,36,36,36,36,36,-27,36,36,36],
sm21=[0,-4,0,37,37,37,37,37,-27,37,37,37],
sm22=[0,-4,38,39,40,41,42,43],
sm23=[0,-4,44,44,44,44,44,44],
sm24=[0,-1,45,-2,0,-4,0],
sm25=[0,-1,46,-2,0,-4,0,-3,46,-12,46,-10,46,46,46],
sm26=[0,-1,47,-2,0,-4,0,-3,47,-12,47,-10,47,47,47],
sm27=[0,-1,23,24,-1,25,-4,48,-3,26],
sm28=[0,49,49,49,-1,49,-4,49,-3,49,-28,49,-3,49],
sm29=[0,50,50,50,-1,50,-4,50,-3,50,-28,50,-3,50],
sm30=[0,-4,0,-4,51],
sm31=[0,52,52,52,-1,0,52,52,52,52,52,-3,52,-7,52,52,52,52,-1,52,-10,52,52,52,-1,52,-1,52],
sm32=[0,53,23,24,-1,25,-4,54,-3,26,-28,55],
sm33=[0,56,-3,0,-4,0,-11,56,-19,56],
sm34=[0,57,-3,0,-4,0,-11,57,-19,57],
sm35=[0,-4,0,-4,0,-12,58],
sm36=[0,-4,0,-4,0,-12,59],
sm37=[0,60,-3,0,-4,0,-4,60,-1,60,-1,60,60,60,60,-19,60],
sm38=[0,-4,0,-4,61,-3,61,-23,61,61,61],
sm39=[0,62,62,62,-1,0,62,62,62,62,62,-3,62,-7,62,-1,62,62,-1,62,-10,62,62,62,-1,62,-1,62],
sm40=[0,63,63,63,-1,0,63,63,63,63,63,-3,63,-7,63,-1,63,63,-1,63,-10,63,63,63,-1,63,-1,63],
sm41=[0,64,64,64,-1,0,64,64,64,64,64,-3,64,-7,64,-1,64,64,-1,64,-10,64,64,64,-1,64,-1,64],
sm42=[0,65,-3,0,-4,0,-4,65,-1,65,-1,65,65,65,65,-19,65],
sm43=[0,-4,0,66,66,66,66,66,-27,66,66,66],
sm44=[0,-4,0,67,67,67,67,67,-27,67,67,67],
sm45=[0,-4,68,68,68,68,68,68],
sm46=[0,-4,0,69,69,69,69,69,-27,69,69,69],
sm47=[0,-4,0,-4,70],
sm48=[0,71,-3,0,-4,0,-4,71,-1,71,-1,71,71,71,71,-19,71],
sm49=[0,72,72,72,-1,72,-4,72,-3,72,-28,72,-3,72],
sm50=[0,73,-3,0,-4,0,-4,73,-1,73,-1,73,73,73,73,-19,73],
sm51=[0,74,-3,0,-4,0,-4,74,-1,74,-1,74,74,74,74,-1,74,-17,74],
sm52=[0,75,-3,0,-4,0,-4,75,-1,75,-1,75,75,75,75,-1,75,-17,75],
sm53=[0,76,-1,27,-1,0,-4,0,-3,77,-10,78,-11,79,15,16,17,-3,80],
sm54=[0,81,-3,0,-4,0,-4,81,-1,81,-1,81,81,81,81,-19,81],
sm55=[0,82,-3,0,-4,0,-11,82,-1,83,-17,7],
sm56=[0,84,-3,0,-4,0,-11,84,-1,84,-17,84],
sm57=[0,85,-3,0,-4,0,-11,85,-1,85,-17,85],
sm58=[0,86,-1,27,-1,0,-4,0,-3,77,-7,86,-1,86,78,-12,15,16,17,-1,86,-1,87],
sm59=[0,88,-3,0,-4,0,-11,88,-1,88,-17,88],
sm60=[0,89,-3,0,-4,0,-11,89,-1,89,-17,89],
sm61=[0,90,-1,90,-1,0,-4,0,-3,90,-7,90,-1,90,90,-12,90,90,90,-1,90,-1,90],
sm62=[0,91,-1,91,-1,0,-4,0,-3,91,-7,91,-1,91,91,-12,91,91,91,-1,91,-1,91],
sm63=[0,92,-1,92,-1,0,-4,0,-3,92,-7,92,-1,92,92,-12,92,92,92,-1,92,-1,92],
sm64=[0,93,-1,93,-1,0,-4,0,-3,93,-7,93,-1,93,93,-12,93,93,93,-1,93,-1,93],
sm65=[0,94,-1,94,-1,0,-4,0,-3,94,-7,94,-1,94,94,-12,94,94,94,-1,94,-1,94],
sm66=[0,95,-1,95,-1,0,-4,0,-3,95,-7,95,-1,95,95,-12,95,95,95,-1,95,-1,95],
sm67=[0,-4,0,-4,0,-15,96,-1,97,98],
sm68=[0,-4,0,-4,0,-35,99,-2,100],
sm69=[0,101,-3,0,-4,0,-11,101,-1,101,-17,101],
sm70=[0,102,-3,0,-4,0,-11,102,-1,102,-17,102],
sm71=[0,103,-3,0,-4,0,-11,103,-1,103,-17,103],
sm72=[0,104,-3,0,-4,0,-11,104,-1,104,-17,104],
sm73=[0,105,-1,105,-1,0,-4,0,-3,105,-7,105,-1,105,105,-12,105,105,105,-1,105,-1,105],
sm74=[0,106,-1,106,-1,0,-4,0,-3,106,-7,106,-1,106,106,-12,106,106,106,-1,106,-1,106],
sm75=[0,107,-1,107,-1,0,-4,0,-3,107,-7,107,-1,107,107,-12,107,107,107,-1,107,-1,107],
sm76=[0,-4,0,-4,0,-34,108,99,-1,109,100],
sm77=[0,110,-3,0,-4,0,-11,110,-1,110,-17,110],
sm78=[0,-4,0,-4,0,-35,111,-2,112],
sm79=[0,-4,0,-4,0,-35,113],
sm80=[0,-4,0,-4,0,-3,22,-12,114,-10,15,16,17],
sm81=[0,-4,0,-4,0,-3,115,-12,115,-10,115,115,115],
sm82=[0,-4,0,-4,0,-3,22,-12,116,-10,15,16,17],
sm83=[0,-4,0,-4,0,-3,22,-12,117,-10,15,16,17],
sm84=[0,-1,23,24,-1,25,-4,0,-3,26,-32,118],
sm85=[0,119,-1,119,-1,0,-4,0,-3,119,-7,119,-1,119,119,-12,119,119,119,-1,119,-1,119],
sm86=[0,120,-1,120,-1,0,-4,0,-3,120,-7,120,-1,120,120,-12,120,120,120,-1,120,-1,120],
sm87=[0,-4,0,-4,0,-3,121,-12,121,-10,121,121,121],
sm88=[0,122,-1,122,-1,0,-4,0,-3,122,-7,122,-1,122,122,-12,122,122,122,-1,122,-1,122],
sm89=[0,123,-1,123,-1,0,-4,0,-3,123,-7,123,-1,123,123,-12,123,123,123,-1,123,-1,123],
sm90=[0,124,-1,124,-1,0,-4,0,-3,124,-7,124,-1,124,124,-12,124,124,124,-1,124,-1,124],
sm91=[0,-1,23,24,-1,25,-4,0,-3,26,-32,125],
sm92=[0,126,-3,0,-4,0,-11,126,-1,126,-17,126],
sm93=[0,-1,23,24,-1,25,-4,0,-3,26,-32,127],
sm94=[0,128,-3,0,-4,0,-11,128,-1,128,-17,128],
sm95=[0,129,-3,0,-4,0,-11,129,-1,129,-17,129],

    // Symbol Lookup map
    lu = new Map([[1,1],[2,2],[4,3],[8,4],[16,5],[32,6],[64,7],[128,8],[256,9],[512,10],[3,11],[264,11],["any",13],["@SYMBOL",14],[null,2],["@PREC",16],["@IGNORE",18],["@NAME",19],["@EXT",20],["<>",21],["→",22],["│",23],["((",24],["EXC",25],["))",26],["ERR",27],["IGN",28],["$",35],["ɛ",36],["θ",37],["τ",38],["\\",39],["#",41],[";",42],["↦",43],["cstr",44],["{",45],["}",46],["return",47],["^",48]]),

    //Reverse Symbol Lookup map
    rlu = new Map([[1,1],[2,2],[3,4],[4,8],[5,16],[6,32],[7,64],[8,128],[9,256],[10,512],[11,3],[11,264],[13,"any"],[14,"@SYMBOL"],[2,null],[16,"@PREC"],[18,"@IGNORE"],[19,"@NAME"],[20,"@EXT"],[21,"<>"],[22,"→"],[23,"│"],[24,"(("],[25,"EXC"],[26,"))"],[27,"ERR"],[28,"IGN"],[35,"$"],[36,"ɛ"],[37,"θ"],[38,"τ"],[39,"\\"],[41,"#"],[42,";"],[43,"↦"],[44,"cstr"],[45,"{"],[46,"}"],[47,"return"],[48,"^"]]),

    // States 
    state = [sm0,
sm1,
sm2,
sm3,
sm4,
sm5,
sm5,
sm5,
sm5,
sm5,
sm5,
sm6,
sm7,
sm8,
sm9,
sm10,
sm9,
sm11,
sm12,
sm10,
sm13,
sm14,
sm15,
sm16,
sm16,
sm16,
sm16,
sm17,
sm17,
sm18,
sm19,
sm20,
sm21,
sm21,
sm21,
sm22,
sm23,
sm23,
sm23,
sm23,
sm24,
sm25,
sm25,
sm25,
sm26,
sm27,
sm28,
sm29,
sm29,
sm29,
sm29,
sm30,
sm31,
sm32,
sm33,
sm34,
sm35,
sm36,
sm37,
sm38,
sm39,
sm40,
sm41,
sm42,
sm43,
sm44,
sm45,
sm45,
sm45,
sm45,
sm46,
sm46,
sm47,
sm48,
sm49,
sm50,
sm51,
sm52,
sm52,
sm52,
sm53,
sm54,
sm55,
sm56,
sm57,
sm58,
sm59,
sm60,
sm61,
sm62,
sm63,
sm64,
sm64,
sm64,
sm64,
sm65,
sm66,
sm67,
sm68,
sm69,
sm70,
sm53,
sm71,
sm72,
sm73,
sm74,
sm75,
sm76,
sm8,
sm8,
sm8,
sm9,
sm10,
sm77,
sm78,
sm79,
sm80,
sm81,
sm82,
sm83,
sm84,
sm85,
sm9,
sm10,
sm9,
sm86,
sm87,
sm88,
sm89,
sm90,
sm91,
sm92,
sm93,
sm94,
sm95],

/************ Functions *************/

    max = Math.max,

    //Error Functions
    e = (tk,r,o,l,p)=>{if(l.END)l.throw("Unexpected end of input");else if(l.ty & (264)) l.throw(`Unexpected space character within input "${1}" `) ; else l.throw(`Unexpected token ${l.tx} within input "${111}" `)}, 
    eh = [e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e],

    //Empty Function
    nf = ()=>-1, 

    //Environment Functions
    
redv = (ret, fn, plen, ln, t, e, o, l, s) => {        ln = max(o.length - plen, 0);        o[ln] = fn(o.slice(-plen), e, l, s);        o.length = ln + 1;        return ret;    },
rednv = (ret, Fn, plen, ln, t, e, o, l, s) => {        ln = max(o.length - plen, 0);        o[ln] = new Fn(o.slice(-plen), e, l, s);        o.length = ln + 1;        return ret;    },
redn = (ret, t, e, o) => (o.push(null), ret),
shftf = (ret, fn, t, e, o, l, s) => (fn(o, e, l, s), ret),
R0_S=function (sym,env,lex,state) {return sym[0]},
R0_head=function (sym,env,lex,state) {return sym[1].meta = sym[0],sym[1]},
R0_preamble_clauses=function (sym,env,lex,state) {return [sym[0]]},
R1_preamble_clauses=function (sym,env,lex,state) {return sym[0].push(sym[1]), sym[0]},
C0_symbols_preamble=function (sym,env,lex,state) {this.type='symbols'; this.symbols = sym[1];console.log(this.symbols);this.symbols.forEach(lex.addSymbol.bind(lex));},
C0_precedence_preamble=function (sym,env,lex,state) {this.type='precedence';    this.terminal = sym[1];    this.val = parseInt(sym[2])},
C0_ignore_preamble=function (sym,env,lex,state) {this.type='ignore'; this.symbols = sym[1]},
C0_name_preamble=function (sym,env,lex,state) {this.type='name'; this.id = sym[1]},
C0_ext_preamble=function (sym,env,lex,state) {this.type='ext'; this.id = sym[1]},
R0_productions=function (sym,env,lex,state) {return sym[1].id = sym[0].length, sym[0].push(sym[1]), sym[0]},
C0_production=function (sym,env,lex,state) {this.name = sym[1]; this.bodies = sym[3]; this.id = -1;},
I1_production=function (sym,env,lex,state) {env.host_lex = lex.copy()},
R0_production_bodies=function (sym,env,lex,state) {return sym[0].push(sym[2]), sym[0]},
C0_production_body=function (sym,env,lex,state) {const c = env.host_lex;c.fence(lex);this.lex = c;const s = sym[0]; this.sym = s.body.sym || []; this.length = s.body.length || 0; this.excludes = s.body.excludes || new Map();this.ignore = s.body.ignore || new Map(); this.error = s.body.error || new Map(); this.functions = s.body.functions || [];this.reduce_function = s.reduce || null;},
C0_entries=function (sym,env,lex,state) {this.body = sym[0]; this.reduce = null},
C1_entries=function (sym,env,lex,state) {this.body = sym[0]; this.reduce = sym[1]},
C2_entries=function (sym,env,lex,state) {this.body = new Object();    this.body.length = 0;    this.body.sym = [];    this.reduce = null;},
C3_entries=function (sym,env,lex,state) {this.body = new Object();    this.reduce = null;     this.body.length = 0;    this.body.sym = [sym[0]];},
C0_body_entries=function (sym,env,lex,state) {this.sym = [sym[0]]; this.length = 1; this.excludes = new Map([[1,[]]]);   this.error = new Map([[1,[]]]);   this.ignore = new Map([[1,[]]]);    this.conditions = []; this.functions = [];},
C1_body_entries=function (sym,env,lex,state) {this.sym = []; this.length = 0;    this.excludes = new Map([[0,[]]]);   this.error = new Map([[0,[]]]);   this.ignore = new Map([[0,[]]]);   sym[0].offset = this.length;    if (sym[0].type="exc")  this.excludes.get(0).push(...sym[0].sym); if (sym[0].type="err")  this.error.get(0).push(...sym[0].sym); if (sym[0].type="ign")  this.ignore.get(0).push(...sym[0].sym);   this.conditions =[];    this.functions = [];},
C2_body_entries=function (sym,env,lex,state) {this.sym = []; this.length = 0;    this.excludes = new Map([[0,[]]]);   this.error = new Map([[0,[]]]);   this.ignore = new Map([[0,[]]]);   this.functions = [sym[0]];    sym[0].offset = this.length;},
R3_body_entries=function (sym,env,lex,state) {return (sym[0].functions.push(sym[1]),   sym[1].offset = sym[0].length,  sym[0])},
R4_body_entries=function (sym,env,lex,state) {return ( sym[1].offset = sym[0].length,  (sym[1].type=="exc") ? sym[0].excludes.get(sym[1].offset).push(...sym[1].sym):null, (sym[1].type=="err") ? sym[0].error.get(sym[1].offset).push(...sym[1].sym):null, (sym[1].type=="ign") ? sym[0].ignore.get(sym[1].offset).push(...sym[1].sym):null, sym[0])},
R5_body_entries=function (sym,env,lex,state) {return (sym[0].sym.push(sym[1]),  sym[0].excludes.set(sym[0].length+1,[]), sym[0].ignore.set(sym[0].length+1,[]), sym[0].error.set(sym[0].length+1,[]), sym[0].length++, sym[0])},
C0_condition_clause=function (sym,env,lex,state) {this.type = "exc"; this.sym = sym[2]; this.offset = -1;},
C1_condition_clause=function (sym,env,lex,state) {this.type = "err"; this.sym = sym[2]; this.offset = -1;},
C2_condition_clause=function (sym,env,lex,state) {this.type = "ign"; this.sym = sym[2]; this.offset = -1;},
R0_lexer_symbols=function (sym,env,lex,state) {return console.log("Adding Symbols",sym[0]), [ sym[0] ]},
R1_lexer_symbols=function (sym,env,lex,state) {return console.log("Adding Symbols",sym[1], sym[0]), sym[0].push(sym[1]), sym[0]},
R0_grouped_symbol=function (sym,env,lex,state) {return sym[0] + sym[1]},
C0_terminal_symbol=function (sym,env,lex,state) {this.type = "symbol"; this.val = sym[0]},
C0_EOF_symbol=function (sym,env,lex,state) {this.type = "eof"; this.val = "$"},
C0_empty_symbol=function (sym,env,lex,state) {this.type = "empty";},
C0_generated_symbol=function (sym,env,lex,state) {this.type = "generated"; this.val = sym[1]},
C0_literal_symbol=function (sym,env,lex,state) {this.type = "literal"; this.val = sym[1]},
C0_escaped_symbol=function (sym,env,lex,state) {this.type = "escaped"; this.val = sym[1]},
C0_production_symbol=function (sym,env,lex,state) {this.type = "production"; this.name = sym[0]; this.val = -1},
C0_comment=function (sym,env,lex,state) {this.val = sym[1]},
C0_reduce_function=function (sym,env,lex,state) {this.type = "CLASS"; this.txt = sym[3]; this.name = ""; this.env = false;},
C1_reduce_function=function (sym,env,lex,state) {this.type = "RETURNED"; this.txt = sym[3]; this.name = ""; this.env = false;},
C2_reduce_function=function (sym,env,lex,state) {this.type = "CLASS"; this.txt = "";    this.name = sym[3]; this.env = true;},
C0_function_clause=function (sym,env,lex,state) {this.type = "INLINE"; this.txt = sym[2]; this.name = ""; this.env = false;},
C1_function_clause=function (sym,env,lex,state) {this.type = "INLINE"; this.txt = sym[2]; this.name = sym[3]; this.env = true;},

    //Sparse Map Lookup
    lsm = (index, map) => {    if (map[0] == 0xFFFFFFFF) return map[index+1];    for (let i = 1, ind = 0, l = map.length, n = 0; i < l && ind <= index; i++) {        if (ind !== index) {            if ((n = map[i]) > -1) ind++;            else ind += -n;        } else return map[i];    }    return -1;},

    //State Action Functions
    state_funct = [(...v)=>((redn(2051,...v))),
()=>(50),
()=>(54),
()=>(46),
()=>(58),
()=>(62),
()=>(66),
(...v)=>(redv(5,R0_S,1,0,...v)),
(...v)=>((redn(10243,...v))),
()=>(78),
()=>(2055),
(...v)=>(redv(3079,R0_preamble_clauses,1,0,...v)),
()=>(4103),
()=>(106),
()=>(110),
()=>(114),
()=>(118),
()=>(158),
()=>(154),
()=>(150),
()=>(146),
()=>(178),
()=>(194),
()=>(190),
()=>(198),
()=>(202),
()=>(210),
(...v)=>(redv(1035,R0_head,2,0,...v)),
(...v)=>(redv(10247,R0_preamble_clauses,1,0,...v)),
(...v)=>(redv(3083,R1_preamble_clauses,2,0,...v)),
()=>(234),
(...v)=>(redv(19463,R0_preamble_clauses,1,0,...v)),
()=>(23559),
()=>(250),
()=>(254),
(...v)=>(redv(18439,R0_lexer_symbols,1,0,...v)),
()=>(20487),
()=>(286),
()=>(278),
()=>(274),
()=>(270),
()=>(266),
()=>(282),
()=>(22535),
()=>(290),
()=>(24583),
(...v)=>(rednv(24583,C0_terminal_symbol,1,0,...v)),
()=>(294),
(...v)=>(redv(36871,R0_S,1,0,...v)),
()=>(37895),
()=>(302),
()=>(33799),
()=>(314),
()=>(310),
()=>(318),
(...v)=>(redv(10251,R0_productions,2,0,...v)),
(...v)=>(redv(10251,R0_S,2,0,...v)),
(...v)=>(shftf(322,I1_production,...v)),
()=>(32775),
(...v)=>(rednv(7183,C0_ignore_preamble,3,0,...v)),
(...v)=>(redv(19467,R1_preamble_clauses,2,0,...v)),
(...v)=>(rednv(28683,C0_generated_symbol,2,0,...v)),
(...v)=>(rednv(29707,C0_literal_symbol,2,0,...v)),
(...v)=>(rednv(30731,C0_escaped_symbol,2,0,...v)),
(...v)=>(rednv(5135,C0_symbols_preamble,3,0,...v)),
(...v)=>(redv(18443,R1_lexer_symbols,2,0,...v)),
(...v)=>(redv(20491,R0_S,2,0,...v)),
(...v)=>(redv(22539,R0_grouped_symbol,2,0,...v)),
()=>(21511),
()=>(326),
(...v)=>(rednv(8207,C0_name_preamble,3,0,...v)),
(...v)=>(redv(36875,R0_grouped_symbol,2,0,...v)),
(...v)=>(rednv(9231,C0_ext_preamble,3,0,...v)),
(...v)=>(rednv(34831,C0_comment,3,0,...v)),
()=>(35847),
()=>(402),
()=>(382),
()=>(390),
()=>(398),
()=>(394),
(...v)=>(rednv(6163,C0_precedence_preamble,4,0,...v)),
(...v)=>(rednv(11283,C0_production,4,0,...v)),
(...v)=>(shftf(406,I1_production,...v)),
(...v)=>(redv(12295,R0_preamble_clauses,1,0,...v)),
(...v)=>(rednv(13319,C0_production_body,1,0,...v)),
(...v)=>(rednv(14343,C0_entries,1,0,...v)),
()=>(430),
(...v)=>(rednv(14343,C2_entries,1,0,...v)),
(...v)=>(rednv(14343,C3_entries,1,0,...v)),
(...v)=>(rednv(15367,C0_body_entries,1,0,...v)),
(...v)=>(rednv(15367,C1_body_entries,1,0,...v)),
(...v)=>(rednv(15367,C2_body_entries,1,0,...v)),
()=>(25607),
(...v)=>(rednv(25607,C0_terminal_symbol,1,0,...v)),
(...v)=>(rednv(31751,C0_production_symbol,1,0,...v)),
()=>(434),
()=>(438),
()=>(442),
()=>(446),
()=>(450),
(...v)=>(rednv(27655,C0_empty_symbol,1,0,...v)),
(...v)=>(rednv(26631,C0_EOF_symbol,1,0,...v)),
(...v)=>(redv(12299,R0_S,2,0,...v)),
(...v)=>(rednv(14347,C1_entries,2,0,...v)),
(...v)=>(redv(15371,R3_body_entries,2,0,...v)),
(...v)=>(redv(15371,R4_body_entries,2,0,...v)),
(...v)=>(redv(15371,R5_body_entries,2,0,...v)),
()=>(458),
()=>(462),
(...v)=>(redv(12303,R0_production_bodies,3,0,...v)),
()=>(490),
()=>(494),
()=>(498),
()=>(502),
(...v)=>(redv(17415,R0_preamble_clauses,1,0,...v)),
()=>(510),
()=>(514),
()=>(518),
(...v)=>(rednv(39951,C1_function_clause,3,0,...v)),
(...v)=>(rednv(16403,C0_condition_clause,4,0,...v)),
(...v)=>(redv(17419,R1_preamble_clauses,2,0,...v)),
(...v)=>(rednv(16403,C1_condition_clause,4,0,...v)),
(...v)=>(rednv(16403,C2_condition_clause,4,0,...v)),
(...v)=>(rednv(39955,C0_function_clause,4,0,...v)),
()=>(534),
(...v)=>(rednv(38931,C2_reduce_function,4,0,...v)),
()=>(538),
(...v)=>(rednv(38935,C0_reduce_function,5,0,...v)),
(...v)=>(rednv(38935,C1_reduce_function,5,0,...v))],

    //Goto Lookup Functions
    goto = [v=>lsm(v,gt0),
nf,
v=>lsm(v,gt1),
v=>lsm(v,gt2),
nf,
nf,
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt3),
v=>lsm(v,gt4),
v=>lsm(v,gt5),
v=>lsm(v,gt6),
v=>lsm(v,gt7),
v=>lsm(v,gt8),
v=>lsm(v,gt9),
nf,
v=>lsm(v,gt10),
nf,
v=>lsm(v,gt11),
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt12),
v=>lsm(v,gt13),
nf,
v=>lsm(v,gt14),
nf,
nf,
nf,
nf,
v=>lsm(v,gt15),
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt16),
nf,
nf,
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt17),
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt18),
nf,
v=>lsm(v,gt19),
nf,
nf,
v=>lsm(v,gt20),
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt21),
nf,
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt22),
v=>lsm(v,gt23),
v=>lsm(v,gt24),
v=>lsm(v,gt25),
v=>lsm(v,gt26),
nf,
nf,
nf,
v=>lsm(v,gt27),
nf,
v=>lsm(v,gt27),
v=>lsm(v,gt27),
v=>lsm(v,gt16),
nf,
v=>lsm(v,gt28),
v=>lsm(v,gt29),
v=>lsm(v,gt30),
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt16),
nf,
v=>lsm(v,gt16),
nf,
nf];

function getToken(l, SYM_LU) {
    if (l.END) return 0; /*2*/

    switch (l.ty) {
        case 2:
            if (SYM_LU.has(l.tx)) return SYM_LU.get(l.tx);
            return 2;
        case 1:
            return 1;
        case 4:
            return 3;
        case 256:
            return 9;
        case 8:
            return 4;
        case 512:
            return 10;
        default:
            return SYM_LU.get(l.tx) || SYM_LU.get(l.ty);
    }
}

/************ Parser *************/

function parser(l, e = {}) {
    l.IWS = false;
    l.PARSE_STRING = true;

    if (symbols.length > 0) {
        symbols.forEach(s => { l.addSymbol(s) });
        l.tl = 0;
        l.next();
    }

    const o = [],
        ss = [0, 0];

    let time = 1000000,
        RECOVERING = 100,
        tk = getToken(l, lu),
        p = l.copy(),
        sp = 1,
        len = 0,
        off = 0;

    outer:

        while (time-- > 0) {

            const fn = lsm(tk, state[ss[sp]]) || 0;

            /*@*/// console.log({end:l.END, state:ss[sp], tx:l.tx, ty:l.ty, tk:tk, rev:rlu.get(tk), s_map:state[ss[sp]], res:lsm(tk, state[ss[sp]])});

            let r,
                gt = -1;

            if (fn == 0) {
                /*Ignore the token*/
                l.next();
                tk = getToken(l, lu);
                continue;
            }

            if (fn > 0) {
                r = state_funct[fn - 1](tk, e, o, l, ss[sp - 1]);
            } else {

                if (RECOVERING > 1 && !l.END) {
                    if (tk !== lu.get(l.ty)) {
                        //console.log("ABLE", rlu.get(tk), l.tx, tk )
                        tk = lu.get(l.ty);
                        continue;
                    }

                    if (tk !== 13) {
                        //console.log("MABLE")
                        tk = 13;
                        RECOVERING = 1;
                        continue;
                    }
                }

                tk = getToken(l, lu);

                const recovery_token = eh[ss[sp]](tk, e, o, l, p, ss[sp]);

                if (RECOVERING > 0 && typeof(recovery_token) == "string") {
                    RECOVERING = -1; /* To prevent infinite recursion */
                    tk = recovery_token;
                    l.tl = 0; /*reset current token */
                    continue;
                }
            }

            switch (r & 3) {
                case 0:
                    /* ERROR */

                    if (tk == "$")
                        l.throw("Unexpected end of input");
                    l.throw(`Unexpected token [\${RECOVERING ? l.next().tx : l.tx}]`);
                    return [null];

                case 1:
                    /* ACCEPT */
                    break outer;

                case 2:
                    /*SHIFT */
                    o.push(l.tx);
                    ss.push(off, r >> 2);
                    sp += 2;
                    p.sync(l);
                    l.next();
                    off = l.off;
                    tk = getToken(l, lu);
                    RECOVERING++;
                    break;

                case 3:
                    /* REDUCE */

                    len = (r & 0x3FC) >> 1;

                    ss.length -= len;
                    sp -= len;
                    gt = goto[ss[sp]](r >> 10);

                    if (gt < 0)
                        l.throw("Invalid state reached!");

                    ss.push(off, gt);
                    sp += 2;
                    break;
            }
        }
    console.log(time);
    return o[0];
}; export default parser;