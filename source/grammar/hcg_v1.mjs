let fn = {}; const 
/************** Maps **************/

    /* Symbols To Inject into the Lexer */
    symbols = ["((","))","<>","+>","@PREC","@SYMBOL","@IGNORE","@IMPORT","@NAME","@EXT","=>","(*","(+","::"],

    /* Goto lookup maps */
    gt0 = [0,-1,1,2,3,4,6,7,5,8,9,-5,10,-26,11],
gt1 = [0,-16,19,20,-28,21],
gt2 = [0,-4,25,6,7,5,8,9,-5,10,-26,11],
gt3 = [0,-25,26,-3,27,-5,28,29,30],
gt4 = [0,-24,35,-1,36,-1,40,-6,37,38,39],
gt5 = [0,-30,42,-4,43,44,45],
gt6 = [0,-44,47,48],
gt7 = [0,-41,53],
gt8 = [0,-10,55,58,56],
gt9 = [0,-44,61,48],
gt10 = [0,-17,62,-24,63,-3,64],
gt11 = [0,-39,66,65,67],
gt12 = [0,-39,69],
gt13 = [0,-41,71],
gt14 = [0,-29,73,-5,28,29,30],
gt15 = [0,-41,74],
gt16 = [0,-41,75],
gt17 = [0,-26,78,-1,40,-6,37,38,39],
gt18 = [0,-27,79],
gt19 = [0,-45,85],
gt20 = [0,-11,58,87],
gt21 = [0,-11,90,-1,89],
gt22 = [0,-43,92,-1,85],
gt23 = [0,-11,90,-1,103],
gt24 = [0,-14,104],
gt25 = [0,-18,108,109,110,111,115,-9,114,113,112,117,120,121,118,119,-1,124,-9,116],
gt26 = [0,-18,128,109,110,111,115,-9,114,113,112,117,120,121,118,119,-1,124,-9,116],
gt27 = [0,-18,130,109,110,111,115,-9,114,113,112,117,120,121,118,119,-1,124,-9,116],
gt28 = [0,-41,131],
gt29 = [0,-44,133,48,-6,132,134],
gt30 = [0,-14,136],
gt31 = [0,-42,139],
gt32 = [0,-22,142,-9,143,-2,117,120,121,118,119,-1,124,-8,140,141],
gt33 = [0,-31,147],
gt34 = [0,-18,150,109,110,111,115,-9,114,113,112,117,120,121,118,119,-1,124,-9,116],
gt35 = [0,-44,133,48,-6,157,134],
gt36 = [0,-44,133,48,-6,158,134],
gt37 = [0,-19,161,110,111,115,-9,114,113,112,117,120,121,118,119,-1,124,-9,116],
gt38 = [0,-47,162,163,164],
gt39 = [0,-30,169,-4,43,44,45],
gt40 = [0,-23,172,-6,173,-4,43,44,45],
gt41 = [0,-23,174,-6,173,-4,43,44,45],
gt42 = [0,-23,175,-6,173,-4,43,44,45],
gt43 = [0,-44,133,48,-6,176,134],
gt44 = [0,-41,177],
gt45 = [0,-30,185,-4,43,44,45],
gt46 = [0,-44,133,48,-6,189,134],
gt47 = [0,-41,190],
gt48 = [0,-41,191],

    // State action lookup maps
    sm0=[0,1,-3,0,-4,0,-4,2,-1,3,-1,4,5,6,-5,7,-2,1,1,-17,8,-2,1],
sm1=[0,9,-3,0,-4,0],
sm2=[0,10,-3,0,-4,0,-19,11,12,-17,10,-2,13],
sm3=[0,14,-3,0,-4,0,-4,2,-1,3,-1,4,5,6,-5,7,-2,14,14,-17,8,-2,14],
sm4=[0,15,-3,0,-4,0,-4,15,-1,15,-1,15,15,15,-5,15,-2,15,15,-17,15,-2,15],
sm5=[0,16,-3,0,-4,0,-4,16,-1,16,-1,16,16,16,-5,16,-2,16,16,-17,16,-2,16],
sm6=[0,-4,0,-4,0,-3,17,-30,18,19,20],
sm7=[0,-4,0,-4,0,-3,21,-30,18,19,20],
sm8=[0,-4,0,-4,0,-3,22,-30,18,19,20],
sm9=[0,-1,23,24,-1,25,-4,0,-3,26],
sm10=[0,-2,27,-1,0,-4,0],
sm11=[0,-2,28,-1,29,-4,0,-3,30],
sm12=[0,31,-3,0,-4,0,-19,11,12,-17,8,-2,13],
sm13=[0,32,-3,0,-4,0,-19,32,32,-17,32,-2,32],
sm14=[0,33,-3,0,-4,0,-19,33,33,-17,33,-2,33],
sm15=[0,-2,34,-1,0,-4,0],
sm16=[0,-2,35,-1,0,-4,0],
sm17=[0,36,-3,0,-4,0,-4,36,-1,36,-1,36,36,36,-5,36,-2,36,36,-17,36,-2,36],
sm18=[0,-4,0,-4,37,-3,17,-30,18,19,20],
sm19=[0,-4,0,-4,38,-3,38,-30,38,38,38],
sm20=[0,-4,0,-4,39,-3,39,-30,39,39,39],
sm21=[0,-2,27,-1,-1,-4,-1],
sm22=[0,-4,-1,-4,-1,-3,40],
sm23=[0,-4,0,-4,41,-3,21,-30,18,19,20],
sm24=[0,-4,0,-4,42,-3,42,-30,42,42,42],
sm25=[0,-4,0,-4,43,-3,43,-30,43,43,43],
sm26=[0,-4,44,-4,45,-3,46],
sm27=[0,-4,47,-4,47,-3,47],
sm28=[0,-1,48,-2,0,-4,0],
sm29=[0,-1,49,-2,0,-4,0,-3,49,-21,49,-5,49,-2,49,49,49],
sm30=[0,-1,50,-2,0,-4,0,-3,50,-21,50,-5,50,-2,50,50,50],
sm31=[0,-1,23,24,-1,25,-4,51,-3,26],
sm32=[0,52,52,52,-1,52,-4,52,-3,52,-36,52,-2,52,52],
sm33=[0,53,53,53,-1,53,-4,53,-3,53,-36,53,-2,53,53],
sm34=[0,-4,0,-4,54],
sm35=[0,55,55,55,-1,0,-4,55,-3,55,-15,55,55,55,55,55,-1,55,-2,55,55,55,55,-2,55,55,55,-1,55,-2,55,55,55],
sm36=[0,-2,28,-1,56,-4,0,-3,30],
sm37=[0,-2,28,-1,57,-4,0,-3,30],
sm38=[0,-2,58,-1,58,-4,0,-3,58],
sm39=[0,-2,59,-1,59,-4,0,-3,59],
sm40=[0,-2,60,-1,60,-4,0,-3,60],
sm41=[0,61,23,24,-1,25,-4,62,-3,26,-36,63],
sm42=[0,64,-3,0,-4,0,-19,64,64,-17,64,-2,64],
sm43=[0,65,-3,0,-4,0,-19,65,65,-17,65,-2,65],
sm44=[0,66,-3,0,-4,0,-19,66,66,-17,66,-2,66],
sm45=[0,-4,0,-4,0,-18,67],
sm46=[0,-4,0,-4,0,-18,68],
sm47=[0,-4,0,-4,0,-18,69],
sm48=[0,55,-1,55,-1,0,-4,0,-3,55,-14,55,55,55,55,55,55,-1,55,-2,55,55,55,-3,55,55,55,70,55,-2,55],
sm49=[0,-4,0,-4,0,-18,71],
sm50=[0,-4,0,-4,0,-37,70],
sm51=[0,-4,0,-4,0,-42,72,73],
sm52=[0,74,-3,0,-4,0,-4,74,-1,74,-1,74,74,74,-5,74,-2,74,74,-17,74,-2,74],
sm53=[0,-4,0,-4,75,-3,75,-30,75,75,75],
sm54=[0,76,76,76,-1,0,-4,76,-3,76,-15,76,76,76,76,76,-1,76,-2,76,76,76,76,-2,76,76,76,-1,76,-2,76],
sm55=[0,77,77,77,-1,0,-4,77,-3,77,-15,77,77,77,77,77,-1,77,-2,77,77,77,77,-2,77,77,77,-1,77,-2,77],
sm56=[0,78,78,78,-1,0,-4,78,-3,78,-15,78,78,78,78,78,-1,78,-2,78,78,78,78,-2,78,78,78,-1,78,-2,78],
sm57=[0,79,-3,0,-4,0,-4,79,-1,79,-1,79,79,79,-5,79,-2,79,79,-17,79,-2,79],
sm58=[0,-4,0,-4,80,-3,80,-30,80,80,80],
sm59=[0,-4,0,-4,81,-3,81,-30,81,81,81],
sm60=[0,-4,82,-4,82,-3,82],
sm61=[0,-4,0,-4,83,-3,83,-30,83,83,83],
sm62=[0,-4,0,-4,84],
sm63=[0,85,-3,0,-4,0,-4,85,-1,85,-1,85,85,85,-5,85,-2,85,85,-17,85,-2,85],
sm64=[0,86,86,86,-1,86,-4,86,-3,86,-36,86,-2,86,86],
sm65=[0,87,-3,0,-4,0,-4,87,-1,87,-1,87,87,87,-5,87,-2,87,87,-17,87,-2,87],
sm66=[0,-2,88,-1,88,-4,0,-3,88],
sm67=[0,-4,89,-4,0,-14,90,91],
sm68=[0,-2,92,-1,92,-4,0,-3,92],
sm69=[0,-4,93,-4,0,-14,93,93],
sm70=[0,94,-3,0,-4,0,-4,94,-1,94,-1,94,94,94,-5,94,-2,94,94,94,-3,94,-12,94,-2,94],
sm71=[0,95,-3,0,-4,0,-4,95,-1,95,-1,95,95,95,-5,95,-2,95,95,95,-3,95,-12,95,-2,95],
sm72=[0,96,-1,34,-1,0,-4,0,-3,97,-19,98,-9,99,18,19,20,-4,100],
sm73=[0,-2,101,-1,0,-4,0],
sm74=[0,-2,27,-1,-1,-4,0],
sm75=[0,-1,23,24,-1,25,-4,0,-3,26,-39,102,103],
sm76=[0,104,-3,0,-4,0,-4,104,-1,104,-1,104,104,104,-5,104,-2,104,104,-17,104,-2,104],
sm77=[0,-2,105,-1,0,-4,0],
sm78=[0,-4,106,-4,0,-14,106,106],
sm79=[0,-2,107,-1,0,-4,0],
sm80=[0,108,-3,0,-4,0,-19,108,108,109,-16,8,-2,108],
sm81=[0,110,-3,0,-4,0,-19,110,110,110,-3,110,-12,110,-2,110],
sm82=[0,111,-3,0,-4,0,-19,111,111,111,-3,111,-12,111,-2,111],
sm83=[0,112,-1,34,-1,0,-4,0,-3,97,-15,112,112,112,113,98,-1,112,-8,18,19,20,-1,112,-2,114],
sm84=[0,115,-3,0,-4,0,-19,115,115,115,-3,115,-12,115,-2,115],
sm85=[0,116,-3,0,-4,0,-19,116,116,116,-3,116,-12,116,-2,116],
sm86=[0,117,-1,117,-1,0,-4,0,-3,117,-15,117,117,117,117,117,-1,117,-2,118,119,120,-3,117,117,117,-1,117,-2,117],
sm87=[0,117,-1,117,-1,0,-4,0,-3,117,-15,117,117,117,117,117,-1,117,-8,117,117,117,-1,117,-2,117],
sm88=[0,121,-1,121,-1,0,-4,0,-3,121,-15,121,121,121,121,121,-1,121,-2,121,121,121,-3,121,121,121,-1,121,-2,121],
sm89=[0,122,-1,122,-1,0,-4,0,-3,122,-15,122,122,122,122,122,-1,122,-2,122,122,122,-3,122,122,122,-1,122,-2,122],
sm90=[0,96,-1,34,-1,0,-4,0,-3,97,-19,98,123,-1,124,125,-5,99,18,19,20,-4,100],
sm91=[0,126,-1,126,-1,0,-4,0,-3,126,-15,126,126,126,126,126,-1,126,-2,126,126,126,-3,126,126,126,-1,126,-2,126],
sm92=[0,-4,0,-4,0,-42,127,128],
sm93=[0,129,-3,0,-4,0,-19,129,129,129,-3,129,-12,129,-2,129],
sm94=[0,130,-3,0,-4,0,-19,130,130,130,-3,130,-12,130,-2,130],
sm95=[0,131,-3,0,-4,0,-19,131,131,109,-16,8,-2,131],
sm96=[0,132,-1,132,-1,0,-4,0,-3,132,-14,132,132,132,132,132,132,-1,132,-2,132,132,132,-3,132,132,132,-1,132,-2,132],
sm97=[0,133,-3,0,-4,0,-19,133,133,109,-16,8,-2,133],
sm98=[0,134,-3,0,-4,0,-19,134,134,-17,134,-2,134],
sm99=[0,-1,23,24,-1,25,-4,0,-3,26,-39,102,135],
sm100=[0,-1,23,24,-1,25,-4,0,-3,26,-39,136,136],
sm101=[0,-1,136,136,-1,136,-4,0,-3,136,-39,136,136],
sm102=[0,-2,137,-1,0,-4,0],
sm103=[0,-4,0,-4,138],
sm104=[0,139,-3,0,-4,0,-19,139,139,139,-3,139,-12,139,-2,139],
sm105=[0,140,-3,0,-4,0,-19,140,140,140,-3,140,-12,140,-2,140],
sm106=[0,141,-1,141,-1,0,-4,0,-3,141,-15,141,141,141,141,141,-1,141,-8,141,141,141,-1,141,-2,141],
sm107=[0,142,-1,142,-1,0,-4,0,-3,142,-15,142,142,142,142,142,-1,142,-2,118,119,120,-3,142,142,142,-1,142,-2,142],
sm108=[0,143,-1,143,-1,0,-4,0,-3,143,-15,143,143,143,143,143,-1,143,-8,143,143,143,-1,143,-2,143],
sm109=[0,-4,0,-4,0,-42,127,128,-1,144,145,146,147],
sm110=[0,148,-1,148,-1,0,-4,0,-3,148,-15,148,148,148,148,148,-1,148,-2,148,148,148,-3,148,148,148,-1,148,-2,148],
sm111=[0,-4,0,-4,0,-3,22,-27,149,-2,18,19,20],
sm112=[0,-4,0,-4,0,-3,150,-27,150,-2,150,150,150],
sm113=[0,-4,0,-4,0,-21,109,-3,151,-12,8],
sm114=[0,152,-3,0,-4,0,-19,152,152,-17,152,-2,152],
sm115=[0,-1,23,24,-1,25,-4,0,-3,26,-39,102,153],
sm116=[0,-1,23,24,-1,25,-4,0,-3,26,-39,102,154],
sm117=[0,-4,0,-4,155],
sm118=[0,156,-3,0,-4,0,-4,156,-1,156,-1,156,156,156,-5,156,-2,156,156,-17,156,-2,156],
sm119=[0,157,-3,0,-4,0,-19,157,157,157,-3,157,-12,157,-2,157],
sm120=[0,-4,0,-4,0,-43,158],
sm121=[0,-4,0,-4,0,-42,159],
sm122=[0,-4,0,-4,0,-49,160],
sm123=[0,-4,0,-4,0,-42,161,162,-5,163],
sm124=[0,-4,0,-4,0,-31,164],
sm125=[0,165,-1,165,-1,0,-4,0,-3,165,-15,165,165,165,165,165,-1,165,-2,165,165,165,-3,165,165,165,-1,165,-2,165],
sm126=[0,166,-1,166,-1,0,-4,0,-3,166,-15,166,166,166,166,166,-1,166,-2,166,166,166,-3,166,166,166,-1,166,-2,166],
sm127=[0,-4,0,-4,0,-3,22,-21,167,-8,18,19,20],
sm128=[0,-4,0,-4,0,-3,168,-21,168,-8,168,168,168],
sm129=[0,-4,0,-4,0,-3,22,-21,169,-8,18,19,20],
sm130=[0,-4,0,-4,0,-3,22,-21,170,-8,18,19,20],
sm131=[0,-1,23,24,-1,25,-4,0,-3,26,-39,102,171],
sm132=[0,172,-1,172,-1,0,-4,0,-3,172,-15,172,172,172,172,172,-1,172,-8,172,172,172,-1,172,-2,172],
sm133=[0,-1,173,173,-1,173,-4,0,-3,173,-39,173,173],
sm134=[0,174,-3,0,-4,0,-4,174,-1,174,-1,174,174,174,-5,174,-2,174,174,-17,174,-2,174],
sm135=[0,175,-1,175,-1,0,-4,0,-3,175,-15,175,175,175,175,175,-1,175,-2,175,175,175,-3,175,175,175,-1,175,-2,175],
sm136=[0,176,-1,176,-1,0,-4,0,-3,176,-15,176,176,176,176,176,-1,176,-8,176,176,176,-1,176,-2,176],
sm137=[0,-4,0,-4,0,-3,177,-21,177,-8,177,177,177],
sm138=[0,178,-1,178,-1,0,-4,0,-3,178,-15,178,178,178,178,178,-1,178,-8,178,178,178,-1,178,-2,178],
sm139=[0,179,-1,179,-1,0,-4,0,-3,179,-15,179,179,179,179,179,-1,179,-8,179,179,179,-1,179,-2,179],
sm140=[0,180,-1,180,-1,0,-4,0,-3,180,-15,180,180,180,180,180,-1,180,-8,180,180,180,-1,180,-2,180],
sm141=[0,-1,23,24,-1,25,-4,0,-3,26,-39,102,181],
sm142=[0,182,-3,0,-4,0,-19,182,182,182,-3,182,-12,182,-2,182],
sm143=[0,183,-3,0,-4,0,-19,183,183,183,-3,183,-12,183,-2,183],
sm144=[0,184,-3,0,-4,0,-19,184,184,184,-3,184,-12,184,-2,184],

    // Symbol Lookup map
    lu = new Map([[1,1],[2,2],[4,3],[8,4],[16,5],[32,6],[64,7],[128,8],[256,9],[512,10],[3,11],[264,11],[200,13],["@SYMBOL",14],[null,13],["@PREC",16],["@IGNORE",18],["@NAME",19],["@EXT",20],["AS",24],["as",25],["@IMPORT",26],["<>",29],["→",28],["+>",30],["│",31],["!",32],["((",33],["EXC",34],["))",35],["ERR",36],["IGN",37],["(+",38],["(*",39],["?",40],[")",41],["$",49],["ɛ",43],["θ",44],["τ",45],["\\",46],["::",47],["#",48],[";",50],["↦",51],["^",52],["{",53],["}",54],["cstr",55],["c",56],["return",57],["r",58],["=>",59]]),

    //Reverse Symbol Lookup map
    rlu = new Map([[1,1],[2,2],[3,4],[4,8],[5,16],[6,32],[7,64],[8,128],[9,256],[10,512],[11,3],[11,264],[13,200],[14,"@SYMBOL"],[13,null],[16,"@PREC"],[18,"@IGNORE"],[19,"@NAME"],[20,"@EXT"],[24,"AS"],[25,"as"],[26,"@IMPORT"],[29,"<>"],[28,"→"],[30,"+>"],[31,"│"],[32,"!"],[33,"(("],[34,"EXC"],[35,"))"],[36,"ERR"],[37,"IGN"],[38,"(+"],[39,"(*"],[40,"?"],[41,")"],[49,"$"],[43,"ɛ"],[44,"θ"],[45,"τ"],[46,"\\"],[47,"::"],[48,"#"],[50,";"],[51,"↦"],[52,"^"],[53,"{"],[54,"}"],[55,"cstr"],[56,"c"],[57,"return"],[58,"r"],[59,"=>"]]),

    // States 
    state = [sm0,
sm1,
sm2,
sm3,
sm4,
sm5,
sm5,
sm5,
sm5,
sm5,
sm5,
sm5,
sm6,
sm7,
sm8,
sm9,
sm10,
sm11,
sm9,
sm12,
sm13,
sm14,
sm15,
sm16,
sm10,
sm17,
sm18,
sm19,
sm20,
sm20,
sm20,
sm20,
sm21,
sm21,
sm22,
sm23,
sm24,
sm25,
sm25,
sm25,
sm26,
sm27,
sm28,
sm29,
sm29,
sm29,
sm30,
sm31,
sm32,
sm33,
sm33,
sm33,
sm33,
sm34,
sm35,
sm36,
sm37,
sm38,
sm39,
sm40,
sm40,
sm41,
sm42,
sm43,
sm44,
sm45,
sm46,
sm47,
sm48,
sm49,
sm50,
sm51,
sm52,
sm53,
sm54,
sm55,
sm56,
sm57,
sm58,
sm59,
sm60,
sm61,
sm61,
sm62,
sm63,
sm64,
sm65,
sm37,
sm66,
sm67,
sm68,
sm69,
sm70,
sm71,
sm71,
sm71,
sm72,
sm72,
sm73,
sm72,
sm74,
sm75,
sm76,
sm67,
sm77,
sm78,
sm79,
sm79,
sm80,
sm81,
sm82,
sm83,
sm84,
sm85,
sm86,
sm87,
sm87,
sm88,
sm88,
sm88,
sm88,
sm88,
sm89,
sm90,
sm91,
sm92,
sm93,
sm94,
sm95,
sm96,
sm97,
sm98,
sm99,
sm100,
sm101,
sm75,
sm102,
sm103,
sm72,
sm104,
sm105,
sm106,
sm106,
sm107,
sm108,
sm109,
sm110,
sm111,
sm112,
sm112,
sm113,
sm8,
sm8,
sm8,
sm75,
sm21,
sm114,
sm115,
sm116,
sm117,
sm118,
sm119,
sm120,
sm121,
sm122,
sm123,
sm123,
sm123,
sm123,
sm124,
sm125,
sm126,
sm127,
sm128,
sm129,
sm130,
sm131,
sm132,
sm133,
sm134,
sm75,
sm21,
sm10,
sm135,
sm136,
sm137,
sm138,
sm139,
sm140,
sm141,
sm142,
sm143,
sm144],

/************ Functions *************/

    max = Math.max,

    //Error Functions
    e = (tk,r,o,l,p)=>{if(l.END)l.throw("Unexpected end of input");else if(l.ty & (264)) l.throw(`Unexpected space character within input "${1}" `) ; else l.throw(`Unexpected token ${l.tx} within input "${111}" `)}, 
    eh = [e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e],

    //Empty Function
    nf = ()=>-1, 

    //Environment Functions
    
redv = (ret, fn, plen, ln, t, e, o, l, s) => {        ln = max(o.length - plen, 0);        o[ln] = fn(o.slice(-plen), e, l, s, o, plen);        o.length = ln + 1;        return ret;    },
rednv = (ret, Fn, plen, ln, t, e, o, l, s) => {        ln = max(o.length - plen, 0);        o[ln] = new Fn(o.slice(-plen), e, l, s, o, plen);        o.length = ln + 1;        return ret;    },
redn = (ret, plen, t, e, o, l, s) => {        let ln = max(o.length - plen, 0);        o[ln] = o[o.length -1];        o.length = ln + 1;        return ret;    },
shftf = (ret, fn, t, e, o, l, s) => (fn(o, e, l, s), ret),
R0_S=function (sym,env,lex,state,output,len) {return env.productions},
R0_head=function (sym,env,lex,state,output,len) {return env.productions.meta = sym[0]},
R0_preamble_clauses=function (sym,env,lex,state,output,len) {return [sym[0]]},
R1_preamble_clauses=function (sym,env,lex,state,output,len) {return sym[0].push(sym[1]), sym[0]},
C0_symbols_preamble=function (sym,env,lex,state,output,len) {this.type='symbols'; this.symbols = sym[1];this.symbols.forEach(lex.addSymbol.bind(lex));},
C0_precedence_preamble=function (sym,env,lex,state,output,len) {this.grammar_stamp = env.stamp; this.type='precedence';    this.terminal = sym[1];    this.val = parseInt(sym[2])},
C0_ignore_preamble=function (sym,env,lex,state,output,len) {this.grammar_stamp = env.stamp; this.type='ignore'; this.symbols = sym[1]},
C0_name_preamble=function (sym,env,lex,state,output,len) {this.type='name'; this.id = sym[1]},
C0_ext_preamble=function (sym,env,lex,state,output,len) {this.type='ext'; this.id = sym[1]},
R0_import_preamble0_list=function (sym,env,lex,state,output,len) {return sym[0].push(sym[1]),sym[0]},
R0_import_preamble2002_group_list=function (sym,env,lex,state,output,len) {return sym[0] + sym[1]},
R1_import_preamble2002_group_list=function (sym,env,lex,state,output,len) {return sym[0] + ""},
R0_productions=function (sym,env,lex,state,output,len) {return (!(sym[0].IMPORT_OVERRIDE || sym[0].IMPORT_APPEND)) ? env.productions.push(sym[0]) : 0},
R1_productions=function (sym,env,lex,state,output,len) {return env.refs.set(sym[0].id, sym[0]), null},
R2_productions=function (sym,env,lex,state,output,len) {return sym[1].id = env.productions.length, (!(sym[1].IMPORT_OVERRIDE || sym[1].IMPORT_APPEND)) ? env.productions.push(sym[1]) : 0, env.productions},
R3_productions=function (sym,env,lex,state,output,len) {return env.refs.set(sym[1].id, sym[1]), sym[0]},
C0_production=function (sym,env,lex,state,output,len) {this.name = sym[1]; this.bodies = sym[3]; this.id = -1; env.functions.compileProduction(this);},
I1_production=function (sym,env,lex,state,output,len) {env.host_lex = lex.copy(); env.prod_name = sym[sym.length - 1];},
C2_production=function (sym,env,lex,state,output,len) {this.IMPORT_OVERRIDE = true;this.name = sym[1]; this.bodies = sym[3]; this.id = -1; env.functions.compileProduction(this);},
I3_production=function (sym,env,lex,state,output,len) {env.host_lex = lex.copy(); env.prod_name = sym[sym.length - 1].name;},
C4_production=function (sym,env,lex,state,output,len) {this.IMPORT_APPEND = true;this.name = sym[1]; this.bodies = sym[3]; this.id = -1; env.functions.compileProduction(this);},
R0_production_bodies=function (sym,env,lex,state,output,len) {return env.body_count++, [sym[0]]},
R1_production_bodies=function (sym,env,lex,state,output,len) {return env.body_count++, sym[0].push(sym[2]), sym[0]},
I2_production_bodies=function (sym,env,lex,state,output,len) {env.host_lex = lex.copy()},
R3_production_bodies=function (sym,env,lex,state,output,len) {return sym[0]},
C0_entries=function (sym,env,lex,state,output,len) {this.body = sym[0]; this.reduce = null},
C1_entries=function (sym,env,lex,state,output,len) {this.body = sym[0]; this.reduce = sym[1]},
C2_entries=function (sym,env,lex,state,output,len) {this.body = [];    this.reduce = null;},
C3_entries=function (sym,env,lex,state,output,len) {this.reduce = null;     this.body = [sym[0]];},
R0_body_entries=function (sym,env,lex,state,output,len) {return env.body_offset = 0, [sym[0]]},
R1_body_entries=function (sym,env,lex,state,output,len) {return env.body_offset = sym[0].length, sym[0].push(sym[1]), sym[0]},
R2_body_entries=function (sym,env,lex,state,output,len) {return env.body_offset = sym[0].length,  sym[0].push(sym[1]), sym[0]},
R3_body_entries=function (sym,env,lex,state,output,len) {return sym[0].map(e => (e.NO_BLANK = true, e))},
R0_condition_clause=function (sym,env,lex,state,output,len) {return this.type = "exc"; this.sym = sym[2]; this.offset = -1;},
C1_condition_clause=function (sym,env,lex,state,output,len) {this.type = "err"; this.sym = sym[2]; this.offset = -1;},
C2_condition_clause=function (sym,env,lex,state,output,len) {this.type = "ign"; this.sym = sym[2]; this.offset = -1;},
R0_lexer_symbols=function (sym,env,lex,state,output,len) {return [ sym[0] ]},
C0_terminal_symbol=function (sym,env,lex,state,output,len) {this.type = "symbol"; this.val = sym[0]},
R0_symbol=function (sym,env,lex,state,output,len) {return sym[0].IS_OPTIONAL = true, sym[0]},
C0_EOF_symbol=function (sym,env,lex,state,output,len) {this.type = "eof"; this.val = "$"},
C0_empty_symbol=function (sym,env,lex,state,output,len) {this.type = "empty";},
C0_generated_symbol=function (sym,env,lex,state,output,len) {this.type = "generated"; this.val = sym[1]},
C0_literal_symbol=function (sym,env,lex,state,output,len) {this.type = "literal"; this.val = sym[1]},
C0_escaped_symbol=function (sym,env,lex,state,output,len) {this.type = "escaped"; this.val = sym[1]},
C0_production_symbol=function (sym,env,lex,state,output,len) {this.type = "production"; this.name = sym[0]; this.val = -1},
C0_comment=function (sym,env,lex,state,output,len) {this.val = sym[1]},
C0_referenced_function=function (sym,env,lex,state,output,len) {this.txt = ""; this.env = true;this.name = sym[3];this.id = sym[1];},
C1_referenced_function=function (sym,env,lex,state,output,len) {this.txt = sym[3]; this.env = false;this.name = "";this.id = sym[1];},
C0_reduce_function=function (sym,env,lex,state,output,len) {this.type = (sym[1][0] == "c" ) ?"CLASS" :"RETURNED"; this.txt = sym[3]; this.name = ""; this.env = false;this.ref = "";},
C1_reduce_function=function (sym,env,lex,state,output,len) {this.type = (sym[1][0] == "c" ) ?"CLASS" :"RETURNED"; this.txt = ""; this.name = sym[3]; this.env = true;this.ref = "";},
C2_reduce_function=function (sym,env,lex,state,output,len) {this.ref = sym[3];this.type = (sym[1][0] == "c" ) ?"CLASS" :"RETURNED"; this.txt = "";    this.name = ""; this.env = true;const ref = env.refs.get(this.ref);if(ref){if(Array.isArray(ref)){ref.push(this);}else{let ref = env.refs.get(this.ref);this.env = ref.env;this.name = ref.name;this.txt = ref.txt;}}else{env.refs.set(this.ref, [this]);}},
C0_function_clause=function (sym,env,lex,state,output,len) {this.type = "INLINE"; this.txt = sym[2]; this.name = ""; this.env = false;},
C1_function_clause=function (sym,env,lex,state,output,len) {this.type = "INLINE"; this.txt = ""; this.name = sym[2]; this.env = true;},
R0_js_data_block=function (sym,env,lex,state,output,len) {return sym[0] + sym[1] + sym[2]},

    //Sparse Map Lookup
    lsm = (index, map) => {    if (map[0] == 0xFFFFFFFF) return map[index+1];    for (let i = 1, ind = 0, l = map.length, n = 0; i < l && ind <= index; i++) {        if (ind !== index) {            if ((n = map[i]) > -1) ind++;            else ind += -n;        } else return map[i];    }    return -1;},

    //State Action Functions
    state_funct = [(...v)=>((redn(2051,0,...v))),
()=>(54),
()=>(58),
()=>(50),
()=>(62),
()=>(66),
()=>(70),
()=>(74),
(...v)=>(redv(5,R0_S,1,0,...v)),
(...v)=>((redn(16387,0,...v))),
()=>(90),
()=>(94),
()=>(98),
(...v)=>(redn(2055,1,...v)),
(...v)=>(redv(3079,R0_preamble_clauses,1,0,...v)),
(...v)=>(redn(4103,1,...v)),
()=>(126),
()=>(130),
()=>(134),
()=>(138),
()=>(166),
()=>(186),
()=>(202),
()=>(198),
()=>(206),
()=>(210),
()=>(218),
()=>(238),
()=>(230),
()=>(242),
(...v)=>(redv(1035,R0_head,2,0,...v)),
(...v)=>(redv(16391,R0_productions,1,0,...v)),
(...v)=>(redv(16391,R1_productions,1,0,...v)),
()=>(274),
()=>(282),
(...v)=>(redv(3083,R1_preamble_clauses,2,0,...v)),
()=>(290),
(...v)=>(redv(25607,R0_preamble_clauses,1,0,...v)),
(...v)=>(redn(29703,1,...v)),
()=>(306),
()=>(310),
(...v)=>(redv(24583,R0_lexer_symbols,1,0,...v)),
(...v)=>(redn(26631,1,...v)),
()=>(330),
()=>(326),
()=>(322),
(...v)=>(redn(28679,1,...v)),
()=>(334),
(...v)=>(redn(30727,1,...v)),
(...v)=>(rednv(30727,C0_terminal_symbol,1,0,...v)),
()=>(338),
(...v)=>(redv(45063,R3_production_bodies,1,0,...v)),
(...v)=>(redn(46087,1,...v)),
()=>(346),
(...v)=>(redn(41991,1,...v)),
()=>(354),
()=>(366),
(...v)=>(redv(10247,R0_preamble_clauses,1,0,...v)),
(...v)=>(redv(12295,R1_import_preamble2002_group_list,1,0,...v)),
(...v)=>(redn(11271,1,...v)),
()=>(378),
()=>(374),
()=>(382),
(...v)=>(redv(16395,R2_productions,2,0,...v)),
(...v)=>(redv(16395,R0_S,2,0,...v)),
(...v)=>(redv(16395,R3_productions,2,0,...v)),
(...v)=>(shftf(386,I1_production,...v)),
(...v)=>(shftf(390,I3_production,...v)),
(...v)=>(redn(40967,1,...v)),
()=>(394),
(...v)=>(shftf(398,I3_production,...v)),
()=>(402),
()=>(406),
(...v)=>(rednv(7183,C0_ignore_preamble,3,0,...v)),
(...v)=>(redv(25611,R1_preamble_clauses,2,0,...v)),
(...v)=>(rednv(35851,C0_generated_symbol,2,0,...v)),
(...v)=>(rednv(36875,C0_literal_symbol,2,0,...v)),
(...v)=>(rednv(37899,C0_escaped_symbol,2,0,...v)),
(...v)=>(rednv(5135,C0_symbols_preamble,3,0,...v)),
(...v)=>(redv(24587,R1_preamble_clauses,2,0,...v)),
(...v)=>(redv(26635,R3_production_bodies,2,0,...v)),
(...v)=>(redv(28683,R0_import_preamble2002_group_list,2,0,...v)),
(...v)=>(redn(27655,1,...v)),
()=>(410),
(...v)=>(rednv(8207,C0_name_preamble,3,0,...v)),
(...v)=>(redv(45067,R0_import_preamble2002_group_list,2,0,...v)),
(...v)=>(rednv(9231,C0_ext_preamble,3,0,...v)),
(...v)=>(redv(10251,R0_import_preamble0_list,2,0,...v)),
()=>(422),
()=>(426),
()=>(430),
(...v)=>(redv(12299,R0_import_preamble2002_group_list,2,0,...v)),
(...v)=>(redv(13319,R0_preamble_clauses,1,0,...v)),
(...v)=>(rednv(43023,C0_comment,3,0,...v)),
(...v)=>(redn(44039,1,...v)),
()=>(510),
()=>(490),
()=>(494),
()=>(506),
()=>(502),
()=>(518),
()=>(542),
(...v)=>((redn(53251,0,...v))),
(...v)=>(rednv(6163,C0_precedence_preamble,4,0,...v)),
()=>(550),
(...v)=>(redv(13323,R0_import_preamble0_list,2,0,...v)),
(...v)=>(redn(14343,1,...v)),
(...v)=>(rednv(17427,C0_production,4,0,...v)),
(...v)=>(shftf(554,I2_production_bodies,...v)),
(...v)=>(redv(18439,R0_production_bodies,1,0,...v)),
(...v)=>(rednv(19463,fn.body,1,0,...v)),
(...v)=>(rednv(20487,C0_entries,1,0,...v)),
()=>(578),
()=>(582),
(...v)=>(rednv(20487,C2_entries,1,0,...v)),
(...v)=>(rednv(20487,C3_entries,1,0,...v)),
(...v)=>(redv(21511,R0_body_entries,1,0,...v)),
()=>(594),
()=>(598),
()=>(586),
(...v)=>(redn(32775,1,...v)),
(...v)=>(rednv(32775,C0_terminal_symbol,1,0,...v)),
()=>(606),
()=>(610),
()=>(614),
(...v)=>(rednv(38919,C0_production_symbol,1,0,...v)),
()=>(622),
()=>(618),
(...v)=>(rednv(34823,C0_empty_symbol,1,0,...v)),
(...v)=>(rednv(33799,C0_EOF_symbol,1,0,...v)),
(...v)=>(rednv(17427,C2_production,4,0,...v)),
(...v)=>(rednv(39951,fn.importProduction,3,0,...v)),
(...v)=>(rednv(17427,C4_production,4,0,...v)),
(...v)=>(rednv(47123,C0_referenced_function,4,0,...v)),
()=>(626),
(...v)=>(redn(53255,1,...v)),
()=>(638),
()=>(642),
(...v)=>(redv(18443,R3_production_bodies,2,0,...v)),
(...v)=>(rednv(20491,C1_entries,2,0,...v)),
(...v)=>(redv(21515,R1_body_entries,2,0,...v)),
(...v)=>(redv(21515,R2_body_entries,2,0,...v)),
(...v)=>(redv(21515,R3_body_entries,2,0,...v)),
()=>(662),
()=>(666),
()=>(670),
()=>(674),
(...v)=>(redv(32779,R0_symbol,2,0,...v)),
()=>(682),
(...v)=>(redn(31751,1,...v)),
()=>(686),
(...v)=>(rednv(47127,C1_referenced_function,5,0,...v)),
(...v)=>(redv(53259,R0_import_preamble2002_group_list,2,0,...v)),
()=>(714),
()=>(718),
(...v)=>(redv(15387,fn.importData,6,0,...v)),
(...v)=>(redv(18447,R1_production_bodies,3,0,...v)),
()=>(722),
()=>(726),
()=>(730),
(...v)=>(redn(49159,1,...v)),
(...v)=>(redn(48135,1,...v)),
(...v)=>(redn(50183,1,...v)),
()=>(734),
(...v)=>(rednv(32783,fn.listProduction,3,0,...v)),
(...v)=>(rednv(32783,fn.groupProduction,3,0,...v)),
()=>(738),
(...v)=>(redv(23559,R0_preamble_clauses,1,0,...v)),
()=>(746),
()=>(750),
()=>(754),
(...v)=>(rednv(52239,C1_function_clause,3,0,...v)),
(...v)=>(redv(54287,R0_js_data_block,3,0,...v)),
(...v)=>(redv(15391,fn.importData,7,0,...v)),
(...v)=>(rednv(32787,fn.listProduction,4,0,...v)),
(...v)=>(redv(22547,R0_condition_clause,4,0,...v)),
(...v)=>(redv(23563,R1_preamble_clauses,2,0,...v)),
(...v)=>(rednv(22547,C1_condition_clause,4,0,...v)),
(...v)=>(rednv(22547,C2_condition_clause,4,0,...v)),
(...v)=>(rednv(52243,C0_function_clause,4,0,...v)),
()=>(770),
(...v)=>(rednv(51219,C1_reduce_function,4,0,...v)),
(...v)=>(rednv(51219,C2_reduce_function,4,0,...v)),
(...v)=>(rednv(51223,C0_reduce_function,5,0,...v))],

    //Goto Lookup Functions
    goto = [v=>lsm(v,gt0),
nf,
v=>lsm(v,gt1),
v=>lsm(v,gt2),
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt3),
v=>lsm(v,gt4),
v=>lsm(v,gt5),
v=>lsm(v,gt6),
v=>lsm(v,gt7),
v=>lsm(v,gt8),
v=>lsm(v,gt9),
v=>lsm(v,gt10),
nf,
nf,
v=>lsm(v,gt11),
v=>lsm(v,gt12),
v=>lsm(v,gt13),
nf,
v=>lsm(v,gt14),
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt15),
v=>lsm(v,gt16),
nf,
v=>lsm(v,gt17),
nf,
nf,
nf,
nf,
v=>lsm(v,gt18),
nf,
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt19),
nf,
nf,
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt20),
v=>lsm(v,gt21),
nf,
nf,
nf,
nf,
v=>lsm(v,gt22),
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt23),
nf,
v=>lsm(v,gt24),
nf,
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt25),
v=>lsm(v,gt26),
nf,
v=>lsm(v,gt27),
v=>lsm(v,gt28),
v=>lsm(v,gt29),
nf,
v=>lsm(v,gt30),
nf,
nf,
nf,
nf,
v=>lsm(v,gt31),
nf,
nf,
v=>lsm(v,gt32),
nf,
nf,
v=>lsm(v,gt33),
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt34),
nf,
nf,
nf,
nf,
v=>lsm(v,gt31),
nf,
v=>lsm(v,gt31),
nf,
v=>lsm(v,gt35),
v=>lsm(v,gt19),
nf,
v=>lsm(v,gt36),
nf,
nf,
v=>lsm(v,gt37),
nf,
nf,
nf,
nf,
v=>lsm(v,gt33),
nf,
v=>lsm(v,gt38),
nf,
v=>lsm(v,gt39),
nf,
nf,
v=>lsm(v,gt31),
v=>lsm(v,gt40),
v=>lsm(v,gt41),
v=>lsm(v,gt42),
v=>lsm(v,gt43),
v=>lsm(v,gt44),
nf,
v=>lsm(v,gt35),
v=>lsm(v,gt35),
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt45),
nf,
v=>lsm(v,gt45),
v=>lsm(v,gt45),
v=>lsm(v,gt35),
nf,
nf,
nf,
v=>lsm(v,gt46),
v=>lsm(v,gt47),
v=>lsm(v,gt48),
nf,
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt35),
nf,
nf,
nf];

function getToken(l, SYM_LU) {
    if (l.END) return 0; /*13*/

    switch (l.ty) {
        case 2:
            if (SYM_LU.has(l.tx)) return SYM_LU.get(l.tx);
            return 2;
        case 1:
            return 1;
        case 4:
            return 3;
        case 256:
            return 9;
        case 8:
            return 4;
        case 512:
            return 10;
        default:
            return SYM_LU.get(l.tx) || SYM_LU.get(l.ty);
    }
}

/************ Parser *************/

function parser(l, e = {}) {
    
    fn = e.functions;

    l.IWS = false;
    l.PARSE_STRING = true;

    if (symbols.length > 0) {
        symbols.forEach(s => { l.addSymbol(s) });
        l.tl = 0;
        l.next();
    }

    const o = [],
        ss = [0, 0];

    let time = 1000000,
        RECOVERING = 100,
        tk = getToken(l, lu),
        p = l.copy(),
        sp = 1,
        len = 0,
        off = 0;

    outer:

        while (time-- > 0) {

            const fn = lsm(tk, state[ss[sp]]) || 0;

            /*@*/// console.log({end:l.END, state:ss[sp], tx:l.tx, ty:l.ty, tk:tk, rev:rlu.get(tk), s_map:state[ss[sp]], res:lsm(tk, state[ss[sp]])});

            let r,
                gt = -1;

            if (fn == 0) {
                /*Ignore the token*/
                l.next();
                tk = getToken(l, lu);
                continue;
            }

            if (fn > 0) {
                r = state_funct[fn - 1](tk, e, o, l, ss[sp - 1]);
            } else {
                if (RECOVERING > 1 && !l.END) {
                    if (tk !== lu.get(l.ty)) {
                        //console.log("ABLE", rlu.get(tk), l.tx, tk )
                        tk = lu.get(l.ty);
                        continue;
                    }

                    if (tk !== 13) {
                        //console.log("MABLE")
                        tk = 13;
                        RECOVERING = 1;
                        continue;
                    }
                }

                tk = getToken(l, lu);

                const recovery_token = eh[ss[sp]](tk, e, o, l, p, ss[sp], lu);

                if (RECOVERING > 0 && recovery_token) {
                    RECOVERING = -1; /* To prevent infinite recursion */
                    tk = recovery_token;
                    l.tl = 0; /*reset current token */
                    continue;
                }
            }

            switch (r & 3) {
                case 0:
                    /* ERROR */

                    if (tk == "$")
                        l.throw("Unexpected end of input");
                    l.throw(`Unexpected token [${RECOVERING ? l.next().tx : l.tx}]`);
                    return [null];

                case 1:
                    /* ACCEPT */
                    break outer;

                case 2:
                    /*SHIFT */
                    o.push(l.tx);
                    ss.push(off, r >> 2);
                    sp += 2;
                    p.sync(l);
                    l.next();
                    off = l.off;
                    tk = getToken(l, lu);
                    RECOVERING++;
                    break;

                case 3:
                    /* REDUCE */

                    len = (r & 0x3FC) >> 1;

                    ss.length -= len;
                    sp -= len;
                    gt = goto[ss[sp]](r >> 10);

                    if (gt < 0)
                        l.throw("Invalid state reached!");

                    ss.push(off, gt);
                    sp += 2;
                    break;
            }
        }
    return o[0];
}; export default parser;