
@SYMBOL <> +>

# sddfs

@IMPORT ./production_bodies.hcg as pb

# sddfs

@IMPORT ./functions.hcg as fn

# sddfs

@IMPORT ./symbols.hcg as sym

# sddfs

@IMPORT ./comments.hcg as cm

# sddfs

@IGNORE θws θnl

########################################################################################################################
######################################  PRODUCTIONS
########################################################################################################################

<> productions → production  										
															↦return {  
																(!($sym1.IMPORT_OVERRIDE || $sym1.IMPORT_APPEND)) ? 
																env.productions.push($sym1) : 0 
															}
	│ fn::referenced_function									
															↦return {  
																env.refs.set($sym1.id,$sym1), null 
															}
	│ productions production 	 							
															↦return {  
																$sym2.id = env.productions.length, 
																(!($sym2.IMPORT_OVERRIDE || $sym2.IMPORT_APPEND)) ? 
																env.productions.push($sym2) : 0, 
																env.productions 
															}
	│ productions cm::comment 	 							    
															↦return {  
																env.productions 
															}
	│ productions fn::referenced_function						
															↦return {  
																env.refs.set($sym2.id, $sym2), 
																$sym1 
															}
	│ ɛ 	
 
<> production → 
	
	\<>  sym::production_id  ↦{ env.host_lex = lex.copy(); env.prod_name = sym[sym.length - 1] } \→  pb::production_bodies  			
																		
															↦cstr{ 
																this.name = $sym2; 
																this.bodies = $sym4; 
																this.id = -1; 
																env.functions.compileProduction(this);
															}

	# REDEFINED IMPORT production. Allows an imported production to be redefined entirely. 

	│ \<> sym::imported_production_symbol ↦{ env.host_lex = lex.copy(); env.prod_name = sym[sym.length - 1].name; } \→ pb::production_bodies

															↦cstr{ 
																this.IMPORT_OVERRIDE = true;
																this.name = $sym2; 
																this.bodies = $sym4; 
																this.id = -1; 
																env.functions.compileProduction(this);
															}

	# APPENDED IMPORT production. Allows additional bodies to defined for productions imported from other files. 

	│ \+> sym::imported_production_symbol ↦{ env.host_lex = lex.copy(); env.prod_name = sym[sym.length - 1].name;} \→  pb::production_bodies

															↦cstr{ 
																this.IMPORT_APPEND = true;
																this.name = $sym2; 
																this.bodies = $sym4; 
																this.id = -1; 
																env.functions.compileProduction(this);
															}
	
