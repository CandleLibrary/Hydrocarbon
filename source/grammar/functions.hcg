@SYMBOL =>

# sddfs

@IMPORT ./symbols.hcg as sym

# sddfs

@IMPORT ./comments.hcg as cm

# sddfs

@IGNORE θws θnl

########################################################################################################################
######################################  FUNCTIONS
########################################################################################################################

<> referenced_function → 

	\↦  sym::identifier  ^ (ERR θws ) sym::identifier  		
																	↦cstr{ 		
																		this.id = $sym2; 	
																		this.name = $sym4;
																		this.txt = ""; 
																		this.env = true;	
																	}

	│ \↦  sym::identifier  { js_data }  		
																	↦cstr{ 		
																		this.id = $sym2; 	
																		this.txt = $sym4; 
																		this.env = false;	
																		this.name = "";
																	}

<> error_function → 	

	\↦ ( τerr │ τe ) { js_data } 									↦cstr{ 
																		this.type = "ERROR"; 	
																		this.txt = $sym4; 
																		this.name = ""; 
																		this.env = false;
																		this.ref = ""; 	
																	}

	│ \↦ ( τerr │ τe ) ^ (ERR θws θnl ) sym::identifier 	

 																	↦cstr{ 
																		this.type = "ERROR"; 			
																		this.txt = ""; 
																		this.name = $sym4; 
																		this.env = true;
																		this.ref = ""; 	   
																	}
<> reduce_function → 

	\↦ ( τcstr │ τc │ τreturn │ τr ) { js_data } 								
																	↦cstr{ 
																		this.type = ($sym2[0] == "c" ) ?"CLASS" :"RETURNED"; 	
																		this.txt = $sym4; 
																		this.name = ""; 
																		this.env = false;
																		this.ref = ""; 	
																	}

 	│ \↦ ( τcstr │ τc │ τreturn │ τr ) ^ (ERR θws θnl ) sym::identifier 	

 																	↦cstr{ 
																		this.type = ($sym2[0] == "c" ) ?"CLASS" :"RETURNED"; 			
																		this.txt = ""; 
																		this.name = $sym4; 
																		this.env = true;
																		this.ref = ""; 	   
																	}
	│ \↦ ( τcstr │ τc │ τreturn │ τr ) =>  sym::identifier	
																	↦cstr{ 
																		this.type = ($sym2[0] == "c" ) ?"CLASS" :"RETURNED"; 			
																		this.ref = $sym4;
																		this.txt = ""; 	   
																		this.name = ""; 
																		this.env = true;

																		const ref = env.refs.get(this.ref);

																		if(ref){
																			if(Array.isArray(ref)){
																				ref.push(this);
																			}
																			else{
																				let ref = env.refs.get(this.ref);
																				this.env = ref.env;
																				this.name = ref.name;
																				this.txt = ref.txt;
																			}
																		}else{
																			env.refs.set(this.ref, [this]);
																		}
																		
																	}

<> function_clause → 
	
	\↦ { js_data } 								
																	↦cstr{
																		this.type = "INLINE"; 	
																		this.txt = $sym3; 
																		this.name = ""; 	
																		this.env = false;
																	}

	│ \↦ ^ (ERR θws θnl ) sym::identifier 							
																	↦cstr{
																		this.type = "INLINE"; 	
																		this.txt = ""; 
																		this.name = $sym3; 	
																		this.env = true;
																	}

<> js_data → cm::comment_data
	│ js_data_block
	│ js_data js_data											↦return { $sym1 + $sym2 }
	│ ɛ

<> js_data_block → { js_data }									↦return { $sym1 + $sym2 + $sym3 }
