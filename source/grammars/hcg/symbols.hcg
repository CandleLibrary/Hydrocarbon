@IMPORT ./production_bodies.hcg as pb

@IMPORT ../misc/default-productions.hcg as def

@IGNORE g:ws g:nl

#######################################################################################################################
######################################  SYMBOLS
########################################################################################################################

<> hcg_symbols > symbol(+)

<> condition_symbol_list → terminal_symbol(+)

<> lexer_symbols → lexer_symbol(+)                                     

<> ignore_symbols → ignore_symbol(+)                                      

<> lexer_symbol → generated_symbol
    │ literal_symbol
    │ escaped_symbol
    │ grouped_symbol grouped_delimiter                                 ↦cstr{ this.type = "symbol"; this.val = $sym1; this.pos = pos; env.symbols.push(this) }    

<> grouped_delimiter →  g:nl │ g:ws                                    

<> grouped_symbol →  ( g:sym │ g:id )(+\" )  sym_delimiter?   ↦cstr{ this.type = "symbol"; this.val = $sym1; this.pos = pos; env.symbols.push(this)}                                                    

<> ignore_symbol → generated_symbol
    │ literal_symbol
    │ escaped_symbol
    | production_token_symbol

<>  terminal_symbol → generated_symbol
    │ literal_symbol
    │ escaped_symbol
    

<> symbol → symbol \?                                            ↦return{ $sym1.IS_OPTIONAL = true, $sym1 }
    | \?= symbol                                                 ↦return{ $sym2.IS_NON_CAPTURE = true, $sym2 }
    | generated_symbol 
    │ production_symbol
    | production_token_symbol
    │ imported_production_symbol
    │ literal_symbol
    │ escaped_symbol
    | EOF_symbol             
    │ \( pb::production_bodies \)                        
                                                                ↦cstr ^groupProduction    
    
    # This defines a list of virtual productions that reduces to an array of productions. 
    # A delimiter "terminal_symbol" can be defined to cause the parser to match such productions as { sym , sym , sym ...} 
    # or { term . term . term ...}. If the "terminal_symbol" is a single or double quotation (\" or \') then the production
    # values are automatically reduced to a string. 
    │ symbol ( \(+ │ \(* )  terminal_symbol?  \)                ↦cstr ^listProduction                                            
    │ g:sym                                                      ↦cstr{ this.type = "symbol"; this.val = $sym1; this.pos = pos; env.symbols.push(this)}

<> EOF_symbol → 
    \$eof                                                       ↦cstr{ this.type = "eof"; this.val = "END_OF_FILE"; this.pos = pos; env.symbols.push(this) }

<> empty_symbol → 
    \ɛ                                                          ↦cstr{ this.type = "empty"; this.pos = pos; env.symbols.push(this) }

<> generated_symbol → 
    ( \θ │ \g: ) (ERR θws θnl) identifier                       ↦cstr{ this.type = "generated"; this.val = $sym2; this.pos = pos; env.symbols.push(this) }

<> literal_symbol → 
    ( \τ │ \t: ) (ERR g:ws g:nl)  ( identifier │ g:num ) sym_delimiter? 
                                                                ↦cstr{ this.type = "literal"; this.val = ""+$sym2; this.pos = pos; env.symbols.push(this) }

<> escaped_symbol → 
    \\ ( g:id | g:sym | g:num )(+\" ) sym_delimiter                        ↦cstr{ this.type = "symbol"; this.val = $sym2; this.pos = pos; env.symbols.push(this) }

<> production_token_symbol > \tk: identifier                    ↦cstr{ this.type = "production_token"; this.name = $sym2; this.val = -1; this.pos = pos; env.symbols.push(this) }

<> production_symbol → 
    identifier                                                  ↦cstr{ this.type = "production"; this.name = $sym1; this.val = -1; this.pos = pos; env.symbols.push(this) }

<> imported_production_symbol → 
    identifier \:: identifier                                   ↦c ^importProduction

<> production_id → identifier

<> identifier →  def::js_identifier 

<> js_identifier →  def::js_identifier

<> sym_delimiter >  g:ws | $eof  | g:nl 