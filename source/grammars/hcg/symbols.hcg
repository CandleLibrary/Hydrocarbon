@IMPORT ./production_bodies.hcg as pb

@IMPORT ../misc/default-productions.hcg as def

@IGNORE θws θnl

#######################################################################################################################
######################################  SYMBOLS
########################################################################################################################

<> hcg_symbols > condition_symbol_list

<> condition_symbol_list → terminal_symbol(+)

<> lexer_symbols → lexer_symbol(+)                                     

<> ignore_symbols → ignore_symbol(+)                                      

<> lexer_symbol → generated_symbol
    │ literal_symbol
    │ escaped_symbol
    │ grouped_symbol grouped_delimiter                                 ↦cstr{ this.type = "symbol"; this.val = $sym1; this.pos = pos; env.symbols.push(this) }    

<> grouped_delimiter →  θnl │ θws                                    

<> grouped_symbol →  ( θsym │ θid )(+\" )  sym_delimter?   ↦cstr{ this.type = "symbol"; this.val = $sym1; this.pos = pos; env.symbols.push(this)}                                                    

<> ignore_symbol → generated_symbol
    │ literal_symbol
    │ escaped_symbol

<>  terminal_symbol → generated_symbol
    │ literal_symbol
    │ escaped_symbol
    | assert_function_symbol

<> symbol → generated_symbol
    │ production_symbol
    | production_token_symbol
    │ imported_production_symbol
    │ literal_symbol
    │ escaped_symbol
    │ assert_function_symbol
    │ \( pb::production_bodies \)                                     
                                                                ↦cstr ^groupProduction    
    │ symbol \?                                                 ↦return{ $sym1.IS_OPTIONAL = true, $sym1 }    
    
    # This defines a list of virtual productions that reduces to an array of productions. 
    # A delimiter "terminal_symbol" can be defined to cause the parser to match such productions as { sym , sym , sym ...} 
    # or { term . term . term ...}. If the "terminal_symbol" is a single or double quotation (\" or \') then the production
    # values are automatically reduced to a string. 
    │ symbol ( \(+ │ \(* )  terminal_symbol?  \)                ↦cstr ^listProduction                                            
    │ θsym                                                      ↦cstr{ this.type = "symbol"; this.val = $sym1; this.pos = pos; env.symbols.push(this)}

<> EOF_symbol → 
    \$eof                                                       ↦cstr{ this.type = "eof"; this.val = "END_OF_FILE"; this.pos = pos; env.symbols.push(this) }

<> empty_symbol → 
    \ɛ                                                          ↦cstr{ this.type = "empty"; this.pos = pos; env.symbols.push(this) }


<> assert_function_symbol → 
     \assert:  (ERR θws θnl) identifier                         ↦cstr{ this.type = "assert_token_function"; this.val = $sym3; this.pos = pos; this.DOES_SHIFT = false }
    | \shift:  (ERR θws θnl) identifier                         ↦cstr{ this.type = "assert_token_function"; this.val = $sym3; this.pos = pos; this.DOES_SHIFT = true }

<> generated_symbol → 
    ( \θ │ \g: ) (ERR θws θnl) identifier                     ↦cstr{ this.type = "generated"; this.val = $sym2; this.pos = pos; env.symbols.push(this) }

<> literal_symbol → 
    ( \τ │ \t: ) (ERR θws θnl)  ( identifier │ def::natural ) sym_delimter? 
                                                                ↦cstr{ this.type = "literal"; this.val = ""+$sym2; this.pos = pos; env.symbols.push(this) }

<> escaped_symbol → 
    \\ ( θid | θsym )(+\" ) sym_delimter                        ↦cstr{ this.type = "symbol"; this.val = $sym2; this.pos = pos; env.symbols.push(this) }

<> production_token_symbol > \tk: identifier                   ↦cstr{ this.type = "production_token"; this.name = $sym2; this.val = -1; this.pos = pos; }

<> production_symbol → 
    identifier                                                  ↦cstr{ this.type = "production"; this.name = $sym1; this.val = -1; this.pos = pos;}

<> imported_production_symbol → 
    identifier \:: identifier                                   ↦c ^importProduction

<> production_id → identifier

<> identifier →  def::js_identifier 

<> js_identifier →  def::id

<> sym_delimter >  g:ws | g:nl | $eof 