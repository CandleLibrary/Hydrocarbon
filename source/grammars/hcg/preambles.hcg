#
# This annotated grammar definition is continued from hcg.hcg
#
# Imported files can have their own imports. Hydrocarbon automatically resolves 
# dependency loops and prevents duplication of imported productions.


@IMPORT ./comments.hcg as cm


@IMPORT ./symbols.hcg as sym


@IGNORE θws θnl


# Productions can be defined through the [ <> ID → symbol ... ] form as will 
# as using parenthesis ( ) to define a production group. The production group is 
# a virtual production that can have multiple production bodies within it separated by
# the │ symbol ( U+2502 BOX DRAWINGS LIGHT VERTICAL )


<> preamble → preamble_clause(*)

# The symbol represents a zero-or-more repeating pattern and is bound to the 
# preceding symbol. In this case the preamble production is composed of zero-or-more 
# preamble clauses. Symbols defined this way are reduced to an array containing 
# the matching productions.
#
#
# Multiple bodies in a single production are be separated by the │ symbol 
# ( U+2502 BOX DRAWINGS LIGHT VERTICAL )


<> preamble_clause →  ignore_preamble
    │ symbols_preamble
    │ precedence_preamble
    │ name_preamble
    │ ext_preamble
    │ error_preamble
    │ import_preamble
    │ cm::comment



# Production bodies can contain a mixture of non-terminal production names,
# terminal symbols, meta statements such as "(ERR θws)", and inline production 
# functions. 
#
# Symbols leading with the [ θ ] character are special wild card symbols that
# certain types of character combinations. If a cfw.Whind Lexer is used as the
# tokenizer, then these symbols match the names of the Lexer token types.
# In the production below, the symbol θws matches the type 
# Lexer.types.whitespace | Lexer.types.ws and the symbol θnl matches the types
# Lexer.types.newline | Lexer.types.nl
# 
# Symbols leading with the [ τ ] character are Literal Terminal symbols that
# are matched against tokens whose string value is the same as the text following 
# the τ character.

<> symbols_preamble →         @ τSYMBOL  sym::lexer_symbol(+)  θnl     ↦cstr{ 
                                                                            this.type="symbols"; 
                                                                            this.symbols = $sym3;
                                                                         }

# When the parser reaches the end of a production and is ready to reduce,
# it runs a reduction function that deals with the terminal symbols encountered in 
# the production. By default the production is reduced to value of the last terminal
# symbol, but this can be overridden by a reduce function. You would have encountered,
# one type of this function, the return reduce function [↦return{...}}], which takes 
# a JavaScript expression and returns the result.
#
# The other form is the constructor reduce function, which uses the "new" operator to create
# new JavaScript object, which is then return to as the value of the production.
                                                                        
                                                                        

<> precedence_preamble →     @ τPREC sym::terminal_symbol θnum θnl ↦cstr{     
                                                                            this.grammar_stamp = env.stamp; 
                                                                            this.type="precedence"; 
                                                                               this.terminal = $sym3; 
                                                                               this.val = parseInt($sym4)
                                                                        }    

# In either the Constructor Reduce function or the Return Expression Reduce function
# the symbols of the production can be addressed using the $sym operator, which resolves
# to the index location of the terminal symbol or non-terminal production within the 
# production body. In the following case, the $sym3 resolves to the third symbol in the proceeding
# precedence_preamble body, sym::terminal_symbol ( keep in mind [(ERR θws)] is a meta object 
# and is not an actual symbol of the production body). $sym4 resolves to the θnum symbol.
                                                                        
                                                                        

<> ignore_preamble →         @ τIGNORE sym::ignore_symbols θnl                
                                                                        
                                                                        ↦cstr{     
                                                                            this.grammar_stamp = env.stamp; 
                                                                            this.type="ignore"; 
                                                                            this.symbols = $sym3;
                                                                        }
 

<> error_preamble →         @ τERROR sym::ignore_symbols θnl                
                                                                        
                                                                        ↦cstr{     
                                                                            this.grammar_stamp = env.stamp; 
                                                                            this.type="error"; 
                                                                            this.symbols = $sym3;
                                                                        }


<> name_preamble →             @ τNAME sym::identifier θnl                     
                                                                        
                                                                        ↦cstr{ this.type="name"; this.id = $sym3 }


<> ext_preamble →             @ τEXT sym::identifier θnl                     
                                                                        
                                                                        ↦cstr{ this.type="ext"; this.id = $sym3 }


<> import_preamble →         @ τIMPORT θws(*) ( θid │ θkey │ θsym │ θtok )(+\") θws(+) (τAS│τas) sym::identifier θnl     
                                                                        
                                                                        ↦return ^importData 


