/* 
 * Copyright (C) 2021 Anthony Weathersby - The Hydrocarbon Parser Compiler
 * see /source/typescript/hydrocarbon.ts for full copyright and warranty 
 * disclaimer notice.
 */
export interface ParserData {
    ptr?: number;
    input_ptr: number;
    rules_ptr: number;
    error_ptr: number;
    debug_ptr: number;
    input_len: number;
    rules_len: number;
    error_len: number;
    debug_len: number;
    input: Uint8Array;
    rules: Uint32Array;
    error: Uint8Array;
    debug: Uint16Array;
}
export interface ForkData {
    ptr?: number;
    command_length: number;
    failed: boolean;
    valid: boolean;
    byte_offset: number;
    byte_length: number;
    line: number;
    last_production: number
}

export interface RecognizeInitializer {
    recognizer: (data: ParserData, input_byte_length?: number, production?: number) => boolean,
    init_data: (
        input_len: number,
        rules_len: number,
        error_len: number,
        debug_len: number,
    ) => ParserData,
    init_table: () => Uint8Array,
    delete_data: (data: ParserData) => void;

    /**
     * Returns a list of all forks that have been generated by recognizer.
     * 
     * If `PRUNE_FAILED` is set to true, only the root path is returned in 
     * the absence of any other valid recognizer forks.
     * 
     * if `PRUNE_FAILED` is set to fails, ALL forks are returned, valid or
     * otherwise.
     */
    get_fork_information: () => ForkData[];

    set_active_fork;

    /**
     * Returns a block of data used to buffer output data, in 64byte
     * increments. Every time this function is called the internal 
     * offset is increased by 64 bytes. 
     */
    get_next_command_block: (data: ForkData) => Uint16Array;
}
